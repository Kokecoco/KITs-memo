{"version":3,"file":"index-D0Zq5UJG.js","sources":["../../node_modules/micromark-core-commonmark/lib/attention.js","../../node_modules/micromark-core-commonmark/lib/autolink.js","../../node_modules/micromark-core-commonmark/lib/block-quote.js","../../node_modules/micromark-core-commonmark/lib/character-escape.js","../../node_modules/micromark-core-commonmark/lib/character-reference.js","../../node_modules/micromark-core-commonmark/lib/code-fenced.js","../../node_modules/micromark-core-commonmark/lib/code-indented.js","../../node_modules/micromark-core-commonmark/lib/code-text.js","../../node_modules/micromark-util-subtokenize/index.js","../../node_modules/micromark-core-commonmark/lib/content.js","../../node_modules/micromark-factory-destination/index.js","../../node_modules/micromark-factory-label/index.js","../../node_modules/micromark-factory-title/index.js","../../node_modules/micromark-factory-whitespace/index.js","../../node_modules/micromark-core-commonmark/lib/definition.js","../../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../../node_modules/micromark-core-commonmark/lib/heading-atx.js","../../node_modules/micromark-util-html-tag-name/index.js","../../node_modules/micromark-core-commonmark/lib/html-flow.js","../../node_modules/micromark-core-commonmark/lib/html-text.js","../../node_modules/micromark-core-commonmark/lib/label-end.js","../../node_modules/micromark-core-commonmark/lib/label-start-image.js","../../node_modules/micromark-core-commonmark/lib/label-start-link.js","../../node_modules/micromark-core-commonmark/lib/line-ending.js","../../node_modules/micromark-core-commonmark/lib/thematic-break.js","../../node_modules/micromark-core-commonmark/lib/list.js","../../node_modules/micromark-core-commonmark/lib/setext-underline.js","../../node_modules/micromark/lib/initialize/content.js","../../node_modules/micromark/lib/initialize/document.js","../../node_modules/micromark/lib/initialize/flow.js","../../node_modules/micromark/lib/initialize/text.js","../../node_modules/micromark/lib/create-tokenizer.js","../../node_modules/micromark/lib/constructs.js","../../node_modules/micromark/lib/parse.js","../../node_modules/micromark/lib/preprocess.js","../../node_modules/micromark/lib/postprocess.js","../../node_modules/mdast-util-from-markdown/lib/index.js","../../node_modules/remark-parse/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {void}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {void}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | void}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n\n    // @ts-expect-error `Buffer` does allow an encoding.\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * @this {import('unified').Processor}\n * @type {import('unified').Plugin<[Options?] | void[], string, Root>}\n */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n"],"names":["attention","tokenizeAttention","resolveAllAttention","events","context","index","open","group","text","openingSequence","closingSequence","use","nextEvents","offset","start","end","movePoint","push","resolveAll","splice","effects","ok","attentionMarkers","previous","before","classifyCharacter","marker","code","inside","token","after","close","point","autolink","tokenizeAutolink","nok","size","asciiAlpha","schemeOrEmailAtext","emailAtext","asciiAlphanumeric","schemeInsideOrEmailAtext","urlInside","asciiControl","emailAtSignOrDot","asciiAtext","emailLabel","emailValue","next","blockQuote","tokenizeBlockQuoteStart","tokenizeBlockQuoteContinuation","exit","self","state","markdownSpace","contStart","factorySpace","contBefore","characterEscape","tokenizeCharacterEscape","asciiPunctuation","characterReference","tokenizeCharacterReference","max","test","numeric","value","asciiHexDigit","asciiDigit","decodeNamedCharacterReference","nonLazyContinuation","tokenizeNonLazyContinuation","codeFenced","tokenizeCodeFenced","closeStart","tokenizeCloseStart","initialPrefix","sizeOpen","beforeSequenceOpen","tail","sequenceOpen","infoBefore","markdownLineEnding","atNonLazyBreak","info","metaBefore","meta","contentBefore","contentStart","beforeContentChunk","contentChunk","startBefore","beforeSequenceClose","sequenceClose","sequenceCloseAfter","lineStart","codeIndented","tokenizeCodeIndented","furtherStart","tokenizeFurtherStart","afterPrefix","atBreak","codeText","tokenizeCodeText","resolveCodeText","tailExitIndex","headEnterIndex","enter","between","data","subtokenize","jumps","event","lineIndex","otherIndex","otherEvent","parameters","subevents","more","subcontent","eventIndex","startPosition","startPositions","tokenizer","childEvents","gaps","stream","current","adjust","breaks","slice","content","tokenizeContent","resolveContent","continuationConstruct","tokenizeContinuation","chunkStart","chunkInside","contentEnd","contentContinue","startLookahead","prefixed","factoryDestination","type","literalType","literalMarkerType","rawType","stringType","limit","balance","enclosedBefore","raw","enclosed","enclosedEscape","markdownLineEndingOrSpace","rawEscape","factoryLabel","markerType","seen","labelInside","labelEscape","factoryTitle","begin","escape","factoryWhitespace","definition","tokenizeDefinition","titleBefore","tokenizeTitleBefore","identifier","labelAfter","normalizeIdentifier","markerAfter","destinationBefore","destinationAfter","afterWhitespace","beforeMarker","titleAfter","titleAfterOptionalWhitespace","hardBreakEscape","tokenizeHardBreakEscape","headingAtx","tokenizeHeadingAtx","resolveHeadingAtx","sequenceFurther","htmlBlockNames","htmlRawNames","htmlFlow","tokenizeHtmlFlow","resolveToHtmlFlow","blankLineBefore","tokenizeBlankLineBefore","nonLazyContinuationStart","tokenizeNonLazyContinuationStart","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","continuation","slash","name","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationAfter","continuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","blankLine","htmlText","tokenizeHtmlText","returnState","instruction","tagOpen","declaration","commentEnd","comment","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelEnd","tokenizeLabelEnd","resolveToLabelEnd","resolveAllLabelEnd","resourceConstruct","tokenizeResource","referenceFullConstruct","tokenizeReferenceFull","referenceCollapsedConstruct","tokenizeReferenceCollapsed","media","label","labelStart","defined","labelEndNok","labelEndOk","referenceNotFull","resourceStart","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFull","referenceFullAfter","referenceFullMissing","referenceCollapsedStart","referenceCollapsedOpen","labelStartImage","tokenizeLabelStartImage","labelStartLink","tokenizeLabelStartLink","lineEnding","tokenizeLineEnding","thematicBreak","tokenizeThematicBreak","sequence","list","tokenizeListStart","tokenizeListContinuation","tokenizeListEnd","listItemPrefixWhitespaceConstruct","tokenizeListItemPrefixWhitespace","indentConstruct","tokenizeIndent","initialSize","kind","atMarker","onBlank","endOfPrefix","otherPrefix","notBlank","notInCurrentItem","setextUnderline","tokenizeSetextUnderline","resolveToSetextUnderline","heading","paragraph","initializeContent","afterContentStartConstruct","paragraphInitial","document","initializeDocument","containerConstruct","tokenizeContainer","stack","continued","childFlow","childToken","lineStartOffset","item","documentContinue","checkNewContainers","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","flowStart","thereIsANewContainer","thereIsNoNewContainer","containerContinue","flowContinue","writeToChild","eof","entry","flow","initializeFlow","initial","atBlankEnding","afterConstruct","resolver","createResolver","string","initializeFactory","field","initializeText","resolveAllLineSuffixes","constructs","notText","extraResolver","resolveAllText","chunks","bufferIndex","tabs","chunk","createTokenizer","parser","initialize","from","columnStart","resolveAllConstructs","consume","constructFactory","onsuccessfulconstruct","onsuccessfulcheck","sliceStream","sliceSerialize","now","defineSkip","write","main","addResult","expandTabs","serializeChunks","sliceChunks","line","column","_index","_bufferIndex","accountForPotentialSkip","chunkIndex","go","fields","construct","_","onreturn","hook","bogusState","listOfConstructs","constructIndex","currentConstruct","handleListOfConstructs","handleMapOfConstructs","map","def","all","handleConstruct","store","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","restore","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","result","atTab","contentInitial","flowInitial","insideSpan","resolveText","disable","parse","options","combineExtensions","defaultConstructs","create","creator","search","preprocess","atCarriageReturn","preprocessor","encoding","match","endPosition","postprocess","own","fromMarkdown","compiler","config","opener","link","onenterdata","codeFlow","emphasis","hardBreak","html","image","listItem","onenterlistitemvalue","onenterlistordered","onenterreference","strong","closer","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","onexitdata","onexitcharacterreferencemarker","onexitcharacterreferencevalue","onexitcodefenced","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","onexitresource","onexitsetextheading","onexitsetextheadinglinesequence","onexitsetextheadingtext","configure","compile","tree","resume","setData","getData","listStack","prepareList","handler","defaultOnError","length","containerBalance","listSpread","firstBlankLineIndex","tailIndex","tailEvent","key","and","node","errorHandler","onExitError","stringifyPosition","toString","ancestor","depth","referenceType","decodeString","fragment","children","decodeNumericCharacterReference","d","combined","extensions","extension","right","left","remarkParse","doc","settings"],"mappings":"uVAgBO,MAAMA,GAAY,CACvB,KAAM,YACN,SAAUC,GACV,WAAYC,EACd,EAOA,SAASA,GAAoBC,EAAQC,EAAS,CAC5C,IAAIC,EAAQ,GAERC,EAEAC,EAEAC,EAEAC,EAEAC,EAEAC,EAEAC,EAEAC,EAMJ,KAAO,EAAER,EAAQF,EAAO,QAEtB,GACEA,EAAOE,CAAK,EAAE,CAAC,IAAM,SACrBF,EAAOE,CAAK,EAAE,CAAC,EAAE,OAAS,qBAC1BF,EAAOE,CAAK,EAAE,CAAC,EAAE,QAKjB,IAHAC,EAAOD,EAGAC,KAEL,GACEH,EAAOG,CAAI,EAAE,CAAC,IAAM,QACpBH,EAAOG,CAAI,EAAE,CAAC,EAAE,OAAS,qBACzBH,EAAOG,CAAI,EAAE,CAAC,EAAE,OAEhBF,EAAQ,eAAeD,EAAOG,CAAI,EAAE,CAAC,CAAC,EAAE,WAAW,CAAC,IAClDF,EAAQ,eAAeD,EAAOE,CAAK,EAAE,CAAC,CAAC,EAAE,WAAW,CAAC,EACvD,CAKA,IACGF,EAAOG,CAAI,EAAE,CAAC,EAAE,QAAUH,EAAOE,CAAK,EAAE,CAAC,EAAE,SAC3CF,EAAOE,CAAK,EAAE,CAAC,EAAE,IAAI,OAASF,EAAOE,CAAK,EAAE,CAAC,EAAE,MAAM,QAAU,GAChE,GACGF,EAAOG,CAAI,EAAE,CAAC,EAAE,IAAI,OACnBH,EAAOG,CAAI,EAAE,CAAC,EAAE,MAAM,OACtBH,EAAOE,CAAK,EAAE,CAAC,EAAE,IAAI,OACrBF,EAAOE,CAAK,EAAE,CAAC,EAAE,MAAM,QACzB,GAGF,SAIFM,EACER,EAAOG,CAAI,EAAE,CAAC,EAAE,IAAI,OAASH,EAAOG,CAAI,EAAE,CAAC,EAAE,MAAM,OAAS,GAC5DH,EAAOE,CAAK,EAAE,CAAC,EAAE,IAAI,OAASF,EAAOE,CAAK,EAAE,CAAC,EAAE,MAAM,OAAS,EAC1D,EACA,EACN,MAAMS,EAAQ,OAAO,OAAO,CAAE,EAAEX,EAAOG,CAAI,EAAE,CAAC,EAAE,GAAG,EAC7CS,EAAM,OAAO,OAAO,CAAE,EAAEZ,EAAOE,CAAK,EAAE,CAAC,EAAE,KAAK,EACpDW,GAAUF,EAAO,CAACH,CAAG,EACrBK,GAAUD,EAAKJ,CAAG,EAClBF,EAAkB,CAChB,KAAME,EAAM,EAAI,iBAAmB,mBACnC,MAAAG,EACA,IAAK,OAAO,OAAO,CAAE,EAAEX,EAAOG,CAAI,EAAE,CAAC,EAAE,GAAG,CAC3C,EACDI,EAAkB,CAChB,KAAMC,EAAM,EAAI,iBAAmB,mBACnC,MAAO,OAAO,OAAO,CAAE,EAAER,EAAOE,CAAK,EAAE,CAAC,EAAE,KAAK,EAC/C,IAAAU,CACD,EACDP,EAAO,CACL,KAAMG,EAAM,EAAI,aAAe,eAC/B,MAAO,OAAO,OAAO,CAAE,EAAER,EAAOG,CAAI,EAAE,CAAC,EAAE,GAAG,EAC5C,IAAK,OAAO,OAAO,CAAE,EAAEH,EAAOE,CAAK,EAAE,CAAC,EAAE,KAAK,CAC9C,EACDE,EAAQ,CACN,KAAMI,EAAM,EAAI,SAAW,WAC3B,MAAO,OAAO,OAAO,CAAA,EAAIF,EAAgB,KAAK,EAC9C,IAAK,OAAO,OAAO,CAAA,EAAIC,EAAgB,GAAG,CAC3C,EACDP,EAAOG,CAAI,EAAE,CAAC,EAAE,IAAM,OAAO,OAAO,CAAA,EAAIG,EAAgB,KAAK,EAC7DN,EAAOE,CAAK,EAAE,CAAC,EAAE,MAAQ,OAAO,OAAO,CAAA,EAAIK,EAAgB,GAAG,EAC9DE,EAAa,CAAE,EAGXT,EAAOG,CAAI,EAAE,CAAC,EAAE,IAAI,OAASH,EAAOG,CAAI,EAAE,CAAC,EAAE,MAAM,SACrDM,EAAaK,EAAKL,EAAY,CAC5B,CAAC,QAAST,EAAOG,CAAI,EAAE,CAAC,EAAGF,CAAO,EAClC,CAAC,OAAQD,EAAOG,CAAI,EAAE,CAAC,EAAGF,CAAO,CAC/C,CAAa,GAIHQ,EAAaK,EAAKL,EAAY,CAC5B,CAAC,QAASL,EAAOH,CAAO,EACxB,CAAC,QAASK,EAAiBL,CAAO,EAClC,CAAC,OAAQK,EAAiBL,CAAO,EACjC,CAAC,QAASI,EAAMJ,CAAO,CACnC,CAAW,EAKDQ,EAAaK,EACXL,EACAM,GACEd,EAAQ,OAAO,WAAW,WAAW,KACrCD,EAAO,MAAMG,EAAO,EAAGD,CAAK,EAC5BD,CACD,CACF,EAGDQ,EAAaK,EAAKL,EAAY,CAC5B,CAAC,OAAQJ,EAAMJ,CAAO,EACtB,CAAC,QAASM,EAAiBN,CAAO,EAClC,CAAC,OAAQM,EAAiBN,CAAO,EACjC,CAAC,OAAQG,EAAOH,CAAO,CACnC,CAAW,EAGGD,EAAOE,CAAK,EAAE,CAAC,EAAE,IAAI,OAASF,EAAOE,CAAK,EAAE,CAAC,EAAE,MAAM,QACvDQ,EAAS,EACTD,EAAaK,EAAKL,EAAY,CAC5B,CAAC,QAAST,EAAOE,CAAK,EAAE,CAAC,EAAGD,CAAO,EACnC,CAAC,OAAQD,EAAOE,CAAK,EAAE,CAAC,EAAGD,CAAO,CAChD,CAAa,GAEDS,EAAS,EAEXM,GAAOhB,EAAQG,EAAO,EAAGD,EAAQC,EAAO,EAAGM,CAAU,EACrDP,EAAQC,EAAOM,EAAW,OAASC,EAAS,EAC5C,KACD,EAOP,IADAR,EAAQ,GACD,EAAEA,EAAQF,EAAO,QAClBA,EAAOE,CAAK,EAAE,CAAC,EAAE,OAAS,sBAC5BF,EAAOE,CAAK,EAAE,CAAC,EAAE,KAAO,QAG5B,OAAOF,CACT,CAMA,SAASF,GAAkBmB,EAASC,EAAI,CACtC,MAAMC,EAAmB,KAAK,OAAO,WAAW,iBAAiB,KAC3DC,EAAW,KAAK,SAChBC,EAASC,GAAkBF,CAAQ,EAGzC,IAAIG,EACJ,OAAOZ,EAYP,SAASA,EAAMa,EAAM,CACnB,OAAAD,EAASC,EACTP,EAAQ,MAAM,mBAAmB,EAC1BQ,EAAOD,CAAI,CACnB,CAYD,SAASC,EAAOD,EAAM,CACpB,GAAIA,IAASD,EACX,OAAAN,EAAQ,QAAQO,CAAI,EACbC,EAET,MAAMC,EAAQT,EAAQ,KAAK,mBAAmB,EAGxCU,EAAQL,GAAkBE,CAAI,EAI9BrB,EACJ,CAACwB,GAAUA,IAAU,GAAKN,GAAWF,EAAiB,SAASK,CAAI,EAC/DI,EACJ,CAACP,GAAWA,IAAW,GAAKM,GAAUR,EAAiB,SAASC,CAAQ,EAC1E,OAAAM,EAAM,MAAQ,GAAQH,IAAW,GAAKpB,EAAOA,IAASkB,GAAU,CAACO,IACjEF,EAAM,OAAS,GAAQH,IAAW,GAAKK,EAAQA,IAAUD,GAAS,CAACxB,IAC5De,EAAGM,CAAI,CACf,CACH,CAYA,SAASX,GAAUgB,EAAOnB,EAAQ,CAChCmB,EAAM,QAAUnB,EAChBmB,EAAM,QAAUnB,EAChBmB,EAAM,cAAgBnB,CACxB,CCvPO,MAAMoB,GAAW,CACtB,KAAM,WACN,SAAUC,EACZ,EAMA,SAASA,GAAiBd,EAASC,EAAIc,EAAK,CAC1C,IAAIC,EAAO,EACX,OAAOtB,EAcP,SAASA,EAAMa,EAAM,CACnB,OAAAP,EAAQ,MAAM,UAAU,EACxBA,EAAQ,MAAM,gBAAgB,EAC9BA,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,gBAAgB,EAC7BA,EAAQ,MAAM,kBAAkB,EACzBd,CACR,CAcD,SAASA,EAAKqB,EAAM,CAClB,OAAIU,GAAWV,CAAI,GACjBP,EAAQ,QAAQO,CAAI,EACbW,GAEFC,EAAWZ,CAAI,CACvB,CAcD,SAASW,EAAmBX,EAAM,CAEhC,OAAIA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMa,EAAkBb,CAAI,GAErES,EAAO,EACAK,EAAyBd,CAAI,GAE/BY,EAAWZ,CAAI,CACvB,CAcD,SAASc,EAAyBd,EAAM,CACtC,OAAIA,IAAS,IACXP,EAAQ,QAAQO,CAAI,EACpBS,EAAO,EACAM,IAKNf,IAAS,IAAMA,IAAS,IAAMA,IAAS,IAAMa,EAAkBb,CAAI,IACpES,IAAS,IAEThB,EAAQ,QAAQO,CAAI,EACbc,IAETL,EAAO,EACAG,EAAWZ,CAAI,EACvB,CAYD,SAASe,EAAUf,EAAM,CACvB,OAAIA,IAAS,IACXP,EAAQ,KAAK,kBAAkB,EAC/BA,EAAQ,MAAM,gBAAgB,EAC9BA,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,gBAAgB,EAC7BA,EAAQ,KAAK,UAAU,EAChBC,GAILM,IAAS,MAAQA,IAAS,IAAMA,IAAS,IAAMgB,GAAahB,CAAI,EAC3DQ,EAAIR,CAAI,GAEjBP,EAAQ,QAAQO,CAAI,EACbe,EACR,CAYD,SAASH,EAAWZ,EAAM,CACxB,OAAIA,IAAS,IACXP,EAAQ,QAAQO,CAAI,EACbiB,GAELC,GAAWlB,CAAI,GACjBP,EAAQ,QAAQO,CAAI,EACbY,GAEFJ,EAAIR,CAAI,CAChB,CAYD,SAASiB,EAAiBjB,EAAM,CAC9B,OAAOa,EAAkBb,CAAI,EAAImB,EAAWnB,CAAI,EAAIQ,EAAIR,CAAI,CAC7D,CAYD,SAASmB,EAAWnB,EAAM,CACxB,OAAIA,IAAS,IACXP,EAAQ,QAAQO,CAAI,EACpBS,EAAO,EACAQ,GAELjB,IAAS,IAEXP,EAAQ,KAAK,kBAAkB,EAAE,KAAO,gBACxCA,EAAQ,MAAM,gBAAgB,EAC9BA,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,gBAAgB,EAC7BA,EAAQ,KAAK,UAAU,EAChBC,GAEF0B,EAAWpB,CAAI,CACvB,CAcD,SAASoB,EAAWpB,EAAM,CAExB,IAAKA,IAAS,IAAMa,EAAkBb,CAAI,IAAMS,IAAS,GAAI,CAC3D,MAAMY,EAAOrB,IAAS,GAAKoB,EAAaD,EACxC,OAAA1B,EAAQ,QAAQO,CAAI,EACbqB,CACR,CACD,OAAOb,EAAIR,CAAI,CAChB,CACH,CC/NO,MAAMsB,GAAa,CACxB,KAAM,aACN,SAAUC,GACV,aAAc,CACZ,SAAUC,EACX,EACD,KAAAC,EACF,EAMA,SAASF,GAAwB9B,EAASC,EAAIc,EAAK,CACjD,MAAMkB,EAAO,KACb,OAAOvC,EAYP,SAASA,EAAMa,EAAM,CACnB,GAAIA,IAAS,GAAI,CACf,MAAM2B,EAAQD,EAAK,eACnB,OAAKC,EAAM,OACTlC,EAAQ,MAAM,aAAc,CAC1B,WAAY,EACtB,CAAS,EACDkC,EAAM,KAAO,IAEflC,EAAQ,MAAM,kBAAkB,EAChCA,EAAQ,MAAM,kBAAkB,EAChCA,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,kBAAkB,EACxBU,CACR,CACD,OAAOK,EAAIR,CAAI,CAChB,CAYD,SAASG,EAAMH,EAAM,CACnB,OAAI4B,EAAc5B,CAAI,GACpBP,EAAQ,MAAM,4BAA4B,EAC1CA,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,4BAA4B,EACzCA,EAAQ,KAAK,kBAAkB,EACxBC,IAETD,EAAQ,KAAK,kBAAkB,EACxBC,EAAGM,CAAI,EACf,CACH,CAcA,SAASwB,GAA+B/B,EAASC,EAAIc,EAAK,CACxD,MAAMkB,EAAO,KACb,OAAOG,EAeP,SAASA,EAAU7B,EAAM,CACvB,OAAI4B,EAAc5B,CAAI,EAGb8B,EACLrC,EACAsC,EACA,aACAL,EAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,cAAc,EACvD,OACA,CACL,EAAC1B,CAAI,EAED+B,EAAW/B,CAAI,CACvB,CAeD,SAAS+B,EAAW/B,EAAM,CACxB,OAAOP,EAAQ,QAAQ6B,GAAY5B,EAAIc,CAAG,EAAER,CAAI,CACjD,CACH,CAGA,SAASyB,GAAKhC,EAAS,CACrBA,EAAQ,KAAK,YAAY,CAC3B,CCxIO,MAAMuC,GAAkB,CAC7B,KAAM,kBACN,SAAUC,EACZ,EAMA,SAASA,GAAwBxC,EAASC,EAAIc,EAAK,CACjD,OAAOrB,EAYP,SAASA,EAAMa,EAAM,CACnB,OAAAP,EAAQ,MAAM,iBAAiB,EAC/BA,EAAQ,MAAM,cAAc,EAC5BA,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,cAAc,EACpBQ,CACR,CAYD,SAASA,EAAOD,EAAM,CAEpB,OAAIkC,GAAiBlC,CAAI,GACvBP,EAAQ,MAAM,sBAAsB,EACpCA,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,sBAAsB,EACnCA,EAAQ,KAAK,iBAAiB,EACvBC,GAEFc,EAAIR,CAAI,CAChB,CACH,CC7CO,MAAMmC,GAAqB,CAChC,KAAM,qBACN,SAAUC,EACZ,EAMA,SAASA,GAA2B3C,EAASC,EAAIc,EAAK,CACpD,MAAMkB,EAAO,KACb,IAAIjB,EAAO,EAEP4B,EAEAC,EACJ,OAAOnD,EAgBP,SAASA,EAAMa,EAAM,CACnB,OAAAP,EAAQ,MAAM,oBAAoB,EAClCA,EAAQ,MAAM,0BAA0B,EACxCA,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,0BAA0B,EAChCd,CACR,CAiBD,SAASA,EAAKqB,EAAM,CAClB,OAAIA,IAAS,IACXP,EAAQ,MAAM,iCAAiC,EAC/CA,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,iCAAiC,EACvC8C,IAET9C,EAAQ,MAAM,yBAAyB,EACvC4C,EAAM,GACNC,EAAOzB,EACA2B,EAAMxC,CAAI,EAClB,CAcD,SAASuC,EAAQvC,EAAM,CACrB,OAAIA,IAAS,IAAMA,IAAS,KAC1BP,EAAQ,MAAM,qCAAqC,EACnDA,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,qCAAqC,EAClDA,EAAQ,MAAM,yBAAyB,EACvC4C,EAAM,EACNC,EAAOG,GACAD,IAET/C,EAAQ,MAAM,yBAAyB,EACvC4C,EAAM,EACNC,EAAOI,GACAF,EAAMxC,CAAI,EAClB,CAmBD,SAASwC,EAAMxC,EAAM,CACnB,GAAIA,IAAS,IAAMS,EAAM,CACvB,MAAMP,EAAQT,EAAQ,KAAK,yBAAyB,EACpD,OACE6C,IAASzB,GACT,CAAC8B,GAA8BjB,EAAK,eAAexB,CAAK,CAAC,EAElDM,EAAIR,CAAI,GAKjBP,EAAQ,MAAM,0BAA0B,EACxCA,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,0BAA0B,EACvCA,EAAQ,KAAK,oBAAoB,EAC1BC,EACR,CACD,OAAI4C,EAAKtC,CAAI,GAAKS,IAAS4B,GACzB5C,EAAQ,QAAQO,CAAI,EACbwC,GAEFhC,EAAIR,CAAI,CAChB,CACH,CC7IA,MAAM4C,GAAsB,CAC1B,SAAUC,GACV,QAAS,EACX,EAGaC,GAAa,CACxB,KAAM,aACN,SAAUC,GACV,SAAU,EACZ,EAMA,SAASA,GAAmBtD,EAASC,EAAIc,EAAK,CAC5C,MAAMkB,EAAO,KAEPsB,EAAa,CACjB,SAAUC,EACV,QAAS,EACV,EACD,IAAIC,EAAgB,EAChBC,EAAW,EAEXpD,EACJ,OAAOZ,EAcP,SAASA,EAAMa,EAAM,CAEnB,OAAOoD,EAAmBpD,CAAI,CAC/B,CAcD,SAASoD,EAAmBpD,EAAM,CAChC,MAAMqD,EAAO3B,EAAK,OAAOA,EAAK,OAAO,OAAS,CAAC,EAC/C,OAAAwB,EACEG,GAAQA,EAAK,CAAC,EAAE,OAAS,aACrBA,EAAK,CAAC,EAAE,eAAeA,EAAK,CAAC,EAAG,EAAI,EAAE,OACtC,EACNtD,EAASC,EACTP,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,MAAM,iBAAiB,EAC/BA,EAAQ,MAAM,yBAAyB,EAChC6D,EAAatD,CAAI,CACzB,CAcD,SAASsD,EAAatD,EAAM,CAC1B,OAAIA,IAASD,GACXoD,IACA1D,EAAQ,QAAQO,CAAI,EACbsD,GAELH,EAAW,EACN3C,EAAIR,CAAI,GAEjBP,EAAQ,KAAK,yBAAyB,EAC/BmC,EAAc5B,CAAI,EACrB8B,EAAarC,EAAS8D,EAAY,YAAY,EAAEvD,CAAI,EACpDuD,EAAWvD,CAAI,EACpB,CAcD,SAASuD,EAAWvD,EAAM,CACxB,OAAIA,IAAS,MAAQwD,EAAmBxD,CAAI,GAC1CP,EAAQ,KAAK,iBAAiB,EACvBiC,EAAK,UACRhC,EAAGM,CAAI,EACPP,EAAQ,MAAMmD,GAAqBa,EAAgBtD,CAAK,EAAEH,CAAI,IAEpEP,EAAQ,MAAM,qBAAqB,EACnCA,EAAQ,MAAM,cAAe,CAC3B,YAAa,QACnB,CAAK,EACMiE,EAAK1D,CAAI,EACjB,CAcD,SAAS0D,EAAK1D,EAAM,CAClB,OAAIA,IAAS,MAAQwD,EAAmBxD,CAAI,GAC1CP,EAAQ,KAAK,aAAa,EAC1BA,EAAQ,KAAK,qBAAqB,EAC3B8D,EAAWvD,CAAI,GAEpB4B,EAAc5B,CAAI,GACpBP,EAAQ,KAAK,aAAa,EAC1BA,EAAQ,KAAK,qBAAqB,EAC3BqC,EAAarC,EAASkE,EAAY,YAAY,EAAE3D,CAAI,GAEzDA,IAAS,IAAMA,IAASD,EACnBS,EAAIR,CAAI,GAEjBP,EAAQ,QAAQO,CAAI,EACb0D,EACR,CAcD,SAASC,EAAW3D,EAAM,CACxB,OAAIA,IAAS,MAAQwD,EAAmBxD,CAAI,EACnCuD,EAAWvD,CAAI,GAExBP,EAAQ,MAAM,qBAAqB,EACnCA,EAAQ,MAAM,cAAe,CAC3B,YAAa,QACnB,CAAK,EACMmE,EAAK5D,CAAI,EACjB,CAcD,SAAS4D,EAAK5D,EAAM,CAClB,OAAIA,IAAS,MAAQwD,EAAmBxD,CAAI,GAC1CP,EAAQ,KAAK,aAAa,EAC1BA,EAAQ,KAAK,qBAAqB,EAC3B8D,EAAWvD,CAAI,GAEpBA,IAAS,IAAMA,IAASD,EACnBS,EAAIR,CAAI,GAEjBP,EAAQ,QAAQO,CAAI,EACb4D,EACR,CAeD,SAASH,EAAezD,EAAM,CAC5B,OAAOP,EAAQ,QAAQuD,EAAY7C,EAAO0D,CAAa,EAAE7D,CAAI,CAC9D,CAcD,SAAS6D,EAAc7D,EAAM,CAC3B,OAAAP,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,YAAY,EAClBqE,CACR,CAcD,SAASA,EAAa9D,EAAM,CAC1B,OAAOkD,EAAgB,GAAKtB,EAAc5B,CAAI,EAC1C8B,EACErC,EACAsE,EACA,aACAb,EAAgB,CACjB,EAAClD,CAAI,EACN+D,EAAmB/D,CAAI,CAC5B,CAcD,SAAS+D,EAAmB/D,EAAM,CAChC,OAAIA,IAAS,MAAQwD,EAAmBxD,CAAI,EACnCP,EAAQ,MAAMmD,GAAqBa,EAAgBtD,CAAK,EAAEH,CAAI,GAEvEP,EAAQ,MAAM,eAAe,EACtBuE,EAAahE,CAAI,EACzB,CAcD,SAASgE,EAAahE,EAAM,CAC1B,OAAIA,IAAS,MAAQwD,EAAmBxD,CAAI,GAC1CP,EAAQ,KAAK,eAAe,EACrBsE,EAAmB/D,CAAI,IAEhCP,EAAQ,QAAQO,CAAI,EACbgE,EACR,CAcD,SAAS7D,EAAMH,EAAM,CACnB,OAAAP,EAAQ,KAAK,YAAY,EAClBC,EAAGM,CAAI,CACf,CAMD,SAASiD,EAAmBxD,EAASC,EAAIc,EAAK,CAC5C,IAAIC,EAAO,EACX,OAAOwD,EAOP,SAASA,EAAYjE,EAAM,CACzB,OAAAP,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,YAAY,EAClBN,CACR,CAcD,SAASA,EAAMa,EAAM,CAInB,OAAAP,EAAQ,MAAM,iBAAiB,EACxBmC,EAAc5B,CAAI,EACrB8B,EACErC,EACAyE,EACA,aACAxC,EAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,cAAc,EACvD,OACA,CACL,EAAC1B,CAAI,EACNkE,EAAoBlE,CAAI,CAC7B,CAcD,SAASkE,EAAoBlE,EAAM,CACjC,OAAIA,IAASD,GACXN,EAAQ,MAAM,yBAAyB,EAChC0E,EAAcnE,CAAI,GAEpBQ,EAAIR,CAAI,CAChB,CAcD,SAASmE,EAAcnE,EAAM,CAC3B,OAAIA,IAASD,GACXU,IACAhB,EAAQ,QAAQO,CAAI,EACbmE,GAEL1D,GAAQ0C,GACV1D,EAAQ,KAAK,yBAAyB,EAC/BmC,EAAc5B,CAAI,EACrB8B,EAAarC,EAAS2E,EAAoB,YAAY,EAAEpE,CAAI,EAC5DoE,EAAmBpE,CAAI,GAEtBQ,EAAIR,CAAI,CAChB,CAcD,SAASoE,EAAmBpE,EAAM,CAChC,OAAIA,IAAS,MAAQwD,EAAmBxD,CAAI,GAC1CP,EAAQ,KAAK,iBAAiB,EACvBC,EAAGM,CAAI,GAETQ,EAAIR,CAAI,CAChB,CACF,CACH,CAMA,SAAS6C,GAA4BpD,EAASC,EAAIc,EAAK,CACrD,MAAMkB,EAAO,KACb,OAAOvC,EAOP,SAASA,EAAMa,EAAM,CACnB,OAAIA,IAAS,KACJQ,EAAIR,CAAI,GAEjBP,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,YAAY,EAClB4E,EACR,CAOD,SAASA,EAAUrE,EAAM,CACvB,OAAO0B,EAAK,OAAO,KAAKA,EAAK,IAAG,EAAG,IAAI,EAAIlB,EAAIR,CAAI,EAAIN,EAAGM,CAAI,CAC/D,CACH,CCrdO,MAAMsE,GAAe,CAC1B,KAAM,eACN,SAAUC,EACZ,EAGMC,GAAe,CACnB,SAAUC,GACV,QAAS,EACX,EAMA,SAASF,GAAqB9E,EAASC,EAAIc,EAAK,CAC9C,MAAMkB,EAAO,KACb,OAAOvC,EAgBP,SAASA,EAAMa,EAAM,CAGnB,OAAAP,EAAQ,MAAM,cAAc,EAGrBqC,EAAarC,EAASiF,EAAa,aAAc,CAAK,EAAE1E,CAAI,CACpE,CAYD,SAAS0E,EAAY1E,EAAM,CACzB,MAAMqD,EAAO3B,EAAK,OAAOA,EAAK,OAAO,OAAS,CAAC,EAC/C,OAAO2B,GACLA,EAAK,CAAC,EAAE,OAAS,cACjBA,EAAK,CAAC,EAAE,eAAeA,EAAK,CAAC,EAAG,EAAI,EAAE,QAAU,EAC9CsB,EAAQ3E,CAAI,EACZQ,EAAIR,CAAI,CACb,CAYD,SAAS2E,EAAQ3E,EAAM,CACrB,OAAIA,IAAS,KACJG,EAAMH,CAAI,EAEfwD,EAAmBxD,CAAI,EAClBP,EAAQ,QAAQ+E,GAAcG,EAASxE,CAAK,EAAEH,CAAI,GAE3DP,EAAQ,MAAM,eAAe,EACtBQ,EAAOD,CAAI,EACnB,CAYD,SAASC,EAAOD,EAAM,CACpB,OAAIA,IAAS,MAAQwD,EAAmBxD,CAAI,GAC1CP,EAAQ,KAAK,eAAe,EACrBkF,EAAQ3E,CAAI,IAErBP,EAAQ,QAAQO,CAAI,EACbC,EACR,CAGD,SAASE,EAAMH,EAAM,CACnB,OAAAP,EAAQ,KAAK,cAAc,EAIpBC,EAAGM,CAAI,CACf,CACH,CAMA,SAASyE,GAAqBhF,EAASC,EAAIc,EAAK,CAC9C,MAAMkB,EAAO,KACb,OAAO8C,EAaP,SAASA,EAAaxE,EAAM,CAG1B,OAAI0B,EAAK,OAAO,KAAKA,EAAK,IAAG,EAAG,IAAI,EAC3BlB,EAAIR,CAAI,EAEbwD,EAAmBxD,CAAI,GACzBP,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,YAAY,EAClB+E,GASF1C,EAAarC,EAASiF,EAAa,aAAc,CAAK,EAAE1E,CAAI,CACpE,CAYD,SAAS0E,EAAY1E,EAAM,CACzB,MAAMqD,EAAO3B,EAAK,OAAOA,EAAK,OAAO,OAAS,CAAC,EAC/C,OAAO2B,GACLA,EAAK,CAAC,EAAE,OAAS,cACjBA,EAAK,CAAC,EAAE,eAAeA,EAAK,CAAC,EAAG,EAAI,EAAE,QAAU,EAC9C3D,EAAGM,CAAI,EACPwD,EAAmBxD,CAAI,EACvBwE,EAAaxE,CAAI,EACjBQ,EAAIR,CAAI,CACb,CACH,CC1KO,MAAM4E,GAAW,CACtB,KAAM,WACN,SAAUC,GACV,QAASC,GACT,SAAAlF,EACF,EAIA,SAASkF,GAAgBtG,EAAQ,CAC/B,IAAIuG,EAAgBvG,EAAO,OAAS,EAChCwG,EAAiB,EAEjBtG,EAEAuG,EAGJ,IACGzG,EAAOwG,CAAc,EAAE,CAAC,EAAE,OAAS,cAClCxG,EAAOwG,CAAc,EAAE,CAAC,EAAE,OAAS,WACpCxG,EAAOuG,CAAa,EAAE,CAAC,EAAE,OAAS,cACjCvG,EAAOuG,CAAa,EAAE,CAAC,EAAE,OAAS,UAKpC,IAHArG,EAAQsG,EAGD,EAAEtG,EAAQqG,GACf,GAAIvG,EAAOE,CAAK,EAAE,CAAC,EAAE,OAAS,eAAgB,CAE5CF,EAAOwG,CAAc,EAAE,CAAC,EAAE,KAAO,kBACjCxG,EAAOuG,CAAa,EAAE,CAAC,EAAE,KAAO,kBAChCC,GAAkB,EAClBD,GAAiB,EACjB,KACD,EAOL,IAFArG,EAAQsG,EAAiB,EACzBD,IACO,EAAErG,GAASqG,GACZE,IAAU,OACRvG,IAAUqG,GAAiBvG,EAAOE,CAAK,EAAE,CAAC,EAAE,OAAS,eACvDuG,EAAQvG,IAGVA,IAAUqG,GACVvG,EAAOE,CAAK,EAAE,CAAC,EAAE,OAAS,gBAE1BF,EAAOyG,CAAK,EAAE,CAAC,EAAE,KAAO,eACpBvG,IAAUuG,EAAQ,IACpBzG,EAAOyG,CAAK,EAAE,CAAC,EAAE,IAAMzG,EAAOE,EAAQ,CAAC,EAAE,CAAC,EAAE,IAC5CF,EAAO,OAAOyG,EAAQ,EAAGvG,EAAQuG,EAAQ,CAAC,EAC1CF,GAAiBrG,EAAQuG,EAAQ,EACjCvG,EAAQuG,EAAQ,GAElBA,EAAQ,QAGZ,OAAOzG,CACT,CAMA,SAASoB,GAASI,EAAM,CAEtB,OACEA,IAAS,IACT,KAAK,OAAO,KAAK,OAAO,OAAS,CAAC,EAAE,CAAC,EAAE,OAAS,iBAEpD,CAMA,SAAS6E,GAAiBpF,EAASC,EAAIc,EAAK,CAE1C,IAAI2C,EAAW,EAEX1C,EAEAP,EACJ,OAAOf,EAcP,SAASA,EAAMa,EAAM,CACnB,OAAAP,EAAQ,MAAM,UAAU,EACxBA,EAAQ,MAAM,kBAAkB,EACzB6D,EAAatD,CAAI,CACzB,CAYD,SAASsD,EAAatD,EAAM,CAC1B,OAAIA,IAAS,IACXP,EAAQ,QAAQO,CAAI,EACpBmD,IACOG,IAET7D,EAAQ,KAAK,kBAAkB,EACxByF,EAAQlF,CAAI,EACpB,CAYD,SAASkF,EAAQlF,EAAM,CAErB,OAAIA,IAAS,KACJQ,EAAIR,CAAI,EAMbA,IAAS,IACXP,EAAQ,MAAM,OAAO,EACrBA,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,OAAO,EACbyF,GAILlF,IAAS,IACXE,EAAQT,EAAQ,MAAM,kBAAkB,EACxCgB,EAAO,EACA0D,EAAcnE,CAAI,GAEvBwD,EAAmBxD,CAAI,GACzBP,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,YAAY,EAClByF,IAITzF,EAAQ,MAAM,cAAc,EACrB0F,EAAKnF,CAAI,EACjB,CAYD,SAASmF,EAAKnF,EAAM,CAClB,OACEA,IAAS,MACTA,IAAS,IACTA,IAAS,IACTwD,EAAmBxD,CAAI,GAEvBP,EAAQ,KAAK,cAAc,EACpByF,EAAQlF,CAAI,IAErBP,EAAQ,QAAQO,CAAI,EACbmF,EACR,CAYD,SAAShB,EAAcnE,EAAM,CAE3B,OAAIA,IAAS,IACXP,EAAQ,QAAQO,CAAI,EACpBS,IACO0D,GAIL1D,IAAS0C,GACX1D,EAAQ,KAAK,kBAAkB,EAC/BA,EAAQ,KAAK,UAAU,EAChBC,EAAGM,CAAI,IAIhBE,EAAM,KAAO,eACNiF,EAAKnF,CAAI,EACjB,CACH,CC7NO,SAASoF,GAAY5G,EAAQ,CAElC,MAAM6G,EAAQ,CAAE,EAChB,IAAI3G,EAAQ,GAER4G,EAEAC,EAEAC,EAEAC,EAEAC,EAEAC,EAEAC,EACJ,KAAO,EAAElH,EAAQF,EAAO,QAAQ,CAC9B,KAAOE,KAAS2G,GACd3G,EAAQ2G,EAAM3G,CAAK,EAMrB,GAJA4G,EAAQ9G,EAAOE,CAAK,EAKlBA,GACA4G,EAAM,CAAC,EAAE,OAAS,aAClB9G,EAAOE,EAAQ,CAAC,EAAE,CAAC,EAAE,OAAS,mBAE9BiH,EAAYL,EAAM,CAAC,EAAE,WAAW,OAChCE,EAAa,EAEXA,EAAaG,EAAU,QACvBA,EAAUH,CAAU,EAAE,CAAC,EAAE,OAAS,oBAElCA,GAAc,GAGdA,EAAaG,EAAU,QACvBA,EAAUH,CAAU,EAAE,CAAC,EAAE,OAAS,WAElC,KAAO,EAAEA,EAAaG,EAAU,QAC1BA,EAAUH,CAAU,EAAE,CAAC,EAAE,OAAS,WAGlCG,EAAUH,CAAU,EAAE,CAAC,EAAE,OAAS,cACpCG,EAAUH,CAAU,EAAE,CAAC,EAAE,4BAA8B,GACvDA,KAOR,GAAIF,EAAM,CAAC,IAAM,QACXA,EAAM,CAAC,EAAE,cACX,OAAO,OAAOD,EAAOQ,GAAWrH,EAAQE,CAAK,CAAC,EAC9CA,EAAQ2G,EAAM3G,CAAK,EACnBkH,EAAO,YAIFN,EAAM,CAAC,EAAE,WAAY,CAG5B,IAFAE,EAAa9G,EACb6G,EAAY,OACLC,MACLC,EAAajH,EAAOgH,CAAU,EAE5BC,EAAW,CAAC,EAAE,OAAS,cACvBA,EAAW,CAAC,EAAE,OAAS,oBAEnBA,EAAW,CAAC,IAAM,UAChBF,IACF/G,EAAO+G,CAAS,EAAE,CAAC,EAAE,KAAO,mBAE9BE,EAAW,CAAC,EAAE,KAAO,aACrBF,EAAYC,GAMdD,IAEFD,EAAM,CAAC,EAAE,IAAM,OAAO,OAAO,GAAI9G,EAAO+G,CAAS,EAAE,CAAC,EAAE,KAAK,EAG3DG,EAAalH,EAAO,MAAM+G,EAAW7G,CAAK,EAC1CgH,EAAW,QAAQJ,CAAK,EACxB9F,GAAOhB,EAAQ+G,EAAW7G,EAAQ6G,EAAY,EAAGG,CAAU,EAE9D,CACF,CACD,MAAO,CAACE,CACV,CASA,SAASC,GAAWrH,EAAQsH,EAAY,CACtC,MAAM5F,EAAQ1B,EAAOsH,CAAU,EAAE,CAAC,EAC5BrH,EAAUD,EAAOsH,CAAU,EAAE,CAAC,EACpC,IAAIC,EAAgBD,EAAa,EAEjC,MAAME,EAAiB,CAAE,EACnBC,EACJ/F,EAAM,YAAczB,EAAQ,OAAOyB,EAAM,WAAW,EAAEA,EAAM,KAAK,EAC7DgG,EAAcD,EAAU,OAExBZ,EAAQ,CAAE,EAEVc,EAAO,CAAE,EAEf,IAAIC,EAEAxG,EACAlB,EAAQ,GAER2H,EAAUnG,EACVoG,EAAS,EACTnH,EAAQ,EACZ,MAAMoH,EAAS,CAACpH,CAAK,EAIrB,KAAOkH,GAAS,CAEd,KAAO7H,EAAO,EAAEuH,CAAa,EAAE,CAAC,IAAMM,GAAS,CAG/CL,EAAe,KAAKD,CAAa,EAC5BM,EAAQ,aACXD,EAAS3H,EAAQ,YAAY4H,CAAO,EAC/BA,EAAQ,MACXD,EAAO,KAAK,IAAI,EAEdxG,GACFqG,EAAU,WAAWI,EAAQ,KAAK,EAEhCA,EAAQ,8BACVJ,EAAU,mCAAqC,IAEjDA,EAAU,MAAMG,CAAM,EAClBC,EAAQ,8BACVJ,EAAU,mCAAqC,SAKnDrG,EAAWyG,EACXA,EAAUA,EAAQ,IACnB,CAKD,IADAA,EAAUnG,EACH,EAAExB,EAAQwH,EAAY,QAGzBA,EAAYxH,CAAK,EAAE,CAAC,IAAM,QAC1BwH,EAAYxH,EAAQ,CAAC,EAAE,CAAC,IAAM,SAC9BwH,EAAYxH,CAAK,EAAE,CAAC,EAAE,OAASwH,EAAYxH,EAAQ,CAAC,EAAE,CAAC,EAAE,MACzDwH,EAAYxH,CAAK,EAAE,CAAC,EAAE,MAAM,OAASwH,EAAYxH,CAAK,EAAE,CAAC,EAAE,IAAI,OAE/DS,EAAQT,EAAQ,EAChB6H,EAAO,KAAKpH,CAAK,EAEjBkH,EAAQ,WAAa,OACrBA,EAAQ,SAAW,OACnBA,EAAUA,EAAQ,MAqBtB,IAhBAJ,EAAU,OAAS,CAAE,EAKjBI,GAEFA,EAAQ,WAAa,OACrBA,EAAQ,SAAW,QAEnBE,EAAO,IAAK,EAKd7H,EAAQ6H,EAAO,OACR7H,KAAS,CACd,MAAM8H,EAAQN,EAAY,MAAMK,EAAO7H,CAAK,EAAG6H,EAAO7H,EAAQ,CAAC,CAAC,EAC1DS,EAAQ6G,EAAe,IAAK,EAClCX,EAAM,QAAQ,CAAClG,EAAOA,EAAQqH,EAAM,OAAS,CAAC,CAAC,EAC/ChH,GAAOhB,EAAQW,EAAO,EAAGqH,CAAK,CAC/B,CAED,IADA9H,EAAQ,GACD,EAAEA,EAAQ2G,EAAM,QACrBc,EAAKG,EAASjB,EAAM3G,CAAK,EAAE,CAAC,CAAC,EAAI4H,EAASjB,EAAM3G,CAAK,EAAE,CAAC,EACxD4H,GAAUjB,EAAM3G,CAAK,EAAE,CAAC,EAAI2G,EAAM3G,CAAK,EAAE,CAAC,EAAI,EAEhD,OAAOyH,CACT,CC/MO,MAAMM,GAAU,CACrB,SAAUC,GACV,QAASC,EACX,EAGMC,GAAwB,CAC5B,SAAUC,GACV,QAAS,EACX,EAQA,SAASF,GAAenI,EAAQ,CAC9B,OAAA4G,GAAY5G,CAAM,EACXA,CACT,CAMA,SAASkI,GAAgBjH,EAASC,EAAI,CAEpC,IAAIE,EACJ,OAAOkH,EAYP,SAASA,EAAW9G,EAAM,CACxB,OAAAP,EAAQ,MAAM,SAAS,EACvBG,EAAWH,EAAQ,MAAM,eAAgB,CACvC,YAAa,SACnB,CAAK,EACMsH,EAAY/G,CAAI,CACxB,CAYD,SAAS+G,EAAY/G,EAAM,CACzB,OAAIA,IAAS,KACJgH,EAAWhH,CAAI,EAKpBwD,EAAmBxD,CAAI,EAClBP,EAAQ,MACbmH,GACAK,EACAD,CACD,EAAChH,CAAI,GAIRP,EAAQ,QAAQO,CAAI,EACb+G,EACR,CAOD,SAASC,EAAWhH,EAAM,CACxB,OAAAP,EAAQ,KAAK,cAAc,EAC3BA,EAAQ,KAAK,SAAS,EACfC,EAAGM,CAAI,CACf,CAOD,SAASiH,EAAgBjH,EAAM,CAC7B,OAAAP,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,cAAc,EAC3BG,EAAS,KAAOH,EAAQ,MAAM,eAAgB,CAC5C,YAAa,UACb,SAAAG,CACN,CAAK,EACDA,EAAWA,EAAS,KACbmH,CACR,CACH,CAMA,SAASF,GAAqBpH,EAASC,EAAIc,EAAK,CAC9C,MAAMkB,EAAO,KACb,OAAOwF,EAOP,SAASA,EAAelH,EAAM,CAC5B,OAAAP,EAAQ,KAAK,cAAc,EAC3BA,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,YAAY,EAClBqC,EAAarC,EAAS0H,EAAU,YAAY,CACpD,CAOD,SAASA,EAASnH,EAAM,CACtB,GAAIA,IAAS,MAAQwD,EAAmBxD,CAAI,EAC1C,OAAOQ,EAAIR,CAAI,EAKjB,MAAMqD,EAAO3B,EAAK,OAAOA,EAAK,OAAO,OAAS,CAAC,EAC/C,MACE,CAACA,EAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,cAAc,GAC5D2B,GACAA,EAAK,CAAC,EAAE,OAAS,cACjBA,EAAK,CAAC,EAAE,eAAeA,EAAK,CAAC,EAAG,EAAI,EAAE,QAAU,EAEzC3D,EAAGM,CAAI,EAETP,EAAQ,UAAUiC,EAAK,OAAO,WAAW,KAAMlB,EAAKd,CAAE,EAAEM,CAAI,CACpE,CACH,CCvHO,SAASoH,GACd3H,EACAC,EACAc,EACA6G,EACAC,EACAC,EACAC,EACAC,EACApF,EACA,CACA,MAAMqF,EAAQrF,GAAO,OAAO,kBAC5B,IAAIsF,EAAU,EACd,OAAOxI,EAcP,SAASA,EAAMa,EAAM,CACnB,OAAIA,IAAS,IACXP,EAAQ,MAAM4H,CAAI,EAClB5H,EAAQ,MAAM6H,CAAW,EACzB7H,EAAQ,MAAM8H,CAAiB,EAC/B9H,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK8H,CAAiB,EACvBK,GAIL5H,IAAS,MAAQA,IAAS,IAAMA,IAAS,IAAMgB,GAAahB,CAAI,EAC3DQ,EAAIR,CAAI,GAEjBP,EAAQ,MAAM4H,CAAI,EAClB5H,EAAQ,MAAM+H,CAAO,EACrB/H,EAAQ,MAAMgI,CAAU,EACxBhI,EAAQ,MAAM,cAAe,CAC3B,YAAa,QACnB,CAAK,EACMoI,EAAI7H,CAAI,EAChB,CAYD,SAAS4H,EAAe5H,EAAM,CAC5B,OAAIA,IAAS,IACXP,EAAQ,MAAM8H,CAAiB,EAC/B9H,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK8H,CAAiB,EAC9B9H,EAAQ,KAAK6H,CAAW,EACxB7H,EAAQ,KAAK4H,CAAI,EACV3H,IAETD,EAAQ,MAAMgI,CAAU,EACxBhI,EAAQ,MAAM,cAAe,CAC3B,YAAa,QACnB,CAAK,EACMqI,EAAS9H,CAAI,EACrB,CAYD,SAAS8H,EAAS9H,EAAM,CACtB,OAAIA,IAAS,IACXP,EAAQ,KAAK,aAAa,EAC1BA,EAAQ,KAAKgI,CAAU,EAChBG,EAAe5H,CAAI,GAExBA,IAAS,MAAQA,IAAS,IAAMwD,EAAmBxD,CAAI,EAClDQ,EAAIR,CAAI,GAEjBP,EAAQ,QAAQO,CAAI,EACbA,IAAS,GAAK+H,EAAiBD,EACvC,CAYD,SAASC,EAAe/H,EAAM,CAC5B,OAAIA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IACzCP,EAAQ,QAAQO,CAAI,EACb8H,GAEFA,EAAS9H,CAAI,CACrB,CAYD,SAAS6H,EAAI7H,EAAM,CACjB,MACE,CAAC2H,IACA3H,IAAS,MAAQA,IAAS,IAAMgI,EAA0BhI,CAAI,IAE/DP,EAAQ,KAAK,aAAa,EAC1BA,EAAQ,KAAKgI,CAAU,EACvBhI,EAAQ,KAAK+H,CAAO,EACpB/H,EAAQ,KAAK4H,CAAI,EACV3H,EAAGM,CAAI,GAEZ2H,EAAUD,GAAS1H,IAAS,IAC9BP,EAAQ,QAAQO,CAAI,EACpB2H,IACOE,GAEL7H,IAAS,IACXP,EAAQ,QAAQO,CAAI,EACpB2H,IACOE,GAML7H,IAAS,MAAQA,IAAS,IAAMA,IAAS,IAAMgB,GAAahB,CAAI,EAC3DQ,EAAIR,CAAI,GAEjBP,EAAQ,QAAQO,CAAI,EACbA,IAAS,GAAKiI,EAAYJ,EAClC,CAYD,SAASI,EAAUjI,EAAM,CACvB,OAAIA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IACzCP,EAAQ,QAAQO,CAAI,EACb6H,GAEFA,EAAI7H,CAAI,CAChB,CACH,CCzLO,SAASkI,GAAazI,EAASC,EAAIc,EAAK6G,EAAMc,EAAYV,EAAY,CAC3E,MAAM/F,EAAO,KACb,IAAIjB,EAAO,EAEP2H,EACJ,OAAOjJ,EAYP,SAASA,EAAMa,EAAM,CACnB,OAAAP,EAAQ,MAAM4H,CAAI,EAClB5H,EAAQ,MAAM0I,CAAU,EACxB1I,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK0I,CAAU,EACvB1I,EAAQ,MAAMgI,CAAU,EACjB9C,CACR,CAYD,SAASA,EAAQ3E,EAAM,CACrB,OACES,EAAO,KACPT,IAAS,MACTA,IAAS,IACRA,IAAS,IAAM,CAACoI,GAMhBpI,IAAS,IACR,CAACS,GACD,2BAA4BiB,EAAK,OAAO,WAEnClB,EAAIR,CAAI,EAEbA,IAAS,IACXP,EAAQ,KAAKgI,CAAU,EACvBhI,EAAQ,MAAM0I,CAAU,EACxB1I,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK0I,CAAU,EACvB1I,EAAQ,KAAK4H,CAAI,EACV3H,GAIL8D,EAAmBxD,CAAI,GACzBP,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,YAAY,EAClBkF,IAETlF,EAAQ,MAAM,cAAe,CAC3B,YAAa,QACnB,CAAK,EACM4I,EAAYrI,CAAI,EACxB,CAYD,SAASqI,EAAYrI,EAAM,CACzB,OACEA,IAAS,MACTA,IAAS,IACTA,IAAS,IACTwD,EAAmBxD,CAAI,GACvBS,IAAS,KAEThB,EAAQ,KAAK,aAAa,EACnBkF,EAAQ3E,CAAI,IAErBP,EAAQ,QAAQO,CAAI,EACfoI,IAAMA,EAAO,CAACxG,EAAc5B,CAAI,GAC9BA,IAAS,GAAKsI,EAAcD,EACpC,CAYD,SAASC,EAAYtI,EAAM,CACzB,OAAIA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IACzCP,EAAQ,QAAQO,CAAI,EACpBS,IACO4H,GAEFA,EAAYrI,CAAI,CACxB,CACH,CCtHO,SAASuI,GAAa9I,EAASC,EAAIc,EAAK6G,EAAMc,EAAYV,EAAY,CAE3E,IAAI1H,EACJ,OAAOZ,EAYP,SAASA,EAAMa,EAAM,CACnB,OAAIA,IAAS,IAAMA,IAAS,IAAMA,IAAS,IACzCP,EAAQ,MAAM4H,CAAI,EAClB5H,EAAQ,MAAM0I,CAAU,EACxB1I,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK0I,CAAU,EACvBpI,EAASC,IAAS,GAAK,GAAKA,EACrBwI,GAEFhI,EAAIR,CAAI,CAChB,CAcD,SAASwI,EAAMxI,EAAM,CACnB,OAAIA,IAASD,GACXN,EAAQ,MAAM0I,CAAU,EACxB1I,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK0I,CAAU,EACvB1I,EAAQ,KAAK4H,CAAI,EACV3H,IAETD,EAAQ,MAAMgI,CAAU,EACjB9C,EAAQ3E,CAAI,EACpB,CAYD,SAAS2E,EAAQ3E,EAAM,CACrB,OAAIA,IAASD,GACXN,EAAQ,KAAKgI,CAAU,EAChBe,EAAMzI,CAAM,GAEjBC,IAAS,KACJQ,EAAIR,CAAI,EAIbwD,EAAmBxD,CAAI,GAEzBP,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,YAAY,EAClBqC,EAAarC,EAASkF,EAAS,YAAY,IAEpDlF,EAAQ,MAAM,cAAe,CAC3B,YAAa,QACnB,CAAK,EACMQ,EAAOD,CAAI,EACnB,CAOD,SAASC,EAAOD,EAAM,CACpB,OAAIA,IAASD,GAAUC,IAAS,MAAQwD,EAAmBxD,CAAI,GAC7DP,EAAQ,KAAK,aAAa,EACnBkF,EAAQ3E,CAAI,IAErBP,EAAQ,QAAQO,CAAI,EACbA,IAAS,GAAKyI,EAASxI,EAC/B,CAYD,SAASwI,EAAOzI,EAAM,CACpB,OAAIA,IAASD,GAAUC,IAAS,IAC9BP,EAAQ,QAAQO,CAAI,EACbC,GAEFA,EAAOD,CAAI,CACnB,CACH,CClIO,SAAS0I,GAAkBjJ,EAASC,EAAI,CAE7C,IAAI0I,EACJ,OAAOjJ,EAGP,SAASA,EAAMa,EAAM,CACnB,OAAIwD,EAAmBxD,CAAI,GACzBP,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,YAAY,EACzB2I,EAAO,GACAjJ,GAELyC,EAAc5B,CAAI,EACb8B,EACLrC,EACAN,EACAiJ,EAAO,aAAe,YACvB,EAACpI,CAAI,EAEDN,EAAGM,CAAI,CACf,CACH,CC7BO,MAAM2I,GAAa,CACxB,KAAM,aACN,SAAUC,EACZ,EAGMC,GAAc,CAClB,SAAUC,GACV,QAAS,EACX,EAMA,SAASF,GAAmBnJ,EAASC,EAAIc,EAAK,CAC5C,MAAMkB,EAAO,KAEb,IAAIqH,EACJ,OAAO5J,EAYP,SAASA,EAAMa,EAAM,CAInB,OAAAP,EAAQ,MAAM,YAAY,EACnBI,EAAOG,CAAI,CACnB,CAYD,SAASH,EAAOG,EAAM,CAGpB,OAAOkI,GAAa,KAClBxG,EACAjC,EACAuJ,EAEAxI,EACA,kBACA,wBACA,uBACD,EAACR,CAAI,CACP,CAYD,SAASgJ,EAAWhJ,EAAM,CAIxB,OAHA+I,EAAaE,GACXvH,EAAK,eAAeA,EAAK,OAAOA,EAAK,OAAO,OAAS,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,EAAG,EAAE,CACxE,EACG1B,IAAS,IACXP,EAAQ,MAAM,kBAAkB,EAChCA,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,kBAAkB,EACxByJ,GAEF1I,EAAIR,CAAI,CAChB,CAYD,SAASkJ,EAAYlJ,EAAM,CAEzB,OAAOgI,EAA0BhI,CAAI,EACjC0I,GAAkBjJ,EAAS0J,CAAiB,EAAEnJ,CAAI,EAClDmJ,EAAkBnJ,CAAI,CAC3B,CAYD,SAASmJ,EAAkBnJ,EAAM,CAC/B,OAAOoH,GACL3H,EACA2J,EAEA5I,EACA,wBACA,+BACA,qCACA,2BACA,6BACD,EAACR,CAAI,CACP,CAYD,SAASoJ,EAAiBpJ,EAAM,CAC9B,OAAOP,EAAQ,QAAQoJ,GAAa1I,EAAOA,CAAK,EAAEH,CAAI,CACvD,CAcD,SAASG,EAAMH,EAAM,CACnB,OAAO4B,EAAc5B,CAAI,EACrB8B,EAAarC,EAAS4J,EAAiB,YAAY,EAAErJ,CAAI,EACzDqJ,EAAgBrJ,CAAI,CACzB,CAcD,SAASqJ,EAAgBrJ,EAAM,CAC7B,OAAIA,IAAS,MAAQwD,EAAmBxD,CAAI,GAC1CP,EAAQ,KAAK,YAAY,EAKzBiC,EAAK,OAAO,QAAQ,KAAKqH,CAAU,EAK5BrJ,EAAGM,CAAI,GAETQ,EAAIR,CAAI,CAChB,CACH,CAMA,SAAS8I,GAAoBrJ,EAASC,EAAIc,EAAK,CAC7C,OAAOqI,EAcP,SAASA,EAAY7I,EAAM,CACzB,OAAOgI,EAA0BhI,CAAI,EACjC0I,GAAkBjJ,EAAS6J,CAAY,EAAEtJ,CAAI,EAC7CQ,EAAIR,CAAI,CACb,CAaD,SAASsJ,EAAatJ,EAAM,CAC1B,OAAOuI,GACL9I,EACA8J,EACA/I,EACA,kBACA,wBACA,uBACD,EAACR,CAAI,CACP,CAYD,SAASuJ,EAAWvJ,EAAM,CACxB,OAAO4B,EAAc5B,CAAI,EACrB8B,EAAarC,EAAS+J,EAA8B,YAAY,EAAExJ,CAAI,EACtEwJ,EAA6BxJ,CAAI,CACtC,CAYD,SAASwJ,EAA6BxJ,EAAM,CAC1C,OAAOA,IAAS,MAAQwD,EAAmBxD,CAAI,EAAIN,EAAGM,CAAI,EAAIQ,EAAIR,CAAI,CACvE,CACH,CCpRO,MAAMyJ,GAAkB,CAC7B,KAAM,kBACN,SAAUC,EACZ,EAMA,SAASA,GAAwBjK,EAASC,EAAIc,EAAK,CACjD,OAAOrB,EAaP,SAASA,EAAMa,EAAM,CACnB,OAAAP,EAAQ,MAAM,iBAAiB,EAC/BA,EAAQ,QAAQO,CAAI,EACbG,CACR,CAaD,SAASA,EAAMH,EAAM,CACnB,OAAIwD,EAAmBxD,CAAI,GACzBP,EAAQ,KAAK,iBAAiB,EACvBC,EAAGM,CAAI,GAETQ,EAAIR,CAAI,CAChB,CACH,CCvCO,MAAM2J,GAAa,CACxB,KAAM,aACN,SAAUC,GACV,QAASC,EACX,EAGA,SAASA,GAAkBrL,EAAQC,EAAS,CAC1C,IAAIuI,EAAaxI,EAAO,OAAS,EAC7BsF,EAAe,EAEf2C,EAEA5H,EAGJ,OAAIL,EAAOsF,CAAY,EAAE,CAAC,EAAE,OAAS,eACnCA,GAAgB,GAKhBkD,EAAa,EAAIlD,GACjBtF,EAAOwI,CAAU,EAAE,CAAC,EAAE,OAAS,eAE/BA,GAAc,GAGdxI,EAAOwI,CAAU,EAAE,CAAC,EAAE,OAAS,uBAC9BlD,IAAiBkD,EAAa,GAC5BA,EAAa,EAAIlD,GAChBtF,EAAOwI,EAAa,CAAC,EAAE,CAAC,EAAE,OAAS,gBAEvCA,GAAclD,EAAe,IAAMkD,EAAa,EAAI,GAElDA,EAAalD,IACf2C,EAAU,CACR,KAAM,iBACN,MAAOjI,EAAOsF,CAAY,EAAE,CAAC,EAAE,MAC/B,IAAKtF,EAAOwI,CAAU,EAAE,CAAC,EAAE,GAC5B,EACDnI,EAAO,CACL,KAAM,YACN,MAAOL,EAAOsF,CAAY,EAAE,CAAC,EAAE,MAC/B,IAAKtF,EAAOwI,CAAU,EAAE,CAAC,EAAE,IAC3B,YAAa,MACd,EACDxH,GAAOhB,EAAQsF,EAAckD,EAAalD,EAAe,EAAG,CAC1D,CAAC,QAAS2C,EAAShI,CAAO,EAC1B,CAAC,QAASI,EAAMJ,CAAO,EACvB,CAAC,OAAQI,EAAMJ,CAAO,EACtB,CAAC,OAAQgI,EAAShI,CAAO,CAC/B,CAAK,GAEID,CACT,CAMA,SAASoL,GAAmBnK,EAASC,EAAIc,EAAK,CAC5C,IAAIC,EAAO,EACX,OAAOtB,EAYP,SAASA,EAAMa,EAAM,CAEnB,OAAAP,EAAQ,MAAM,YAAY,EACnBI,EAAOG,CAAI,CACnB,CAYD,SAASH,EAAOG,EAAM,CACpB,OAAAP,EAAQ,MAAM,oBAAoB,EAC3B6D,EAAatD,CAAI,CACzB,CAYD,SAASsD,EAAatD,EAAM,CAC1B,OAAIA,IAAS,IAAMS,IAAS,GAC1BhB,EAAQ,QAAQO,CAAI,EACbsD,GAILtD,IAAS,MAAQgI,EAA0BhI,CAAI,GACjDP,EAAQ,KAAK,oBAAoB,EAC1BkF,EAAQ3E,CAAI,GAEdQ,EAAIR,CAAI,CAChB,CAYD,SAAS2E,EAAQ3E,EAAM,CACrB,OAAIA,IAAS,IACXP,EAAQ,MAAM,oBAAoB,EAC3BqK,EAAgB9J,CAAI,GAEzBA,IAAS,MAAQwD,EAAmBxD,CAAI,GAC1CP,EAAQ,KAAK,YAAY,EAIlBC,EAAGM,CAAI,GAEZ4B,EAAc5B,CAAI,EACb8B,EAAarC,EAASkF,EAAS,YAAY,EAAE3E,CAAI,GAK1DP,EAAQ,MAAM,gBAAgB,EACvB0F,EAAKnF,CAAI,EACjB,CAcD,SAAS8J,EAAgB9J,EAAM,CAC7B,OAAIA,IAAS,IACXP,EAAQ,QAAQO,CAAI,EACb8J,IAETrK,EAAQ,KAAK,oBAAoB,EAC1BkF,EAAQ3E,CAAI,EACpB,CAYD,SAASmF,EAAKnF,EAAM,CAClB,OAAIA,IAAS,MAAQA,IAAS,IAAMgI,EAA0BhI,CAAI,GAChEP,EAAQ,KAAK,gBAAgB,EACtBkF,EAAQ3E,CAAI,IAErBP,EAAQ,QAAQO,CAAI,EACbmF,EACR,CACH,CCjMO,MAAM4E,GAAiB,CAC5B,UACA,UACA,QACA,OACA,WACA,aACA,OACA,UACA,SACA,MACA,WACA,KACA,UACA,SACA,MACA,MACA,KACA,KACA,WACA,aACA,SACA,SACA,OACA,QACA,WACA,KACA,KACA,KACA,KACA,KACA,KACA,OACA,SACA,KACA,OACA,SACA,SACA,KACA,OACA,OACA,OACA,WACA,MACA,WACA,KACA,WACA,SACA,IACA,QACA,SACA,UACA,UACA,QACA,QACA,KACA,QACA,KACA,QACA,QACA,KACA,QACA,IACF,EAcaC,GAAe,CAAC,MAAO,SAAU,QAAS,UAAU,ECxEpDC,GAAW,CACtB,KAAM,WACN,SAAUC,GACV,UAAWC,GACX,SAAU,EACZ,EAGMC,GAAkB,CACtB,SAAUC,GACV,QAAS,EACX,EACMC,GAA2B,CAC/B,SAAUC,GACV,QAAS,EACX,EAGA,SAASJ,GAAkB3L,EAAQ,CACjC,IAAIE,EAAQF,EAAO,OACnB,KAAOE,KACD,EAAAF,EAAOE,CAAK,EAAE,CAAC,IAAM,SAAWF,EAAOE,CAAK,EAAE,CAAC,EAAE,OAAS,aAA9D,CAIF,OAAIA,EAAQ,GAAKF,EAAOE,EAAQ,CAAC,EAAE,CAAC,EAAE,OAAS,eAE7CF,EAAOE,CAAK,EAAE,CAAC,EAAE,MAAQF,EAAOE,EAAQ,CAAC,EAAE,CAAC,EAAE,MAE9CF,EAAOE,EAAQ,CAAC,EAAE,CAAC,EAAE,MAAQF,EAAOE,EAAQ,CAAC,EAAE,CAAC,EAAE,MAElDF,EAAO,OAAOE,EAAQ,EAAG,CAAC,GAErBF,CACT,CAMA,SAAS0L,GAAiBzK,EAASC,EAAIc,EAAK,CAC1C,MAAMkB,EAAO,KAEb,IAAI3B,EAEAyK,EAEAC,EAEA/L,EAEAgM,EACJ,OAAOvL,EAYP,SAASA,EAAMa,EAAM,CAEnB,OAAOH,EAAOG,CAAI,CACnB,CAYD,SAASH,EAAOG,EAAM,CACpB,OAAAP,EAAQ,MAAM,UAAU,EACxBA,EAAQ,MAAM,cAAc,EAC5BA,EAAQ,QAAQO,CAAI,EACbrB,CACR,CAgBD,SAASA,EAAKqB,EAAM,CAClB,OAAIA,IAAS,IACXP,EAAQ,QAAQO,CAAI,EACb2K,GAEL3K,IAAS,IACXP,EAAQ,QAAQO,CAAI,EACpBwK,EAAa,GACNI,GAEL5K,IAAS,IACXP,EAAQ,QAAQO,CAAI,EACpBD,EAAS,EAMF2B,EAAK,UAAYhC,EAAKmL,GAI3BnK,GAAWV,CAAI,GACjBP,EAAQ,QAAQO,CAAI,EAEpByK,EAAS,OAAO,aAAazK,CAAI,EAC1B8K,GAEFtK,EAAIR,CAAI,CAChB,CAgBD,SAAS2K,EAAgB3K,EAAM,CAC7B,OAAIA,IAAS,IACXP,EAAQ,QAAQO,CAAI,EACpBD,EAAS,EACFgL,GAEL/K,IAAS,IACXP,EAAQ,QAAQO,CAAI,EACpBD,EAAS,EACTrB,EAAQ,EACDsM,GAILtK,GAAWV,CAAI,GACjBP,EAAQ,QAAQO,CAAI,EACpBD,EAAS,EAGF2B,EAAK,UAAYhC,EAAKmL,GAExBrK,EAAIR,CAAI,CAChB,CAYD,SAAS+K,EAAkB/K,EAAM,CAC/B,OAAIA,IAAS,IACXP,EAAQ,QAAQO,CAAI,EAGb0B,EAAK,UAAYhC,EAAKmL,GAExBrK,EAAIR,CAAI,CAChB,CAYD,SAASgL,EAAgBhL,EAAM,CAC7B,MAAMwC,EAAQ,SACd,OAAIxC,IAASwC,EAAM,WAAW9D,GAAO,GACnCe,EAAQ,QAAQO,CAAI,EAChBtB,IAAU8D,EAAM,OAGXd,EAAK,UAAYhC,EAAKuL,EAExBD,GAEFxK,EAAIR,CAAI,CAChB,CAYD,SAAS4K,EAAc5K,EAAM,CAC3B,OAAIU,GAAWV,CAAI,GACjBP,EAAQ,QAAQO,CAAI,EAEpByK,EAAS,OAAO,aAAazK,CAAI,EAC1B8K,GAEFtK,EAAIR,CAAI,CAChB,CAcD,SAAS8K,EAAQ9K,EAAM,CACrB,GACEA,IAAS,MACTA,IAAS,IACTA,IAAS,IACTgI,EAA0BhI,CAAI,EAC9B,CACA,MAAMkL,EAAQlL,IAAS,GACjBmL,GAAOV,EAAO,YAAa,EACjC,MAAI,CAACS,GAAS,CAACV,GAAcR,GAAa,SAASmB,EAAI,GACrDpL,EAAS,EAGF2B,EAAK,UAAYhC,EAAGM,CAAI,EAAIiL,EAAajL,CAAI,GAElD+J,GAAe,SAASU,EAAO,YAAa,CAAA,GAC9C1K,EAAS,EACLmL,GACFzL,EAAQ,QAAQO,CAAI,EACboL,GAKF1J,EAAK,UAAYhC,EAAGM,CAAI,EAAIiL,EAAajL,CAAI,IAEtDD,EAAS,EAEF2B,EAAK,WAAa,CAACA,EAAK,OAAO,KAAKA,EAAK,IAAK,EAAC,IAAI,EACtDlB,EAAIR,CAAI,EACRwK,EACAa,EAAwBrL,CAAI,EAC5BsL,EAA4BtL,CAAI,EACrC,CAGD,OAAIA,IAAS,IAAMa,EAAkBb,CAAI,GACvCP,EAAQ,QAAQO,CAAI,EACpByK,GAAU,OAAO,aAAazK,CAAI,EAC3B8K,GAEFtK,EAAIR,CAAI,CAChB,CAYD,SAASoL,EAAiBpL,EAAM,CAC9B,OAAIA,IAAS,IACXP,EAAQ,QAAQO,CAAI,EAGb0B,EAAK,UAAYhC,EAAKuL,GAExBzK,EAAIR,CAAI,CAChB,CAYD,SAASqL,EAAwBrL,EAAM,CACrC,OAAI4B,EAAc5B,CAAI,GACpBP,EAAQ,QAAQO,CAAI,EACbqL,GAEFE,EAAYvL,CAAI,CACxB,CAyBD,SAASsL,EAA4BtL,EAAM,CACzC,OAAIA,IAAS,IACXP,EAAQ,QAAQO,CAAI,EACbuL,GAILvL,IAAS,IAAMA,IAAS,IAAMU,GAAWV,CAAI,GAC/CP,EAAQ,QAAQO,CAAI,EACbwL,GAEL5J,EAAc5B,CAAI,GACpBP,EAAQ,QAAQO,CAAI,EACbsL,GAEFC,EAAYvL,CAAI,CACxB,CAgBD,SAASwL,EAAsBxL,EAAM,CAEnC,OACEA,IAAS,IACTA,IAAS,IACTA,IAAS,IACTA,IAAS,IACTa,EAAkBb,CAAI,GAEtBP,EAAQ,QAAQO,CAAI,EACbwL,GAEFC,EAA2BzL,CAAI,CACvC,CAeD,SAASyL,EAA2BzL,EAAM,CACxC,OAAIA,IAAS,IACXP,EAAQ,QAAQO,CAAI,EACb0L,GAEL9J,EAAc5B,CAAI,GACpBP,EAAQ,QAAQO,CAAI,EACbyL,GAEFH,EAA4BtL,CAAI,CACxC,CAeD,SAAS0L,EAA6B1L,EAAM,CAC1C,OACEA,IAAS,MACTA,IAAS,IACTA,IAAS,IACTA,IAAS,IACTA,IAAS,GAEFQ,EAAIR,CAAI,EAEbA,IAAS,IAAMA,IAAS,IAC1BP,EAAQ,QAAQO,CAAI,EACpB0K,EAAU1K,EACH2L,GAEL/J,EAAc5B,CAAI,GACpBP,EAAQ,QAAQO,CAAI,EACb0L,GAEFE,EAA+B5L,CAAI,CAC3C,CAcD,SAAS2L,EAA6B3L,EAAM,CAC1C,OAAIA,IAAS0K,GACXjL,EAAQ,QAAQO,CAAI,EACpB0K,EAAU,KACHmB,GAEL7L,IAAS,MAAQwD,EAAmBxD,CAAI,EACnCQ,EAAIR,CAAI,GAEjBP,EAAQ,QAAQO,CAAI,EACb2L,EACR,CAYD,SAASC,EAA+B5L,EAAM,CAC5C,OACEA,IAAS,MACTA,IAAS,IACTA,IAAS,IACTA,IAAS,IACTA,IAAS,IACTA,IAAS,IACTA,IAAS,IACTA,IAAS,IACTgI,EAA0BhI,CAAI,EAEvByL,EAA2BzL,CAAI,GAExCP,EAAQ,QAAQO,CAAI,EACb4L,EACR,CAaD,SAASC,EAAkC7L,EAAM,CAC/C,OAAIA,IAAS,IAAMA,IAAS,IAAM4B,EAAc5B,CAAI,EAC3CsL,EAA4BtL,CAAI,EAElCQ,EAAIR,CAAI,CAChB,CAYD,SAASuL,EAAYvL,EAAM,CACzB,OAAIA,IAAS,IACXP,EAAQ,QAAQO,CAAI,EACb8L,GAEFtL,EAAIR,CAAI,CAChB,CAYD,SAAS8L,EAAc9L,EAAM,CAC3B,OAAIA,IAAS,MAAQwD,EAAmBxD,CAAI,EAGnCiL,EAAajL,CAAI,EAEtB4B,EAAc5B,CAAI,GACpBP,EAAQ,QAAQO,CAAI,EACb8L,GAEFtL,EAAIR,CAAI,CAChB,CAYD,SAASiL,EAAajL,EAAM,CAC1B,OAAIA,IAAS,IAAMD,IAAW,GAC5BN,EAAQ,QAAQO,CAAI,EACb+L,GAEL/L,IAAS,IAAMD,IAAW,GAC5BN,EAAQ,QAAQO,CAAI,EACbgM,GAELhM,IAAS,IAAMD,IAAW,GAC5BN,EAAQ,QAAQO,CAAI,EACbiM,GAELjM,IAAS,IAAMD,IAAW,GAC5BN,EAAQ,QAAQO,CAAI,EACb6K,GAEL7K,IAAS,IAAMD,IAAW,GAC5BN,EAAQ,QAAQO,CAAI,EACbkM,IAEL1I,EAAmBxD,CAAI,IAAMD,IAAW,GAAKA,IAAW,IAC1DN,EAAQ,KAAK,cAAc,EACpBA,EAAQ,MACb2K,GACA+B,GACAC,CACD,EAACpM,CAAI,GAEJA,IAAS,MAAQwD,EAAmBxD,CAAI,GAC1CP,EAAQ,KAAK,cAAc,EACpB2M,EAAkBpM,CAAI,IAE/BP,EAAQ,QAAQO,CAAI,EACbiL,EACR,CAaD,SAASmB,EAAkBpM,EAAM,CAC/B,OAAOP,EAAQ,MACb6K,GACA+B,EACAF,EACD,EAACnM,CAAI,CACP,CAaD,SAASqM,EAAyBrM,EAAM,CACtC,OAAAP,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,YAAY,EAClB6M,CACR,CAaD,SAASA,EAAmBtM,EAAM,CAChC,OAAIA,IAAS,MAAQwD,EAAmBxD,CAAI,EACnCoM,EAAkBpM,CAAI,GAE/BP,EAAQ,MAAM,cAAc,EACrBwL,EAAajL,CAAI,EACzB,CAYD,SAAS+L,EAA0B/L,EAAM,CACvC,OAAIA,IAAS,IACXP,EAAQ,QAAQO,CAAI,EACb6K,GAEFI,EAAajL,CAAI,CACzB,CAYD,SAASgM,EAAuBhM,EAAM,CACpC,OAAIA,IAAS,IACXP,EAAQ,QAAQO,CAAI,EACpByK,EAAS,GACF8B,GAEFtB,EAAajL,CAAI,CACzB,CAYD,SAASuM,EAAsBvM,EAAM,CACnC,GAAIA,IAAS,GAAI,CACf,MAAMmL,EAAOV,EAAO,YAAa,EACjC,OAAIT,GAAa,SAASmB,CAAI,GAC5B1L,EAAQ,QAAQO,CAAI,EACbiM,GAEFhB,EAAajL,CAAI,CACzB,CACD,OAAIU,GAAWV,CAAI,GAAKyK,EAAO,OAAS,GACtChL,EAAQ,QAAQO,CAAI,EAEpByK,GAAU,OAAO,aAAazK,CAAI,EAC3BuM,GAEFtB,EAAajL,CAAI,CACzB,CAYD,SAASkM,GAAwBlM,EAAM,CACrC,OAAIA,IAAS,IACXP,EAAQ,QAAQO,CAAI,EACb6K,GAEFI,EAAajL,CAAI,CACzB,CAoBD,SAAS6K,EAA8B7K,EAAM,CAC3C,OAAIA,IAAS,IACXP,EAAQ,QAAQO,CAAI,EACbiM,GAILjM,IAAS,IAAMD,IAAW,GAC5BN,EAAQ,QAAQO,CAAI,EACb6K,GAEFI,EAAajL,CAAI,CACzB,CAYD,SAASiM,EAAkBjM,EAAM,CAC/B,OAAIA,IAAS,MAAQwD,EAAmBxD,CAAI,GAC1CP,EAAQ,KAAK,cAAc,EACpB0M,GAAkBnM,CAAI,IAE/BP,EAAQ,QAAQO,CAAI,EACbiM,EACR,CAYD,SAASE,GAAkBnM,EAAM,CAC/B,OAAAP,EAAQ,KAAK,UAAU,EAKhBC,EAAGM,CAAI,CACf,CACH,CAMA,SAASuK,GAAiC9K,EAASC,EAAIc,EAAK,CAC1D,MAAMkB,EAAO,KACb,OAAOvC,EAaP,SAASA,EAAMa,EAAM,CACnB,OAAIwD,EAAmBxD,CAAI,GACzBP,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,YAAY,EAClBU,GAEFK,EAAIR,CAAI,CAChB,CAaD,SAASG,EAAMH,EAAM,CACnB,OAAO0B,EAAK,OAAO,KAAKA,EAAK,IAAG,EAAG,IAAI,EAAIlB,EAAIR,CAAI,EAAIN,EAAGM,CAAI,CAC/D,CACH,CAMA,SAASqK,GAAwB5K,EAASC,EAAIc,EAAK,CACjD,OAAOrB,EAaP,SAASA,EAAMa,EAAM,CACnB,OAAAP,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,YAAY,EAClBA,EAAQ,QAAQ+M,GAAW9M,EAAIc,CAAG,CAC1C,CACH,CCl4BO,MAAMiM,GAAW,CACtB,KAAM,WACN,SAAUC,EACZ,EAMA,SAASA,GAAiBjN,EAASC,EAAIc,EAAK,CAC1C,MAAMkB,EAAO,KAEb,IAAI3B,EAEArB,EAEAiO,EACJ,OAAOxN,EAYP,SAASA,EAAMa,EAAM,CACnB,OAAAP,EAAQ,MAAM,UAAU,EACxBA,EAAQ,MAAM,cAAc,EAC5BA,EAAQ,QAAQO,CAAI,EACbrB,CACR,CAgBD,SAASA,EAAKqB,EAAM,CAClB,OAAIA,IAAS,IACXP,EAAQ,QAAQO,CAAI,EACb2K,GAEL3K,IAAS,IACXP,EAAQ,QAAQO,CAAI,EACb4K,GAEL5K,IAAS,IACXP,EAAQ,QAAQO,CAAI,EACb4M,GAILlM,GAAWV,CAAI,GACjBP,EAAQ,QAAQO,CAAI,EACb6M,GAEFrM,EAAIR,CAAI,CAChB,CAgBD,SAAS2K,EAAgB3K,EAAM,CAC7B,OAAIA,IAAS,IACXP,EAAQ,QAAQO,CAAI,EACb+K,GAEL/K,IAAS,IACXP,EAAQ,QAAQO,CAAI,EACpBtB,EAAQ,EACDsM,GAELtK,GAAWV,CAAI,GACjBP,EAAQ,QAAQO,CAAI,EACb8M,GAEFtM,EAAIR,CAAI,CAChB,CAYD,SAAS+K,EAAkB/K,EAAM,CAC/B,OAAIA,IAAS,IACXP,EAAQ,QAAQO,CAAI,EACb+M,GAEFvM,EAAIR,CAAI,CAChB,CAYD,SAASgN,EAAQhN,EAAM,CACrB,OAAIA,IAAS,KACJQ,EAAIR,CAAI,EAEbA,IAAS,IACXP,EAAQ,QAAQO,CAAI,EACbiN,GAELzJ,EAAmBxD,CAAI,GACzB2M,EAAcK,EACPE,EAAiBlN,CAAI,IAE9BP,EAAQ,QAAQO,CAAI,EACbgN,EACR,CAYD,SAASC,EAAajN,EAAM,CAC1B,OAAIA,IAAS,IACXP,EAAQ,QAAQO,CAAI,EACb+M,GAEFC,EAAQhN,CAAI,CACpB,CAYD,SAAS+M,EAAW/M,EAAM,CACxB,OAAOA,IAAS,GACZZ,EAAIY,CAAI,EACRA,IAAS,GACTiN,EAAajN,CAAI,EACjBgN,EAAQhN,CAAI,CACjB,CAYD,SAASgL,EAAgBhL,EAAM,CAC7B,MAAMwC,EAAQ,SACd,OAAIxC,IAASwC,EAAM,WAAW9D,GAAO,GACnCe,EAAQ,QAAQO,CAAI,EACbtB,IAAU8D,EAAM,OAAS2K,EAAQnC,GAEnCxK,EAAIR,CAAI,CAChB,CAYD,SAASmN,EAAMnN,EAAM,CACnB,OAAIA,IAAS,KACJQ,EAAIR,CAAI,EAEbA,IAAS,IACXP,EAAQ,QAAQO,CAAI,EACboN,GAEL5J,EAAmBxD,CAAI,GACzB2M,EAAcQ,EACPD,EAAiBlN,CAAI,IAE9BP,EAAQ,QAAQO,CAAI,EACbmN,EACR,CAYD,SAASC,EAAWpN,EAAM,CACxB,OAAIA,IAAS,IACXP,EAAQ,QAAQO,CAAI,EACbqN,GAEFF,EAAMnN,CAAI,CAClB,CAYD,SAASqN,EAASrN,EAAM,CACtB,OAAIA,IAAS,GACJZ,EAAIY,CAAI,EAEbA,IAAS,IACXP,EAAQ,QAAQO,CAAI,EACbqN,GAEFF,EAAMnN,CAAI,CAClB,CAYD,SAAS8M,EAAY9M,EAAM,CACzB,OAAIA,IAAS,MAAQA,IAAS,GACrBZ,EAAIY,CAAI,EAEbwD,EAAmBxD,CAAI,GACzB2M,EAAcG,EACPI,EAAiBlN,CAAI,IAE9BP,EAAQ,QAAQO,CAAI,EACb8M,EACR,CAYD,SAASF,EAAY5M,EAAM,CACzB,OAAIA,IAAS,KACJQ,EAAIR,CAAI,EAEbA,IAAS,IACXP,EAAQ,QAAQO,CAAI,EACbsN,GAEL9J,EAAmBxD,CAAI,GACzB2M,EAAcC,EACPM,EAAiBlN,CAAI,IAE9BP,EAAQ,QAAQO,CAAI,EACb4M,EACR,CAYD,SAASU,EAAiBtN,EAAM,CAC9B,OAAOA,IAAS,GAAKZ,EAAIY,CAAI,EAAI4M,EAAY5M,CAAI,CAClD,CAYD,SAAS4K,EAAc5K,EAAM,CAE3B,OAAIU,GAAWV,CAAI,GACjBP,EAAQ,QAAQO,CAAI,EACbuN,GAEF/M,EAAIR,CAAI,CAChB,CAYD,SAASuN,EAASvN,EAAM,CAEtB,OAAIA,IAAS,IAAMa,EAAkBb,CAAI,GACvCP,EAAQ,QAAQO,CAAI,EACbuN,GAEFC,EAAgBxN,CAAI,CAC5B,CAYD,SAASwN,EAAgBxN,EAAM,CAC7B,OAAIwD,EAAmBxD,CAAI,GACzB2M,EAAca,EACPN,EAAiBlN,CAAI,GAE1B4B,EAAc5B,CAAI,GACpBP,EAAQ,QAAQO,CAAI,EACbwN,GAEFpO,EAAIY,CAAI,CAChB,CAYD,SAAS6M,EAAQ7M,EAAM,CAErB,OAAIA,IAAS,IAAMa,EAAkBb,CAAI,GACvCP,EAAQ,QAAQO,CAAI,EACb6M,GAEL7M,IAAS,IAAMA,IAAS,IAAMgI,EAA0BhI,CAAI,EACvDyN,EAAezN,CAAI,EAErBQ,EAAIR,CAAI,CAChB,CAYD,SAASyN,EAAezN,EAAM,CAC5B,OAAIA,IAAS,IACXP,EAAQ,QAAQO,CAAI,EACbZ,GAILY,IAAS,IAAMA,IAAS,IAAMU,GAAWV,CAAI,GAC/CP,EAAQ,QAAQO,CAAI,EACb0N,GAELlK,EAAmBxD,CAAI,GACzB2M,EAAcc,EACPP,EAAiBlN,CAAI,GAE1B4B,EAAc5B,CAAI,GACpBP,EAAQ,QAAQO,CAAI,EACbyN,GAEFrO,EAAIY,CAAI,CAChB,CAYD,SAAS0N,EAAqB1N,EAAM,CAElC,OACEA,IAAS,IACTA,IAAS,IACTA,IAAS,IACTA,IAAS,IACTa,EAAkBb,CAAI,GAEtBP,EAAQ,QAAQO,CAAI,EACb0N,GAEFC,EAA0B3N,CAAI,CACtC,CAaD,SAAS2N,EAA0B3N,EAAM,CACvC,OAAIA,IAAS,IACXP,EAAQ,QAAQO,CAAI,EACb4N,GAELpK,EAAmBxD,CAAI,GACzB2M,EAAcgB,EACPT,EAAiBlN,CAAI,GAE1B4B,EAAc5B,CAAI,GACpBP,EAAQ,QAAQO,CAAI,EACb2N,GAEFF,EAAezN,CAAI,CAC3B,CAaD,SAAS4N,EAA4B5N,EAAM,CACzC,OACEA,IAAS,MACTA,IAAS,IACTA,IAAS,IACTA,IAAS,IACTA,IAAS,GAEFQ,EAAIR,CAAI,EAEbA,IAAS,IAAMA,IAAS,IAC1BP,EAAQ,QAAQO,CAAI,EACpBD,EAASC,EACF6N,GAELrK,EAAmBxD,CAAI,GACzB2M,EAAciB,EACPV,EAAiBlN,CAAI,GAE1B4B,EAAc5B,CAAI,GACpBP,EAAQ,QAAQO,CAAI,EACb4N,IAETnO,EAAQ,QAAQO,CAAI,EACb8N,EACR,CAYD,SAASD,EAA4B7N,EAAM,CACzC,OAAIA,IAASD,GACXN,EAAQ,QAAQO,CAAI,EACpBD,EAAS,OACFgO,GAEL/N,IAAS,KACJQ,EAAIR,CAAI,EAEbwD,EAAmBxD,CAAI,GACzB2M,EAAckB,EACPX,EAAiBlN,CAAI,IAE9BP,EAAQ,QAAQO,CAAI,EACb6N,EACR,CAYD,SAASC,EAA8B9N,EAAM,CAC3C,OACEA,IAAS,MACTA,IAAS,IACTA,IAAS,IACTA,IAAS,IACTA,IAAS,IACTA,IAAS,GAEFQ,EAAIR,CAAI,EAEbA,IAAS,IAAMA,IAAS,IAAMgI,EAA0BhI,CAAI,EACvDyN,EAAezN,CAAI,GAE5BP,EAAQ,QAAQO,CAAI,EACb8N,EACR,CAaD,SAASC,EAAiC/N,EAAM,CAC9C,OAAIA,IAAS,IAAMA,IAAS,IAAMgI,EAA0BhI,CAAI,EACvDyN,EAAezN,CAAI,EAErBQ,EAAIR,CAAI,CAChB,CAYD,SAASZ,EAAIY,EAAM,CACjB,OAAIA,IAAS,IACXP,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,cAAc,EAC3BA,EAAQ,KAAK,UAAU,EAChBC,GAEFc,EAAIR,CAAI,CAChB,CAgBD,SAASkN,EAAiBlN,EAAM,CAC9B,OAAAP,EAAQ,KAAK,cAAc,EAC3BA,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,YAAY,EAClBuO,CACR,CAgBD,SAASA,EAAgBhO,EAAM,CAG7B,OAAO4B,EAAc5B,CAAI,EACrB8B,EACErC,EACAwO,GACA,aACAvM,EAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,cAAc,EACvD,OACA,CACL,EAAC1B,CAAI,EACNiO,GAAsBjO,CAAI,CAC/B,CAgBD,SAASiO,GAAsBjO,EAAM,CACnC,OAAAP,EAAQ,MAAM,cAAc,EACrBkN,EAAY3M,CAAI,CACxB,CACH,CCrrBO,MAAMkO,GAAW,CACtB,KAAM,WACN,SAAUC,GACV,UAAWC,GACX,WAAYC,EACd,EAGMC,GAAoB,CACxB,SAAUC,EACZ,EAEMC,GAAyB,CAC7B,SAAUC,EACZ,EAEMC,GAA8B,CAClC,SAAUC,EACZ,EAGA,SAASN,GAAmB7P,EAAQ,CAClC,IAAIE,EAAQ,GACZ,KAAO,EAAEA,EAAQF,EAAO,QAAQ,CAC9B,MAAM0B,EAAQ1B,EAAOE,CAAK,EAAE,CAAC,GAE3BwB,EAAM,OAAS,cACfA,EAAM,OAAS,aACfA,EAAM,OAAS,cAGf1B,EAAO,OAAOE,EAAQ,EAAGwB,EAAM,OAAS,aAAe,EAAI,CAAC,EAC5DA,EAAM,KAAO,OACbxB,IAEH,CACD,OAAOF,CACT,CAGA,SAAS4P,GAAkB5P,EAAQC,EAAS,CAC1C,IAAIC,EAAQF,EAAO,OACfU,EAAS,EAETgB,EAEAvB,EAEAyB,EAEAwO,EAGJ,KAAOlQ,KAEL,GADAwB,EAAQ1B,EAAOE,CAAK,EAAE,CAAC,EACnBC,EAAM,CAER,GACEuB,EAAM,OAAS,QACdA,EAAM,OAAS,aAAeA,EAAM,UAErC,MAKE1B,EAAOE,CAAK,EAAE,CAAC,IAAM,SAAWwB,EAAM,OAAS,cACjDA,EAAM,UAAY,GAErB,SAAUE,GACT,GACE5B,EAAOE,CAAK,EAAE,CAAC,IAAM,UACpBwB,EAAM,OAAS,cAAgBA,EAAM,OAAS,cAC/C,CAACA,EAAM,YAEPvB,EAAOD,EACHwB,EAAM,OAAS,aAAa,CAC9BhB,EAAS,EACT,KACD,OAEMgB,EAAM,OAAS,aACxBE,EAAQ1B,GAGZ,MAAME,EAAQ,CACZ,KAAMJ,EAAOG,CAAI,EAAE,CAAC,EAAE,OAAS,YAAc,OAAS,QACtD,MAAO,OAAO,OAAO,CAAE,EAAEH,EAAOG,CAAI,EAAE,CAAC,EAAE,KAAK,EAC9C,IAAK,OAAO,OAAO,CAAA,EAAIH,EAAOA,EAAO,OAAS,CAAC,EAAE,CAAC,EAAE,GAAG,CACxD,EACKqQ,EAAQ,CACZ,KAAM,QACN,MAAO,OAAO,OAAO,CAAE,EAAErQ,EAAOG,CAAI,EAAE,CAAC,EAAE,KAAK,EAC9C,IAAK,OAAO,OAAO,CAAE,EAAEH,EAAO4B,CAAK,EAAE,CAAC,EAAE,GAAG,CAC5C,EACKvB,EAAO,CACX,KAAM,YACN,MAAO,OAAO,OAAO,CAAA,EAAIL,EAAOG,EAAOO,EAAS,CAAC,EAAE,CAAC,EAAE,GAAG,EACzD,IAAK,OAAO,OAAO,GAAIV,EAAO4B,EAAQ,CAAC,EAAE,CAAC,EAAE,KAAK,CAClD,EACD,OAAAwO,EAAQ,CACN,CAAC,QAAShQ,EAAOH,CAAO,EACxB,CAAC,QAASoQ,EAAOpQ,CAAO,CACzB,EAGDmQ,EAAQtP,EAAKsP,EAAOpQ,EAAO,MAAMG,EAAO,EAAGA,EAAOO,EAAS,CAAC,CAAC,EAG7D0P,EAAQtP,EAAKsP,EAAO,CAAC,CAAC,QAAS/P,EAAMJ,CAAO,CAAC,CAAC,EAK9CmQ,EAAQtP,EACNsP,EACArP,GACEd,EAAQ,OAAO,WAAW,WAAW,KACrCD,EAAO,MAAMG,EAAOO,EAAS,EAAGkB,EAAQ,CAAC,EACzC3B,CACD,CACF,EAGDmQ,EAAQtP,EAAKsP,EAAO,CAClB,CAAC,OAAQ/P,EAAMJ,CAAO,EACtBD,EAAO4B,EAAQ,CAAC,EAChB5B,EAAO4B,EAAQ,CAAC,EAChB,CAAC,OAAQyO,EAAOpQ,CAAO,CAC3B,CAAG,EAGDmQ,EAAQtP,EAAKsP,EAAOpQ,EAAO,MAAM4B,EAAQ,CAAC,CAAC,EAG3CwO,EAAQtP,EAAKsP,EAAO,CAAC,CAAC,OAAQhQ,EAAOH,CAAO,CAAC,CAAC,EAC9Ce,GAAOhB,EAAQG,EAAMH,EAAO,OAAQoQ,CAAK,EAClCpQ,CACT,CAMA,SAAS2P,GAAiB1O,EAASC,EAAIc,EAAK,CAC1C,MAAMkB,EAAO,KACb,IAAIhD,EAAQgD,EAAK,OAAO,OAEpBoN,EAEAC,EAGJ,KAAOrQ,KACL,IACGgD,EAAK,OAAOhD,CAAK,EAAE,CAAC,EAAE,OAAS,cAC9BgD,EAAK,OAAOhD,CAAK,EAAE,CAAC,EAAE,OAAS,cACjC,CAACgD,EAAK,OAAOhD,CAAK,EAAE,CAAC,EAAE,UACvB,CACAoQ,EAAapN,EAAK,OAAOhD,CAAK,EAAE,CAAC,EACjC,KACD,CAEH,OAAOS,EAiBP,SAASA,EAAMa,EAAM,CAEnB,OAAK8O,EAaDA,EAAW,UACNE,EAAYhP,CAAI,GAEzB+O,EAAUrN,EAAK,OAAO,QAAQ,SAC5BuH,GACEvH,EAAK,eAAe,CAClB,MAAOoN,EAAW,IAClB,IAAKpN,EAAK,IAAK,CACzB,CAAS,CACF,CACF,EACDjC,EAAQ,MAAM,UAAU,EACxBA,EAAQ,MAAM,aAAa,EAC3BA,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,aAAa,EAC1BA,EAAQ,KAAK,UAAU,EAChBU,GA5BEK,EAAIR,CAAI,CA6BlB,CAkBD,SAASG,EAAMH,EAAM,CAKnB,OAAIA,IAAS,GACJP,EAAQ,QACb6O,GACAW,EACAF,EAAUE,EAAaD,CACxB,EAAChP,CAAI,EAIJA,IAAS,GACJP,EAAQ,QACb+O,GACAS,EACAF,EAAUG,EAAmBF,CAC9B,EAAChP,CAAI,EAID+O,EAAUE,EAAWjP,CAAI,EAAIgP,EAAYhP,CAAI,CACrD,CAgBD,SAASkP,EAAiBlP,EAAM,CAC9B,OAAOP,EAAQ,QACbiP,GACAO,EACAD,CACD,EAAChP,CAAI,CACP,CAkBD,SAASiP,EAAWjP,EAAM,CAExB,OAAON,EAAGM,CAAI,CACf,CAkBD,SAASgP,EAAYhP,EAAM,CACzB,OAAA8O,EAAW,UAAY,GAChBtO,EAAIR,CAAI,CAChB,CACH,CAMA,SAASuO,GAAiB9O,EAASC,EAAIc,EAAK,CAC1C,OAAO2O,EAYP,SAASA,EAAcnP,EAAM,CAC3B,OAAAP,EAAQ,MAAM,UAAU,EACxBA,EAAQ,MAAM,gBAAgB,EAC9BA,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,gBAAgB,EACtB2P,CACR,CAYD,SAASA,EAAepP,EAAM,CAC5B,OAAOgI,EAA0BhI,CAAI,EACjC0I,GAAkBjJ,EAAS4P,CAAY,EAAErP,CAAI,EAC7CqP,EAAarP,CAAI,CACtB,CAYD,SAASqP,EAAarP,EAAM,CAC1B,OAAIA,IAAS,GACJsP,EAAYtP,CAAI,EAElBoH,GACL3H,EACA8P,EACAC,EACA,sBACA,6BACA,mCACA,yBACA,4BACA,EACD,EAACxP,CAAI,CACP,CAYD,SAASuP,EAAyBvP,EAAM,CACtC,OAAOgI,EAA0BhI,CAAI,EACjC0I,GAAkBjJ,EAASgQ,CAAe,EAAEzP,CAAI,EAChDsP,EAAYtP,CAAI,CACrB,CAYD,SAASwP,EAA2BxP,EAAM,CACxC,OAAOQ,EAAIR,CAAI,CAChB,CAYD,SAASyP,EAAgBzP,EAAM,CAC7B,OAAIA,IAAS,IAAMA,IAAS,IAAMA,IAAS,GAClCuI,GACL9I,EACAiQ,EACAlP,EACA,gBACA,sBACA,qBACD,EAACR,CAAI,EAEDsP,EAAYtP,CAAI,CACxB,CAYD,SAAS0P,EAAmB1P,EAAM,CAChC,OAAOgI,EAA0BhI,CAAI,EACjC0I,GAAkBjJ,EAAS6P,CAAW,EAAEtP,CAAI,EAC5CsP,EAAYtP,CAAI,CACrB,CAYD,SAASsP,EAAYtP,EAAM,CACzB,OAAIA,IAAS,IACXP,EAAQ,MAAM,gBAAgB,EAC9BA,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,gBAAgB,EAC7BA,EAAQ,KAAK,UAAU,EAChBC,GAEFc,EAAIR,CAAI,CAChB,CACH,CAMA,SAASyO,GAAsBhP,EAASC,EAAIc,EAAK,CAC/C,MAAMkB,EAAO,KACb,OAAOiO,EAYP,SAASA,EAAc3P,EAAM,CAC3B,OAAOkI,GAAa,KAClBxG,EACAjC,EACAmQ,EACAC,EACA,YACA,kBACA,iBACD,EAAC7P,CAAI,CACP,CAYD,SAAS4P,EAAmB5P,EAAM,CAChC,OAAO0B,EAAK,OAAO,QAAQ,SACzBuH,GACEvH,EAAK,eAAeA,EAAK,OAAOA,EAAK,OAAO,OAAS,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,EAAG,EAAE,CACxE,CACF,EACGhC,EAAGM,CAAI,EACPQ,EAAIR,CAAI,CACb,CAYD,SAAS6P,EAAqB7P,EAAM,CAClC,OAAOQ,EAAIR,CAAI,CAChB,CACH,CAMA,SAAS2O,GAA2BlP,EAASC,EAAIc,EAAK,CACpD,OAAOsP,EAcP,SAASA,EAAwB9P,EAAM,CAGrC,OAAAP,EAAQ,MAAM,WAAW,EACzBA,EAAQ,MAAM,iBAAiB,EAC/BA,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,iBAAiB,EACvBsQ,CACR,CAcD,SAASA,EAAuB/P,EAAM,CACpC,OAAIA,IAAS,IACXP,EAAQ,MAAM,iBAAiB,EAC/BA,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,iBAAiB,EAC9BA,EAAQ,KAAK,WAAW,EACjBC,GAEFc,EAAIR,CAAI,CAChB,CACH,CC9lBO,MAAMgQ,GAAkB,CAC7B,KAAM,kBACN,SAAUC,GACV,WAAY/B,GAAS,UACvB,EAMA,SAAS+B,GAAwBxQ,EAASC,EAAIc,EAAK,CACjD,MAAMkB,EAAO,KACb,OAAOvC,EAYP,SAASA,EAAMa,EAAM,CACnB,OAAAP,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,MAAM,kBAAkB,EAChCA,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,kBAAkB,EACxBd,CACR,CAYD,SAASA,EAAKqB,EAAM,CAClB,OAAIA,IAAS,IACXP,EAAQ,MAAM,aAAa,EAC3BA,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,aAAa,EAC1BA,EAAQ,KAAK,YAAY,EAClBU,GAEFK,EAAIR,CAAI,CAChB,CA6BD,SAASG,EAAMH,EAAM,CAMnB,OAAOA,IAAS,IAAM,2BAA4B0B,EAAK,OAAO,WAC1DlB,EAAIR,CAAI,EACRN,EAAGM,CAAI,CACZ,CACH,CC1FO,MAAMkQ,GAAiB,CAC5B,KAAM,iBACN,SAAUC,GACV,WAAYjC,GAAS,UACvB,EAMA,SAASiC,GAAuB1Q,EAASC,EAAIc,EAAK,CAChD,MAAMkB,EAAO,KACb,OAAOvC,EAYP,SAASA,EAAMa,EAAM,CACnB,OAAAP,EAAQ,MAAM,WAAW,EACzBA,EAAQ,MAAM,aAAa,EAC3BA,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,aAAa,EAC1BA,EAAQ,KAAK,WAAW,EACjBU,CACR,CAGD,SAASA,EAAMH,EAAM,CAKnB,OAAOA,IAAS,IAAM,2BAA4B0B,EAAK,OAAO,WAC1DlB,EAAIR,CAAI,EACRN,EAAGM,CAAI,CACZ,CACH,CC3CO,MAAMoQ,GAAa,CACxB,KAAM,aACN,SAAUC,EACZ,EAMA,SAASA,GAAmB5Q,EAASC,EAAI,CACvC,OAAOP,EAGP,SAASA,EAAMa,EAAM,CACnB,OAAAP,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,YAAY,EAClBqC,EAAarC,EAASC,EAAI,YAAY,CAC9C,CACH,CClBO,MAAM4Q,GAAgB,CAC3B,KAAM,gBACN,SAAUC,EACZ,EAMA,SAASA,GAAsB9Q,EAASC,EAAIc,EAAK,CAC/C,IAAIC,EAAO,EAEPV,EACJ,OAAOZ,EAYP,SAASA,EAAMa,EAAM,CACnB,OAAAP,EAAQ,MAAM,eAAe,EAEtBI,EAAOG,CAAI,CACnB,CAYD,SAASH,EAAOG,EAAM,CACpB,OAAAD,EAASC,EACF2E,EAAQ3E,CAAI,CACpB,CAYD,SAAS2E,EAAQ3E,EAAM,CACrB,OAAIA,IAASD,GACXN,EAAQ,MAAM,uBAAuB,EAC9B+Q,EAASxQ,CAAI,GAElBS,GAAQ,IAAMT,IAAS,MAAQwD,EAAmBxD,CAAI,IACxDP,EAAQ,KAAK,eAAe,EACrBC,EAAGM,CAAI,GAETQ,EAAIR,CAAI,CAChB,CAYD,SAASwQ,EAASxQ,EAAM,CACtB,OAAIA,IAASD,GACXN,EAAQ,QAAQO,CAAI,EACpBS,IACO+P,IAET/Q,EAAQ,KAAK,uBAAuB,EAC7BmC,EAAc5B,CAAI,EACrB8B,EAAarC,EAASkF,EAAS,YAAY,EAAE3E,CAAI,EACjD2E,EAAQ3E,CAAI,EACjB,CACH,CCpFO,MAAMyQ,EAAO,CAClB,KAAM,OACN,SAAUC,GACV,aAAc,CACZ,SAAUC,EACX,EACD,KAAMC,EACR,EAGMC,GAAoC,CACxC,SAAUC,GACV,QAAS,EACX,EAGMC,GAAkB,CACtB,SAAUC,GACV,QAAS,EACX,EASA,SAASN,GAAkBjR,EAASC,EAAIc,EAAK,CAC3C,MAAMkB,EAAO,KACP2B,EAAO3B,EAAK,OAAOA,EAAK,OAAO,OAAS,CAAC,EAC/C,IAAIuP,EACF5N,GAAQA,EAAK,CAAC,EAAE,OAAS,aACrBA,EAAK,CAAC,EAAE,eAAeA,EAAK,CAAC,EAAG,EAAI,EAAE,OACtC,EACF5C,EAAO,EACX,OAAOtB,EAGP,SAASA,EAAMa,EAAM,CACnB,MAAMkR,EACJxP,EAAK,eAAe,OACnB1B,IAAS,IAAMA,IAAS,IAAMA,IAAS,GACpC,gBACA,eACN,GACEkR,IAAS,gBACL,CAACxP,EAAK,eAAe,QAAU1B,IAAS0B,EAAK,eAAe,OAC5DgB,GAAW1C,CAAI,EACnB,CAOA,GANK0B,EAAK,eAAe,OACvBA,EAAK,eAAe,KAAOwP,EAC3BzR,EAAQ,MAAMyR,EAAM,CAClB,WAAY,EACtB,CAAS,GAECA,IAAS,gBACX,OAAAzR,EAAQ,MAAM,gBAAgB,EACvBO,IAAS,IAAMA,IAAS,GAC3BP,EAAQ,MAAM6Q,GAAe9P,EAAK2Q,CAAQ,EAAEnR,CAAI,EAChDmR,EAASnR,CAAI,EAEnB,GAAI,CAAC0B,EAAK,WAAa1B,IAAS,GAC9B,OAAAP,EAAQ,MAAM,gBAAgB,EAC9BA,EAAQ,MAAM,eAAe,EACtBQ,EAAOD,CAAI,CAErB,CACD,OAAOQ,EAAIR,CAAI,CAChB,CAGD,SAASC,EAAOD,EAAM,CACpB,OAAI0C,GAAW1C,CAAI,GAAK,EAAES,EAAO,IAC/BhB,EAAQ,QAAQO,CAAI,EACbC,IAGN,CAACyB,EAAK,WAAajB,EAAO,KAC1BiB,EAAK,eAAe,OACjB1B,IAAS0B,EAAK,eAAe,OAC7B1B,IAAS,IAAMA,IAAS,KAE5BP,EAAQ,KAAK,eAAe,EACrB0R,EAASnR,CAAI,GAEfQ,EAAIR,CAAI,CAChB,CAKD,SAASmR,EAASnR,EAAM,CACtB,OAAAP,EAAQ,MAAM,gBAAgB,EAC9BA,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,gBAAgB,EAC7BiC,EAAK,eAAe,OAASA,EAAK,eAAe,QAAU1B,EACpDP,EAAQ,MACb+M,GAEA9K,EAAK,UAAYlB,EAAM4Q,EACvB3R,EAAQ,QACNoR,GACAQ,EACAC,CACD,CACF,CACF,CAGD,SAASF,EAAQpR,EAAM,CACrB,OAAA0B,EAAK,eAAe,iBAAmB,GACvCuP,IACOI,EAAYrR,CAAI,CACxB,CAGD,SAASsR,EAAYtR,EAAM,CACzB,OAAI4B,EAAc5B,CAAI,GACpBP,EAAQ,MAAM,0BAA0B,EACxCA,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,0BAA0B,EAChC4R,GAEF7Q,EAAIR,CAAI,CAChB,CAGD,SAASqR,EAAYrR,EAAM,CACzB,OAAA0B,EAAK,eAAe,KAClBuP,EACAvP,EAAK,eAAejC,EAAQ,KAAK,gBAAgB,EAAG,EAAI,EAAE,OACrDC,EAAGM,CAAI,CACf,CACH,CAMA,SAAS2Q,GAAyBlR,EAASC,EAAIc,EAAK,CAClD,MAAMkB,EAAO,KACb,OAAAA,EAAK,eAAe,WAAa,OAC1BjC,EAAQ,MAAM+M,GAAW4E,EAASG,CAAQ,EAGjD,SAASH,EAAQpR,EAAM,CACrB,OAAA0B,EAAK,eAAe,kBAClBA,EAAK,eAAe,mBACpBA,EAAK,eAAe,iBAIfI,EACLrC,EACAC,EACA,iBACAgC,EAAK,eAAe,KAAO,CAC5B,EAAC1B,CAAI,CACP,CAGD,SAASuR,EAASvR,EAAM,CACtB,OAAI0B,EAAK,eAAe,mBAAqB,CAACE,EAAc5B,CAAI,GAC9D0B,EAAK,eAAe,kBAAoB,OACxCA,EAAK,eAAe,iBAAmB,OAChC8P,EAAiBxR,CAAI,IAE9B0B,EAAK,eAAe,kBAAoB,OACxCA,EAAK,eAAe,iBAAmB,OAChCjC,EAAQ,QAAQsR,GAAiBrR,EAAI8R,CAAgB,EAAExR,CAAI,EACnE,CAGD,SAASwR,EAAiBxR,EAAM,CAE9B,OAAA0B,EAAK,eAAe,WAAa,GAEjCA,EAAK,UAAY,OAGVI,EACLrC,EACAA,EAAQ,QAAQgR,EAAM/Q,EAAIc,CAAG,EAC7B,aACAkB,EAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,cAAc,EACvD,OACA,CACL,EAAC1B,CAAI,CACP,CACH,CAMA,SAASgR,GAAevR,EAASC,EAAIc,EAAK,CACxC,MAAMkB,EAAO,KACb,OAAOI,EACLrC,EACAiF,EACA,iBACAhD,EAAK,eAAe,KAAO,CAC5B,EAGD,SAASgD,EAAY1E,EAAM,CACzB,MAAMqD,EAAO3B,EAAK,OAAOA,EAAK,OAAO,OAAS,CAAC,EAC/C,OAAO2B,GACLA,EAAK,CAAC,EAAE,OAAS,kBACjBA,EAAK,CAAC,EAAE,eAAeA,EAAK,CAAC,EAAG,EAAI,EAAE,SAAW3B,EAAK,eAAe,KACnEhC,EAAGM,CAAI,EACPQ,EAAIR,CAAI,CACb,CACH,CAMA,SAAS4Q,GAAgBnR,EAAS,CAChCA,EAAQ,KAAK,KAAK,eAAe,IAAI,CACvC,CAMA,SAASqR,GAAiCrR,EAASC,EAAIc,EAAK,CAC1D,MAAMkB,EAAO,KAIb,OAAOI,EACLrC,EACAiF,EACA,2BACAhD,EAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,cAAc,EACvD,OACA,CACL,EAGD,SAASgD,EAAY1E,EAAM,CACzB,MAAMqD,EAAO3B,EAAK,OAAOA,EAAK,OAAO,OAAS,CAAC,EAC/C,MAAO,CAACE,EAAc5B,CAAI,GACxBqD,GACAA,EAAK,CAAC,EAAE,OAAS,2BACf3D,EAAGM,CAAI,EACPQ,EAAIR,CAAI,CACb,CACH,CC/PO,MAAMyR,GAAkB,CAC7B,KAAM,kBACN,SAAUC,GACV,UAAWC,EACb,EAGA,SAASA,GAAyBnT,EAAQC,EAAS,CAEjD,IAAIC,EAAQF,EAAO,OAEfiI,EAEA5H,EAEA8J,EAIJ,KAAOjK,KACL,GAAIF,EAAOE,CAAK,EAAE,CAAC,IAAM,QAAS,CAChC,GAAIF,EAAOE,CAAK,EAAE,CAAC,EAAE,OAAS,UAAW,CACvC+H,EAAU/H,EACV,KACD,CACGF,EAAOE,CAAK,EAAE,CAAC,EAAE,OAAS,cAC5BG,EAAOH,EAEV,MAGKF,EAAOE,CAAK,EAAE,CAAC,EAAE,OAAS,WAE5BF,EAAO,OAAOE,EAAO,CAAC,EAEpB,CAACiK,GAAcnK,EAAOE,CAAK,EAAE,CAAC,EAAE,OAAS,eAC3CiK,EAAajK,GAInB,MAAMkT,EAAU,CACd,KAAM,gBACN,MAAO,OAAO,OAAO,CAAE,EAAEpT,EAAOK,CAAI,EAAE,CAAC,EAAE,KAAK,EAC9C,IAAK,OAAO,OAAO,CAAA,EAAIL,EAAOA,EAAO,OAAS,CAAC,EAAE,CAAC,EAAE,GAAG,CACxD,EAGD,OAAAA,EAAOK,CAAI,EAAE,CAAC,EAAE,KAAO,oBAInB8J,GACFnK,EAAO,OAAOK,EAAM,EAAG,CAAC,QAAS+S,EAASnT,CAAO,CAAC,EAClDD,EAAO,OAAOmK,EAAa,EAAG,EAAG,CAAC,OAAQnK,EAAOiI,CAAO,EAAE,CAAC,EAAGhI,CAAO,CAAC,EACtED,EAAOiI,CAAO,EAAE,CAAC,EAAE,IAAM,OAAO,OAAO,CAAA,EAAIjI,EAAOmK,CAAU,EAAE,CAAC,EAAE,GAAG,GAEpEnK,EAAOiI,CAAO,EAAE,CAAC,EAAImL,EAIvBpT,EAAO,KAAK,CAAC,OAAQoT,EAASnT,CAAO,CAAC,EAC/BD,CACT,CAMA,SAASkT,GAAwBjS,EAASC,EAAIc,EAAK,CACjD,MAAMkB,EAAO,KAEb,IAAI3B,EACJ,OAAOZ,EAaP,SAASA,EAAMa,EAAM,CACnB,IAAItB,EAAQgD,EAAK,OAAO,OAEpBmQ,EAEJ,KAAOnT,KAGL,GACEgD,EAAK,OAAOhD,CAAK,EAAE,CAAC,EAAE,OAAS,cAC/BgD,EAAK,OAAOhD,CAAK,EAAE,CAAC,EAAE,OAAS,cAC/BgD,EAAK,OAAOhD,CAAK,EAAE,CAAC,EAAE,OAAS,UAC/B,CACAmT,EAAYnQ,EAAK,OAAOhD,CAAK,EAAE,CAAC,EAAE,OAAS,YAC3C,KACD,CAKH,MAAI,CAACgD,EAAK,OAAO,KAAKA,EAAK,MAAM,IAAI,IAAMA,EAAK,WAAamQ,IAC3DpS,EAAQ,MAAM,mBAAmB,EACjCM,EAASC,EACFH,EAAOG,CAAI,GAEbQ,EAAIR,CAAI,CAChB,CAaD,SAASH,EAAOG,EAAM,CACpB,OAAAP,EAAQ,MAAM,2BAA2B,EAClCQ,EAAOD,CAAI,CACnB,CAaD,SAASC,EAAOD,EAAM,CACpB,OAAIA,IAASD,GACXN,EAAQ,QAAQO,CAAI,EACbC,IAETR,EAAQ,KAAK,2BAA2B,EACjCmC,EAAc5B,CAAI,EACrB8B,EAAarC,EAASU,EAAO,YAAY,EAAEH,CAAI,EAC/CG,EAAMH,CAAI,EACf,CAaD,SAASG,EAAMH,EAAM,CACnB,OAAIA,IAAS,MAAQwD,EAAmBxD,CAAI,GAC1CP,EAAQ,KAAK,mBAAmB,EACzBC,EAAGM,CAAI,GAETQ,EAAIR,CAAI,CAChB,CACH,CC1KO,MAAMyG,GAAU,CACrB,SAAUqL,EACZ,EAMA,SAASA,GAAkBrS,EAAS,CAClC,MAAMqE,EAAerE,EAAQ,QAC3B,KAAK,OAAO,WAAW,eACvBsS,EACAC,CACD,EAED,IAAIpS,EACJ,OAAOkE,EAGP,SAASiO,EAA2B/R,EAAM,CACxC,GAAIA,IAAS,KAAM,CACjBP,EAAQ,QAAQO,CAAI,EACpB,MACD,CACD,OAAAP,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,YAAY,EAClBqC,EAAarC,EAASqE,EAAc,YAAY,CACxD,CAGD,SAASkO,EAAiBhS,EAAM,CAC9B,OAAAP,EAAQ,MAAM,WAAW,EAClB4E,EAAUrE,CAAI,CACtB,CAGD,SAASqE,EAAUrE,EAAM,CACvB,MAAME,EAAQT,EAAQ,MAAM,YAAa,CACvC,YAAa,OACb,SAAAG,CACN,CAAK,EACD,OAAIA,IACFA,EAAS,KAAOM,GAElBN,EAAWM,EACJiF,EAAKnF,CAAI,CACjB,CAGD,SAASmF,EAAKnF,EAAM,CAClB,GAAIA,IAAS,KAAM,CACjBP,EAAQ,KAAK,WAAW,EACxBA,EAAQ,KAAK,WAAW,EACxBA,EAAQ,QAAQO,CAAI,EACpB,MACD,CACD,OAAIwD,EAAmBxD,CAAI,GACzBP,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,WAAW,EACjB4E,IAIT5E,EAAQ,QAAQO,CAAI,EACbmF,EACR,CACH,CC1DO,MAAM8M,GAAW,CACtB,SAAUC,EACZ,EAGMC,GAAqB,CACzB,SAAUC,EACZ,EAMA,SAASF,GAAmBzS,EAAS,CACnC,MAAMiC,EAAO,KAEP2Q,EAAQ,CAAE,EAChB,IAAIC,EAAY,EAEZC,EAEAC,EAEAC,EACJ,OAAOtT,EAGP,SAASA,EAAMa,EAAM,CAWnB,GAAIsS,EAAYD,EAAM,OAAQ,CAC5B,MAAMK,EAAOL,EAAMC,CAAS,EAC5B,OAAA5Q,EAAK,eAAiBgR,EAAK,CAAC,EACrBjT,EAAQ,QACbiT,EAAK,CAAC,EAAE,aACRC,EACAC,CACD,EAAC5S,CAAI,CACP,CAGD,OAAO4S,EAAmB5S,CAAI,CAC/B,CAGD,SAAS2S,EAAiB3S,EAAM,CAM9B,GALAsS,IAKI5Q,EAAK,eAAe,WAAY,CAClCA,EAAK,eAAe,WAAa,OAC7B6Q,GACFM,EAAW,EAKb,MAAMC,EAAmBpR,EAAK,OAAO,OACrC,IAAIqR,EAAkBD,EAElBzS,EAGJ,KAAO0S,KACL,GACErR,EAAK,OAAOqR,CAAe,EAAE,CAAC,IAAM,QACpCrR,EAAK,OAAOqR,CAAe,EAAE,CAAC,EAAE,OAAS,YACzC,CACA1S,EAAQqB,EAAK,OAAOqR,CAAe,EAAE,CAAC,EAAE,IACxC,KACD,CAEHC,EAAeV,CAAS,EAGxB,IAAI5T,EAAQoU,EACZ,KAAOpU,EAAQgD,EAAK,OAAO,QACzBA,EAAK,OAAOhD,CAAK,EAAE,CAAC,EAAE,IAAM,OAAO,OAAO,CAAE,EAAE2B,CAAK,EACnD3B,IAIF,OAAAc,GACEkC,EAAK,OACLqR,EAAkB,EAClB,EACArR,EAAK,OAAO,MAAMoR,CAAgB,CACnC,EAGDpR,EAAK,OAAO,OAAShD,EACdkU,EAAmB5S,CAAI,CAC/B,CACD,OAAOb,EAAMa,CAAI,CAClB,CAGD,SAAS4S,EAAmB5S,EAAM,CAMhC,GAAIsS,IAAcD,EAAM,OAAQ,CAI9B,GAAI,CAACE,EACH,OAAOU,EAAkBjT,CAAI,EAM/B,GAAIuS,EAAU,kBAAoBA,EAAU,iBAAiB,SAC3D,OAAOW,EAAUlT,CAAI,EAQvB0B,EAAK,UAAY,GACf6Q,EAAU,kBAAoB,CAACA,EAAU,8BAE5C,CAGD,OAAA7Q,EAAK,eAAiB,CAAE,EACjBjC,EAAQ,MACb0S,GACAgB,EACAC,CACD,EAACpT,CAAI,CACP,CAGD,SAASmT,EAAqBnT,EAAM,CAClC,OAAIuS,GAAWM,EAAW,EAC1BG,EAAeV,CAAS,EACjBW,EAAkBjT,CAAI,CAC9B,CAGD,SAASoT,EAAsBpT,EAAM,CACnC,OAAA0B,EAAK,OAAO,KAAKA,EAAK,IAAK,EAAC,IAAI,EAAI4Q,IAAcD,EAAM,OACxDI,EAAkB/Q,EAAK,IAAG,EAAG,OACtBwR,EAAUlT,CAAI,CACtB,CAGD,SAASiT,EAAkBjT,EAAM,CAE/B,OAAA0B,EAAK,eAAiB,CAAE,EACjBjC,EAAQ,QACb0S,GACAkB,EACAH,CACD,EAAClT,CAAI,CACP,CAGD,SAASqT,EAAkBrT,EAAM,CAC/B,OAAAsS,IACAD,EAAM,KAAK,CAAC3Q,EAAK,iBAAkBA,EAAK,cAAc,CAAC,EAEhDuR,EAAkBjT,CAAI,CAC9B,CAGD,SAASkT,EAAUlT,EAAM,CACvB,GAAIA,IAAS,KAAM,CACbuS,GAAWM,EAAW,EAC1BG,EAAe,CAAC,EAChBvT,EAAQ,QAAQO,CAAI,EACpB,MACD,CACD,OAAAuS,EAAYA,GAAa7Q,EAAK,OAAO,KAAKA,EAAK,KAAK,EACpDjC,EAAQ,MAAM,YAAa,CACzB,YAAa,OACb,SAAU+S,EACV,WAAYD,CAClB,CAAK,EACMe,EAAatT,CAAI,CACzB,CAGD,SAASsT,EAAatT,EAAM,CAC1B,GAAIA,IAAS,KAAM,CACjBuT,EAAa9T,EAAQ,KAAK,WAAW,EAAG,EAAI,EAC5CuT,EAAe,CAAC,EAChBvT,EAAQ,QAAQO,CAAI,EACpB,MACD,CACD,OAAIwD,EAAmBxD,CAAI,GACzBP,EAAQ,QAAQO,CAAI,EACpBuT,EAAa9T,EAAQ,KAAK,WAAW,CAAC,EAEtC6S,EAAY,EACZ5Q,EAAK,UAAY,OACVvC,IAETM,EAAQ,QAAQO,CAAI,EACbsT,EACR,CAOD,SAASC,EAAarT,EAAOsT,EAAK,CAChC,MAAMpN,EAAS1E,EAAK,YAAYxB,CAAK,EAyCrC,GAxCIsT,GAAKpN,EAAO,KAAK,IAAI,EACzBlG,EAAM,SAAWsS,EACbA,IAAYA,EAAW,KAAOtS,GAClCsS,EAAatS,EACbqS,EAAU,WAAWrS,EAAM,KAAK,EAChCqS,EAAU,MAAMnM,CAAM,EAmClB1E,EAAK,OAAO,KAAKxB,EAAM,MAAM,IAAI,EAAG,CACtC,IAAIxB,EAAQ6T,EAAU,OAAO,OAC7B,KAAO7T,KACL,GAEE6T,EAAU,OAAO7T,CAAK,EAAE,CAAC,EAAE,MAAM,OAAS+T,IAEzC,CAACF,EAAU,OAAO7T,CAAK,EAAE,CAAC,EAAE,KAE3B6T,EAAU,OAAO7T,CAAK,EAAE,CAAC,EAAE,IAAI,OAAS+T,GAI1C,OAMJ,MAAMK,EAAmBpR,EAAK,OAAO,OACrC,IAAIqR,EAAkBD,EAElB1K,EAEA/H,EAGJ,KAAO0S,KACL,GACErR,EAAK,OAAOqR,CAAe,EAAE,CAAC,IAAM,QACpCrR,EAAK,OAAOqR,CAAe,EAAE,CAAC,EAAE,OAAS,YACzC,CACA,GAAI3K,EAAM,CACR/H,EAAQqB,EAAK,OAAOqR,CAAe,EAAE,CAAC,EAAE,IACxC,KACD,CACD3K,EAAO,EACR,CAMH,IAJA4K,EAAeV,CAAS,EAGxB5T,EAAQoU,EACDpU,EAAQgD,EAAK,OAAO,QACzBA,EAAK,OAAOhD,CAAK,EAAE,CAAC,EAAE,IAAM,OAAO,OAAO,CAAE,EAAE2B,CAAK,EACnD3B,IAIFc,GACEkC,EAAK,OACLqR,EAAkB,EAClB,EACArR,EAAK,OAAO,MAAMoR,CAAgB,CACnC,EAGDpR,EAAK,OAAO,OAAShD,CACtB,CACF,CAMD,SAASsU,EAAevS,EAAM,CAC5B,IAAI/B,EAAQ2T,EAAM,OAGlB,KAAO3T,KAAU+B,GAAM,CACrB,MAAMgT,EAAQpB,EAAM3T,CAAK,EACzBgD,EAAK,eAAiB+R,EAAM,CAAC,EAC7BA,EAAM,CAAC,EAAE,KAAK,KAAK/R,EAAMjC,CAAO,CACjC,CACD4S,EAAM,OAAS5R,CAChB,CACD,SAASoS,GAAY,CACnBN,EAAU,MAAM,CAAC,IAAI,CAAC,EACtBC,EAAa,OACbD,EAAY,OACZ7Q,EAAK,eAAe,WAAa,MAClC,CACH,CAMA,SAAS0Q,GAAkB3S,EAASC,EAAIc,EAAK,CAG3C,OAAOsB,EACLrC,EACAA,EAAQ,QAAQ,KAAK,OAAO,WAAW,SAAUC,EAAIc,CAAG,EACxD,aACA,KAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,cAAc,EAAI,OAAY,CAC5E,CACH,CClXO,MAAMkT,GAAO,CAClB,SAAUC,EACZ,EAMA,SAASA,GAAelU,EAAS,CAC/B,MAAMiC,EAAO,KACPkS,EAAUnU,EAAQ,QAEtB+M,GACAqH,EAEApU,EAAQ,QACN,KAAK,OAAO,WAAW,YACvBqU,EACAhS,EACErC,EACAA,EAAQ,QACN,KAAK,OAAO,WAAW,KACvBqU,EACArU,EAAQ,QAAQgH,GAASqN,CAAc,CACxC,EACD,YACD,CACF,CACF,EACD,OAAOF,EAGP,SAASC,EAAc7T,EAAM,CAC3B,GAAIA,IAAS,KAAM,CACjBP,EAAQ,QAAQO,CAAI,EACpB,MACD,CACD,OAAAP,EAAQ,MAAM,iBAAiB,EAC/BA,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,iBAAiB,EAC9BiC,EAAK,iBAAmB,OACjBkS,CACR,CAGD,SAASE,EAAe9T,EAAM,CAC5B,GAAIA,IAAS,KAAM,CACjBP,EAAQ,QAAQO,CAAI,EACpB,MACD,CACD,OAAAP,EAAQ,MAAM,YAAY,EAC1BA,EAAQ,QAAQO,CAAI,EACpBP,EAAQ,KAAK,YAAY,EACzBiC,EAAK,iBAAmB,OACjBkS,CACR,CACH,CC1DO,MAAMG,GAAW,CACtB,WAAYC,GAAgB,CAC9B,EACaC,GAASC,GAAkB,QAAQ,EACnCrV,GAAOqV,GAAkB,MAAM,EAM5C,SAASA,GAAkBC,EAAO,CAChC,MAAO,CACL,SAAUC,EACV,WAAYJ,GACVG,IAAU,OAASE,GAAyB,MAC7C,CACF,EAMD,SAASD,EAAe3U,EAAS,CAC/B,MAAMiC,EAAO,KACP4S,EAAa,KAAK,OAAO,WAAWH,CAAK,EACzCtV,EAAOY,EAAQ,QAAQ6U,EAAYnV,EAAOoV,CAAO,EACvD,OAAOpV,EAGP,SAASA,EAAMa,EAAM,CACnB,OAAO2E,EAAQ3E,CAAI,EAAInB,EAAKmB,CAAI,EAAIuU,EAAQvU,CAAI,CACjD,CAGD,SAASuU,EAAQvU,EAAM,CACrB,GAAIA,IAAS,KAAM,CACjBP,EAAQ,QAAQO,CAAI,EACpB,MACD,CACD,OAAAP,EAAQ,MAAM,MAAM,EACpBA,EAAQ,QAAQO,CAAI,EACbmF,CACR,CAGD,SAASA,EAAKnF,EAAM,CAClB,OAAI2E,EAAQ3E,CAAI,GACdP,EAAQ,KAAK,MAAM,EACZZ,EAAKmB,CAAI,IAIlBP,EAAQ,QAAQO,CAAI,EACbmF,EACR,CAMD,SAASR,EAAQ3E,EAAM,CACrB,GAAIA,IAAS,KACX,MAAO,GAET,MAAMyQ,EAAO6D,EAAWtU,CAAI,EAC5B,IAAItB,EAAQ,GACZ,GAAI+R,EAGF,KAAO,EAAE/R,EAAQ+R,EAAK,QAAQ,CAC5B,MAAMiC,EAAOjC,EAAK/R,CAAK,EACvB,GAAI,CAACgU,EAAK,UAAYA,EAAK,SAAS,KAAKhR,EAAMA,EAAK,QAAQ,EAC1D,MAAO,EAEV,CAEH,MAAO,EACR,CACF,CACH,CAMA,SAASsS,GAAeQ,EAAe,CACrC,OAAOC,EAGP,SAASA,EAAejW,EAAQC,EAAS,CACvC,IAAIC,EAAQ,GAERuG,EAIJ,KAAO,EAAEvG,GAASF,EAAO,QACnByG,IAAU,OACRzG,EAAOE,CAAK,GAAKF,EAAOE,CAAK,EAAE,CAAC,EAAE,OAAS,SAC7CuG,EAAQvG,EACRA,MAEO,CAACF,EAAOE,CAAK,GAAKF,EAAOE,CAAK,EAAE,CAAC,EAAE,OAAS,UAEjDA,IAAUuG,EAAQ,IACpBzG,EAAOyG,CAAK,EAAE,CAAC,EAAE,IAAMzG,EAAOE,EAAQ,CAAC,EAAE,CAAC,EAAE,IAC5CF,EAAO,OAAOyG,EAAQ,EAAGvG,EAAQuG,EAAQ,CAAC,EAC1CvG,EAAQuG,EAAQ,GAElBA,EAAQ,QAGZ,OAAOuP,EAAgBA,EAAchW,EAAQC,CAAO,EAAID,CACzD,CACH,CAaA,SAAS6V,GAAuB7V,EAAQC,EAAS,CAC/C,IAAIqH,EAAa,EAEjB,KAAO,EAAEA,GAActH,EAAO,QAC5B,IACGsH,IAAetH,EAAO,QACrBA,EAAOsH,CAAU,EAAE,CAAC,EAAE,OAAS,eACjCtH,EAAOsH,EAAa,CAAC,EAAE,CAAC,EAAE,OAAS,OACnC,CACA,MAAMX,EAAO3G,EAAOsH,EAAa,CAAC,EAAE,CAAC,EAC/B4O,EAASjW,EAAQ,YAAY0G,CAAI,EACvC,IAAIzG,EAAQgW,EAAO,OACfC,EAAc,GACdlU,EAAO,EAEPmU,EACJ,KAAOlW,KAAS,CACd,MAAMmW,EAAQH,EAAOhW,CAAK,EAC1B,GAAI,OAAOmW,GAAU,SAAU,CAE7B,IADAF,EAAcE,EAAM,OACbA,EAAM,WAAWF,EAAc,CAAC,IAAM,IAC3ClU,IACAkU,IAEF,GAAIA,EAAa,MACjBA,EAAc,EACf,SAEQE,IAAU,GACjBD,EAAO,GACPnU,YACSoU,IAAU,GAEd,CAELnW,IACA,KACD,CACF,CACD,GAAI+B,EAAM,CACR,MAAMP,EAAQ,CACZ,KACE4F,IAAetH,EAAO,QAAUoW,GAAQnU,EAAO,EAC3C,aACA,oBACN,MAAO,CACL,KAAM0E,EAAK,IAAI,KACf,OAAQA,EAAK,IAAI,OAAS1E,EAC1B,OAAQ0E,EAAK,IAAI,OAAS1E,EAC1B,OAAQ0E,EAAK,MAAM,OAASzG,EAC5B,aAAcA,EACViW,EACAxP,EAAK,MAAM,aAAewP,CAC/B,EACD,IAAK,OAAO,OAAO,CAAA,EAAIxP,EAAK,GAAG,CAChC,EACDA,EAAK,IAAM,OAAO,OAAO,CAAE,EAAEjF,EAAM,KAAK,EACpCiF,EAAK,MAAM,SAAWA,EAAK,IAAI,OACjC,OAAO,OAAOA,EAAMjF,CAAK,GAEzB1B,EAAO,OACLsH,EACA,EACA,CAAC,QAAS5F,EAAOzB,CAAO,EACxB,CAAC,OAAQyB,EAAOzB,CAAO,CACxB,EACDqH,GAAc,EAEjB,CACDA,GACD,CAEH,OAAOtH,CACT,CClKO,SAASsW,GAAgBC,EAAQC,EAAYC,EAAM,CAExD,IAAI5U,EAAQ,OAAO,OACjB4U,EACI,OAAO,OAAO,CAAE,EAAEA,CAAI,EACtB,CACE,KAAM,EACN,OAAQ,EACR,OAAQ,CACT,EACL,CACE,OAAQ,EACR,aAAc,EACf,CACF,EAED,MAAMC,EAAc,CAAE,EAEhBC,EAAuB,CAAE,EAE/B,IAAIT,EAAS,CAAE,EAEXrC,EAAQ,CAAE,EASd,MAAM5S,EAAU,CACd,QAAA2V,EACA,MAAAnQ,EACA,KAAAxD,EACA,QAAS4T,EAAiBC,CAAqB,EAC/C,MAAOD,EAAiBE,CAAiB,EACzC,UAAWF,EAAiBE,EAAmB,CAC7C,UAAW,EACjB,CAAK,CACF,EAOK9W,EAAU,CACd,SAAU,KACV,KAAM,KACN,eAAgB,CAAE,EAClB,OAAQ,CAAE,EACV,OAAAsW,EACA,YAAAS,EACA,eAAAC,EACA,IAAAC,EACA,WAAAC,EACA,MAAAC,CACD,EAOD,IAAIjU,EAAQqT,EAAW,SAAS,KAAKvW,EAASgB,CAAO,EAQrD,OAAIuV,EAAW,YACbG,EAAqB,KAAKH,CAAU,EAE/BvW,EAGP,SAASmX,EAAMpP,EAAO,CAKpB,OAJAkO,EAASpV,EAAKoV,EAAQlO,CAAK,EAC3BqP,EAAM,EAGFnB,EAAOA,EAAO,OAAS,CAAC,IAAM,KACzB,CAAE,GAEXoB,EAAUd,EAAY,CAAC,EAGvBvW,EAAQ,OAASc,GAAW4V,EAAsB1W,EAAQ,OAAQA,CAAO,EAClEA,EAAQ,OAChB,CAOD,SAASgX,EAAevV,EAAO6V,EAAY,CACzC,OAAOC,GAAgBR,EAAYtV,CAAK,EAAG6V,CAAU,CACtD,CAGD,SAASP,EAAYtV,EAAO,CAC1B,OAAO+V,GAAYvB,EAAQxU,CAAK,CACjC,CAGD,SAASwV,GAAM,CAEb,KAAM,CAAC,KAAAQ,EAAM,OAAAC,EAAQ,OAAAjX,EAAQ,OAAAkX,EAAQ,aAAAC,CAAY,EAAIhW,EACrD,MAAO,CACL,KAAA6V,EACA,OAAAC,EACA,OAAAjX,EACA,OAAAkX,EACA,aAAAC,CACD,CACF,CAGD,SAASV,EAAWnT,EAAO,CACzB0S,EAAY1S,EAAM,IAAI,EAAIA,EAAM,OAChC8T,EAAyB,CAC1B,CAgBD,SAAST,GAAO,CAEd,IAAIU,EACJ,KAAOlW,EAAM,OAASqU,EAAO,QAAQ,CACnC,MAAMG,EAAQH,EAAOrU,EAAM,MAAM,EAGjC,GAAI,OAAOwU,GAAU,SAKnB,IAJA0B,EAAalW,EAAM,OACfA,EAAM,aAAe,IACvBA,EAAM,aAAe,GAGrBA,EAAM,SAAWkW,GACjBlW,EAAM,aAAewU,EAAM,QAE3B2B,EAAG3B,EAAM,WAAWxU,EAAM,YAAY,CAAC,OAGzCmW,EAAG3B,CAAK,CAEX,CACF,CAQD,SAAS2B,EAAGxW,EAAM,CAGhB2B,EAAQA,EAAM3B,CAAI,CACnB,CAGD,SAASoV,EAAQpV,EAAM,CACjBwD,EAAmBxD,CAAI,GACzBK,EAAM,OACNA,EAAM,OAAS,EACfA,EAAM,QAAUL,IAAS,GAAK,EAAI,EAClCsW,EAAyB,GAChBtW,IAAS,KAClBK,EAAM,SACNA,EAAM,UAIJA,EAAM,aAAe,EACvBA,EAAM,UAENA,EAAM,eAKFA,EAAM,eAAiBqU,EAAOrU,EAAM,MAAM,EAAE,SAC9CA,EAAM,aAAe,GACrBA,EAAM,WAKV5B,EAAQ,SAAWuB,CAIpB,CAGD,SAASiF,EAAMoC,EAAMoP,EAAQ,CAG3B,MAAMvW,EAAQuW,GAAU,CAAE,EAC1B,OAAAvW,EAAM,KAAOmH,EACbnH,EAAM,MAAQwV,EAAK,EACnBjX,EAAQ,OAAO,KAAK,CAAC,QAASyB,EAAOzB,CAAO,CAAC,EAC7C4T,EAAM,KAAKnS,CAAK,EACTA,CACR,CAGD,SAASuB,EAAK4F,EAAM,CAClB,MAAMnH,EAAQmS,EAAM,IAAK,EACzB,OAAAnS,EAAM,IAAMwV,EAAK,EACjBjX,EAAQ,OAAO,KAAK,CAAC,OAAQyB,EAAOzB,CAAO,CAAC,EACrCyB,CACR,CAOD,SAASoV,EAAsBoB,EAAWhT,EAAM,CAC9CoS,EAAUY,EAAWhT,EAAK,IAAI,CAC/B,CAOD,SAAS6R,EAAkBoB,EAAGjT,EAAM,CAClCA,EAAK,QAAS,CACf,CAQD,SAAS2R,EAAiBuB,EAAUH,EAAQ,CAC1C,OAAOI,EAWP,SAASA,EAAKvC,EAAY3H,EAAamK,EAAY,CAEjD,IAAIC,EAEAC,EAEAC,GAEAvT,EACJ,OAAO,MAAM,QAAQ4Q,CAAU,EAC3B4C,GAAuB5C,CAAU,EACjC,aAAcA,EAEd4C,GAAuB,CAAC5C,CAAU,CAAC,EACnC6C,EAAsB7C,CAAU,EAQpC,SAAS6C,EAAsBC,EAAK,CAClC,OAAOjY,GAGP,SAASA,GAAMa,GAAM,CACnB,MAAMqX,GAAMrX,KAAS,MAAQoX,EAAIpX,EAAI,EAC/BsX,GAAMtX,KAAS,MAAQoX,EAAI,KAC3B3G,GAAO,CAGX,GAAI,MAAM,QAAQ4G,EAAG,EAAIA,GAAMA,GAAM,CAACA,EAAG,EAAI,GAC7C,GAAI,MAAM,QAAQC,EAAG,EAAIA,GAAMA,GAAM,CAACA,EAAG,EAAI,EAC9C,EACD,OAAOJ,GAAuBzG,EAAI,EAAEzQ,EAAI,CACzC,CACF,CAQD,SAASkX,GAAuBzG,EAAM,CAGpC,OAFAsG,EAAmBtG,EACnBuG,EAAiB,EACbvG,EAAK,SAAW,EACXqG,EAEFS,EAAgB9G,EAAKuG,CAAc,CAAC,CAC5C,CAQD,SAASO,EAAgBb,EAAW,CAClC,OAAOvX,GAGP,SAASA,GAAMa,GAAM,CAanB,OARA0D,EAAO8T,EAAO,EACdP,GAAmBP,EACdA,EAAU,UACbjY,EAAQ,iBAAmBiY,GAM3BA,EAAU,MACVjY,EAAQ,OAAO,WAAW,QAAQ,KAAK,SAASiY,EAAU,IAAI,EAEvDlW,GAAQ,EAEVkW,EAAU,SAAS,KAIxBD,EAAS,OAAO,OAAO,OAAO,OAAOhY,CAAO,EAAGgY,CAAM,EAAIhY,EACzDgB,EACAC,EACAc,EACD,EAACR,EAAI,CACP,CACF,CAGD,SAASN,EAAGM,EAAM,CAEhB,OAAA4W,EAASK,GAAkBvT,CAAI,EACxBiJ,CACR,CAGD,SAASnM,GAAIR,EAAM,CAGjB,OADA0D,EAAK,QAAS,EACV,EAAEsT,EAAiBD,EAAiB,OAC/BQ,EAAgBR,EAAiBC,CAAc,CAAC,EAElDF,CACR,CACF,CACF,CAOD,SAAShB,EAAUY,EAAWzB,EAAM,CAC9ByB,EAAU,YAAc,CAACvB,EAAqB,SAASuB,CAAS,GAClEvB,EAAqB,KAAKuB,CAAS,EAEjCA,EAAU,SACZlX,GACEf,EAAQ,OACRwW,EACAxW,EAAQ,OAAO,OAASwW,EACxByB,EAAU,QAAQjY,EAAQ,OAAO,MAAMwW,CAAI,EAAGxW,CAAO,CACtD,EAECiY,EAAU,YACZjY,EAAQ,OAASiY,EAAU,UAAUjY,EAAQ,OAAQA,CAAO,EAE/D,CAOD,SAAS+Y,GAAQ,CACf,MAAMC,EAAa/B,EAAK,EAClBgC,EAAgBjZ,EAAQ,SACxBkZ,EAAwBlZ,EAAQ,iBAChCmZ,EAAmBnZ,EAAQ,OAAO,OAClCoZ,EAAa,MAAM,KAAKxF,CAAK,EACnC,MAAO,CACL,QAAAyF,EACA,KAAMF,CACP,EAOD,SAASE,GAAU,CACjBzX,EAAQoX,EACRhZ,EAAQ,SAAWiZ,EACnBjZ,EAAQ,iBAAmBkZ,EAC3BlZ,EAAQ,OAAO,OAASmZ,EACxBvF,EAAQwF,EACRvB,EAAyB,CAC1B,CACF,CAQD,SAASA,GAA0B,CAC7BjW,EAAM,QAAQ6U,GAAe7U,EAAM,OAAS,IAC9CA,EAAM,OAAS6U,EAAY7U,EAAM,IAAI,EACrCA,EAAM,QAAU6U,EAAY7U,EAAM,IAAI,EAAI,EAE7C,CACH,CASA,SAAS4V,GAAYvB,EAAQxU,EAAO,CAClC,MAAM6X,EAAa7X,EAAM,MAAM,OACzB8X,EAAmB9X,EAAM,MAAM,aAC/B+X,EAAW/X,EAAM,IAAI,OACrBgY,EAAiBhY,EAAM,IAAI,aAEjC,IAAIiY,EACJ,GAAIJ,IAAeE,EAEjBE,EAAO,CAACzD,EAAOqD,CAAU,EAAE,MAAMC,EAAkBE,CAAc,CAAC,MAC7D,CAEL,GADAC,EAAOzD,EAAO,MAAMqD,EAAYE,CAAQ,EACpCD,EAAmB,GAAI,CACzB,MAAMI,EAAOD,EAAK,CAAC,EACf,OAAOC,GAAS,SAClBD,EAAK,CAAC,EAAIC,EAAK,MAAMJ,CAAgB,EAErCG,EAAK,MAAO,CAEf,CACGD,EAAiB,GAEnBC,EAAK,KAAKzD,EAAOuD,CAAQ,EAAE,MAAM,EAAGC,CAAc,CAAC,CAEtD,CACD,OAAOC,CACT,CASA,SAASnC,GAAgBtB,EAAQqB,EAAY,CAC3C,IAAIrX,EAAQ,GAEZ,MAAM2Z,EAAS,CAAE,EAEjB,IAAIC,EACJ,KAAO,EAAE5Z,EAAQgW,EAAO,QAAQ,CAC9B,MAAMG,EAAQH,EAAOhW,CAAK,EAE1B,IAAI8D,EACJ,GAAI,OAAOqS,GAAU,SACnBrS,EAAQqS,MAER,QAAQA,EAAK,CACX,IAAK,GAAI,CACPrS,EAAQ,KACR,KACD,CACD,IAAK,GAAI,CACPA,EAAQ;AAAA,EACR,KACD,CACD,IAAK,GAAI,CACPA,EAAQ;AAAA,EACR,KACD,CACD,IAAK,GAAI,CACPA,EAAQuT,EAAa,IAAM,IAC3B,KACD,CACD,IAAK,GAAI,CACP,GAAI,CAACA,GAAcuC,EAAO,SAC1B9V,EAAQ,IACR,KACD,CACD,QAEEA,EAAQ,OAAO,aAAaqS,CAAK,CAEpC,CACHyD,EAAQzD,IAAU,GAClBwD,EAAO,KAAK7V,CAAK,CAClB,CACD,OAAO6V,EAAO,KAAK,EAAE,CACvB,CCxiBO,MAAMpG,GAAW,CACrB,GAAKxB,EACL,GAAKA,EACL,GAAKA,EACL,GAAKA,EACL,GAAKA,EACL,GAAKA,EACL,GAAKA,EACL,GAAKA,EACL,GAAKA,EACL,GAAKA,EACL,GAAKA,EACL,GAAKA,EACL,GAAKA,EACL,GAAKnP,EACR,EAGaiX,GAAiB,CAC3B,GAAK5P,EACR,EAGa6P,GAAc,CACzB,CAAC,EAAE,EAAGlU,GACN,CAAC,EAAE,EAAGA,GACL,GAAKA,EACR,EAGaoP,GAAO,CACjB,GAAK/J,GACL,GAAK2G,GACL,GAAK,CAACmB,GAAiBnB,EAAa,EACpC,GAAKrG,GACL,GAAKwH,GACL,GAAKnB,GACL,GAAKxN,GACL,IAAMA,EACT,EAGamR,GAAS,CACnB,GAAK9R,GACL,GAAKH,EACR,EAGanD,GAAO,CAClB,CAAC,EAAE,EAAGuR,GACN,CAAC,EAAE,EAAGA,GACN,CAAC,EAAE,EAAGA,GACL,GAAKJ,GACL,GAAK7N,GACL,GAAK9D,GACL,GAAK,CAACiC,GAAUmM,EAAQ,EACxB,GAAKyD,GACL,GAAK,CAACzG,GAAiBzH,EAAe,EACtC,GAAKkM,GACL,GAAK7P,GACL,GAAKuG,EACR,EAGa6T,GAAa,CACxB,KAAM,CAACpa,GAAWqa,EAAW,CAC/B,EAGa/Y,GAAmB,CAC9B,KAAM,CAAC,GAAI,EAAE,CACf,EAGagZ,GAAU,CACrB,KAAM,CAAE,CACV,oNCrFO,SAASC,GAAMC,EAAS,CAE7B,MAAMvE,EAEJwE,GAAkB,CAACC,GAAmB,IAHvBF,GAAW,CAAE,GAGuB,YAAc,CAAE,CAAC,CAAC,EAGjE9D,EAAS,CACb,QAAS,CAAE,EACX,KAAM,CAAE,EACR,WAAAT,EACA,QAAS0E,EAAOvS,EAAO,EACvB,SAAUuS,EAAO/G,EAAQ,EACzB,KAAM+G,EAAOtF,EAAI,EACjB,OAAQsF,EAAO/E,EAAM,EACrB,KAAM+E,EAAOna,EAAI,CAClB,EACD,OAAOkW,EAKP,SAASiE,EAAOpF,EAAS,CACvB,OAAOqF,EAEP,SAASA,EAAQhE,EAAM,CACrB,OAAOH,GAAgBC,EAAQnB,EAASqB,CAAI,CAC7C,CACF,CACH,CClCA,MAAMiE,GAAS,cAKR,SAASC,IAAa,CAC3B,IAAIhD,EAAS,EACT1L,EAAS,GAETtL,EAAQ,GAERia,EACJ,OAAOC,EAGP,SAASA,EAAa7W,EAAO8W,EAAUla,EAAK,CAE1C,MAAMsV,EAAS,CAAE,EAEjB,IAAI6E,EAEAlY,EAEA0E,EAEAyT,EAEAxZ,EAaJ,IAVAwC,EAAQiI,EAASjI,EAAM,SAAS8W,CAAQ,EACxCvT,EAAgB,EAChB0E,EAAS,GACLtL,IAEEqD,EAAM,WAAW,CAAC,IAAM,OAC1BuD,IAEF5G,EAAQ,QAEH4G,EAAgBvD,EAAM,QAAQ,CAMnC,GALA0W,GAAO,UAAYnT,EACnBwT,EAAQL,GAAO,KAAK1W,CAAK,EACzBgX,EACED,GAASA,EAAM,QAAU,OAAYA,EAAM,MAAQ/W,EAAM,OAC3DxC,EAAOwC,EAAM,WAAWgX,CAAW,EAC/B,CAACD,EAAO,CACV9O,EAASjI,EAAM,MAAMuD,CAAa,EAClC,KACD,CACD,GAAI/F,IAAS,IAAM+F,IAAkByT,GAAeJ,EAClD1E,EAAO,KAAK,EAAE,EACd0E,EAAmB,WAUnB,QARIA,IACF1E,EAAO,KAAK,EAAE,EACd0E,EAAmB,QAEjBrT,EAAgByT,IAClB9E,EAAO,KAAKlS,EAAM,MAAMuD,EAAeyT,CAAW,CAAC,EACnDrD,GAAUqD,EAAczT,GAElB/F,EAAI,CACV,IAAK,GAAG,CACN0U,EAAO,KAAK,KAAK,EACjByB,IACA,KACD,CACD,IAAK,GAAG,CAGN,IAFA9U,EAAO,KAAK,KAAK8U,EAAS,CAAC,EAAI,EAC/BzB,EAAO,KAAK,EAAE,EACPyB,IAAW9U,GAAMqT,EAAO,KAAK,EAAE,EACtC,KACD,CACD,IAAK,IAAI,CACPA,EAAO,KAAK,EAAE,EACdyB,EAAS,EACT,KACD,CACD,QACEiD,EAAmB,GACnBjD,EAAS,CAEZ,CAEHpQ,EAAgByT,EAAc,CAC/B,CACD,OAAIpa,IACEga,GAAkB1E,EAAO,KAAK,EAAE,EAChCjK,GAAQiK,EAAO,KAAKjK,CAAM,EAC9BiK,EAAO,KAAK,IAAI,GAEXA,CACR,CACH,CCnGO,SAAS+E,GAAYjb,EAAQ,CAClC,KAAO,CAAC4G,GAAY5G,CAAM,GAAG,CAG7B,OAAOA,CACT,CC4IA,MAAMkb,GAAM,CAAE,EAAC,eAYFC,GAcX,SAAUnX,EAAO8W,EAAUT,EAAS,CAClC,OAAI,OAAOS,GAAa,WACtBT,EAAUS,EACVA,EAAW,QAENM,GAASf,CAAO,EACrBY,GACEb,GAAMC,CAAO,EAAE,WAAW,MAAMM,GAAU,EAAG3W,EAAO8W,EAAU,EAAI,CAAC,CACpE,CACF,CACF,EAOH,SAASM,GAASf,EAAS,CAEzB,MAAMgB,EAAS,CACb,WAAY,CAAE,EACd,eAAgB,CAAC,WAAY,WAAY,UAAW,YAAa,QAAQ,EACzE,MAAO,CACL,SAAUC,EAAOC,EAAI,EACrB,iBAAkBC,EAClB,cAAeA,EACf,WAAYF,EAAOlI,EAAO,EAC1B,WAAYkI,EAAOxY,EAAU,EAC7B,gBAAiB0Y,EACjB,mBAAoBA,EACpB,WAAYF,EAAOG,EAAQ,EAC3B,oBAAqBxP,EACrB,oBAAqBA,EACrB,aAAcqP,EAAOG,GAAUxP,CAAM,EACrC,SAAUqP,EAAOlV,GAAU6F,CAAM,EACjC,aAAcuP,EACd,KAAMA,EACN,cAAeA,EACf,WAAYF,EAAOnR,EAAU,EAC7B,4BAA6B8B,EAC7B,sBAAuBA,EACvB,sBAAuBA,EACvB,SAAUqP,EAAOI,EAAQ,EACzB,gBAAiBJ,EAAOK,EAAS,EACjC,kBAAmBL,EAAOK,EAAS,EACnC,SAAUL,EAAOM,GAAM3P,CAAM,EAC7B,aAAcuP,EACd,SAAUF,EAAOM,GAAM3P,CAAM,EAC7B,aAAcuP,EACd,MAAOF,EAAOO,EAAK,EACnB,MAAO5P,EACP,KAAMqP,EAAOC,EAAI,EACjB,SAAUD,EAAOQ,EAAQ,EACzB,cAAeC,EACf,YAAaT,EAAOrJ,GAAM+J,CAAkB,EAC5C,cAAeV,EAAOrJ,EAAI,EAC1B,UAAWqJ,EAAOjI,EAAS,EAC3B,UAAW4I,GACX,gBAAiBhQ,EACjB,0BAA2BA,EAC3B,oBAAqBA,EACrB,cAAeqP,EAAOlI,EAAO,EAC7B,OAAQkI,EAAOY,EAAM,EACrB,cAAeZ,EAAOxJ,EAAa,CACpC,EACD,KAAM,CACJ,WAAYqK,EAAQ,EACpB,mBAAoBC,EACpB,SAAUD,EAAQ,EAClB,cAAeE,GACf,iBAAkBC,GAClB,WAAYH,EAAQ,EACpB,qBAAsBI,EACtB,oCAAqCC,GACrC,gCAAiCA,GACjC,wBAAyBC,GACzB,WAAYN,EAAOO,CAAgB,EACnC,gBAAiBC,EACjB,oBAAqBC,EACrB,oBAAqBC,EACrB,cAAeN,EACf,aAAcJ,EAAOW,CAAkB,EACvC,SAAUX,EAAOY,CAAc,EAC/B,aAAcR,EACd,KAAMA,EACN,WAAYJ,EAAQ,EACpB,4BAA6Ba,EAC7B,sBAAuBC,EACvB,sBAAuBC,EACvB,SAAUf,EAAQ,EAClB,gBAAiBA,EAAOgB,CAAe,EACvC,kBAAmBhB,EAAOgB,CAAe,EACzC,SAAUhB,EAAOiB,CAAc,EAC/B,aAAcb,EACd,SAAUJ,EAAOkB,CAAc,EAC/B,aAAcd,EACd,MAAOJ,EAAOmB,EAAW,EACzB,MAAOC,EACP,UAAWC,EACX,WAAYC,EACZ,KAAMtB,EAAOuB,CAAU,EACvB,SAAUvB,EAAQ,EAClB,YAAaA,EAAQ,EACrB,cAAeA,EAAQ,EACvB,UAAWA,EAAQ,EACnB,gBAAiBwB,EACjB,0BAA2BC,GAC3B,oBAAqBC,EACrB,SAAUC,EACV,cAAe3B,EAAO4B,CAAmB,EACzC,0BAA2BC,EAC3B,kBAAmBC,EACnB,OAAQ9B,EAAQ,EAChB,cAAeA,EAAQ,CACxB,CACF,EACD+B,GAAU7C,GAAShB,GAAW,CAAA,GAAI,iBAAmB,CAAA,CAAE,EAGvD,MAAM1T,EAAO,CAAE,EACf,OAAOwX,EAUP,SAASA,EAAQne,EAAQ,CAEvB,IAAIoe,EAAO,CACT,KAAM,OACN,SAAU,CAAE,CACb,EAED,MAAMne,EAAU,CACd,MAAO,CAACme,CAAI,EACZ,WAAY,CAAE,EACd,OAAA/C,EACA,MAAA5U,EACA,KAAAxD,EACA,OAAAgJ,EACA,OAAAoS,EACA,QAAAC,EACA,QAAAC,CACD,EAEKC,EAAY,CAAE,EACpB,IAAIte,EAAQ,GACZ,KAAO,EAAEA,EAAQF,EAAO,QAGtB,GACEA,EAAOE,CAAK,EAAE,CAAC,EAAE,OAAS,eAC1BF,EAAOE,CAAK,EAAE,CAAC,EAAE,OAAS,gBAE1B,GAAIF,EAAOE,CAAK,EAAE,CAAC,IAAM,QACvBse,EAAU,KAAKte,CAAK,MACf,CACL,MAAM2E,EAAO2Z,EAAU,IAAK,EAC5Bte,EAAQue,EAAYze,EAAQ6E,EAAM3E,CAAK,CACxC,CAIL,IADAA,EAAQ,GACD,EAAEA,EAAQF,EAAO,QAAQ,CAC9B,MAAM0e,EAAUrD,EAAOrb,EAAOE,CAAK,EAAE,CAAC,CAAC,EACnCgb,GAAI,KAAKwD,EAAS1e,EAAOE,CAAK,EAAE,CAAC,EAAE,IAAI,GACzCwe,EAAQ1e,EAAOE,CAAK,EAAE,CAAC,EAAE,IAAI,EAAE,KAC7B,OAAO,OACL,CACE,eAAgBF,EAAOE,CAAK,EAAE,CAAC,EAAE,cAClC,EACDD,CACD,EACDD,EAAOE,CAAK,EAAE,CAAC,CAChB,CAEJ,CAGD,GAAID,EAAQ,WAAW,OAAS,EAAG,CACjC,MAAM4E,EAAO5E,EAAQ,WAAWA,EAAQ,WAAW,OAAS,CAAC,GAC7C4E,EAAK,CAAC,GAAK8Z,IACnB,KAAK1e,EAAS,OAAW4E,EAAK,CAAC,CAAC,CACzC,CA0BD,IAvBAuZ,EAAK,SAAW,CACd,MAAOvc,GACL7B,EAAO,OAAS,EACZA,EAAO,CAAC,EAAE,CAAC,EAAE,MACb,CACE,KAAM,EACN,OAAQ,EACR,OAAQ,CACT,CACN,EACD,IAAK6B,GACH7B,EAAO,OAAS,EACZA,EAAOA,EAAO,OAAS,CAAC,EAAE,CAAC,EAAE,IAC7B,CACE,KAAM,EACN,OAAQ,EACR,OAAQ,CACT,CACN,CACF,EAGDE,EAAQ,GACD,EAAEA,EAAQmb,EAAO,WAAW,QACjC+C,EAAO/C,EAAO,WAAWnb,CAAK,EAAEke,CAAI,GAAKA,EAE3C,OAAOA,CACR,CAQD,SAASK,EAAYze,EAAQW,EAAOie,EAAQ,CAC1C,IAAI1e,EAAQS,EAAQ,EAChBke,EAAmB,GACnBC,EAAa,GAEbhD,GAEA/U,GAEAgY,GAEApM,GACJ,KAAO,EAAEzS,GAAS0e,GAAQ,CACxB,MAAM9X,EAAQ9G,EAAOE,CAAK,EAmC1B,GAjCE4G,EAAM,CAAC,EAAE,OAAS,iBAClBA,EAAM,CAAC,EAAE,OAAS,eAClBA,EAAM,CAAC,EAAE,OAAS,cAEdA,EAAM,CAAC,IAAM,QACf+X,IAEAA,IAEFlM,GAAW,QACF7L,EAAM,CAAC,EAAE,OAAS,kBACvBA,EAAM,CAAC,IAAM,UAEbgV,IACA,CAACnJ,IACD,CAACkM,GACD,CAACE,KAEDA,GAAsB7e,GAExByS,GAAW,QAGb7L,EAAM,CAAC,EAAE,OAAS,cAClBA,EAAM,CAAC,EAAE,OAAS,iBAClBA,EAAM,CAAC,EAAE,OAAS,kBAClBA,EAAM,CAAC,EAAE,OAAS,kBAClBA,EAAM,CAAC,EAAE,OAAS,6BAIlB6L,GAAW,QAGV,CAACkM,GACA/X,EAAM,CAAC,IAAM,SACbA,EAAM,CAAC,EAAE,OAAS,kBACnB+X,IAAqB,IACpB/X,EAAM,CAAC,IAAM,SACZA,EAAM,CAAC,EAAE,OAAS,iBACjBA,EAAM,CAAC,EAAE,OAAS,eACtB,CACA,GAAIgV,GAAU,CACZ,IAAIkD,GAAY9e,EAEhB,IADA6G,GAAY,OACLiY,MAAa,CAClB,MAAMC,GAAYjf,EAAOgf,EAAS,EAClC,GACEC,GAAU,CAAC,EAAE,OAAS,cACtBA,GAAU,CAAC,EAAE,OAAS,kBACtB,CACA,GAAIA,GAAU,CAAC,IAAM,OAAQ,SACzBlY,KACF/G,EAAO+G,EAAS,EAAE,CAAC,EAAE,KAAO,kBAC5B+X,EAAa,IAEfG,GAAU,CAAC,EAAE,KAAO,aACpBlY,GAAYiY,EAC1B,SACc,EAAAC,GAAU,CAAC,EAAE,OAAS,cACtBA,GAAU,CAAC,EAAE,OAAS,oBACtBA,GAAU,CAAC,EAAE,OAAS,8BACtBA,GAAU,CAAC,EAAE,OAAS,oBACtBA,GAAU,CAAC,EAAE,OAAS,kBAItB,KAEH,CAECF,KACC,CAAChY,IAAagY,GAAsBhY,MAErC+U,GAAS,QAAU,IAIrBA,GAAS,IAAM,OAAO,OACpB,CAAE,EACF/U,GAAY/G,EAAO+G,EAAS,EAAE,CAAC,EAAE,MAAQD,EAAM,CAAC,EAAE,GACnD,EACD9G,EAAO,OAAO+G,IAAa7G,EAAO,EAAG,CAAC,OAAQ4b,GAAUhV,EAAM,CAAC,CAAC,CAAC,EACjE5G,IACA0e,GACD,CAGG9X,EAAM,CAAC,EAAE,OAAS,mBACpBgV,GAAW,CACT,KAAM,WACN,QAAS,GACT,MAAO,OAAO,OAAO,CAAA,EAAIhV,EAAM,CAAC,EAAE,KAAK,EAEvC,IAAK,MACN,EAED9G,EAAO,OAAOE,EAAO,EAAG,CAAC,QAAS4b,GAAUhV,EAAM,CAAC,CAAC,CAAC,EACrD5G,IACA0e,IACAG,GAAsB,OACtBpM,GAAW,GAEd,CACF,CACD,OAAA3S,EAAOW,CAAK,EAAE,CAAC,EAAE,QAAUme,EACpBF,CACR,CAcD,SAASN,EAAQY,EAAKlb,EAAO,CAC3B2C,EAAKuY,CAAG,EAAIlb,CACb,CAYD,SAASua,EAAQW,EAAK,CACpB,OAAOvY,EAAKuY,CAAG,CAChB,CAYD,SAAS5D,EAAOd,EAAQ2E,EAAK,CAC3B,OAAOhf,EAOP,SAASA,EAAKuB,EAAO,CACnB+E,EAAM,KAAK,KAAM+T,EAAO9Y,CAAK,EAAGA,CAAK,EACjCyd,GAAKA,EAAI,KAAK,KAAMzd,CAAK,CAC9B,CACF,CAMD,SAASuK,GAAS,CAChB,KAAK,MAAM,KAAK,CACd,KAAM,WACN,SAAU,CAAE,CAClB,CAAK,CACF,CAgBD,SAASxF,EAAM2Y,EAAM1d,EAAO2d,EAAc,CAGxC,OAFe,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAExC,SAAS,KAAKD,CAAI,EACzB,KAAK,MAAM,KAAKA,CAAI,EACpB,KAAK,WAAW,KAAK,CAAC1d,EAAO2d,CAAY,CAAC,EAE1CD,EAAK,SAAW,CACd,MAAOvd,GAAMH,EAAM,KAAK,CACzB,EACM0d,CACR,CAUD,SAASjD,EAAOgD,EAAK,CACnB,OAAOvd,EAOP,SAASA,EAAMF,EAAO,CAChByd,GAAKA,EAAI,KAAK,KAAMzd,CAAK,EAC7BuB,EAAK,KAAK,KAAMvB,CAAK,CACtB,CACF,CAYD,SAASuB,EAAKvB,EAAO4d,EAAa,CAChC,MAAMF,EAAO,KAAK,MAAM,IAAK,EACvBjf,EAAO,KAAK,WAAW,IAAK,EAClC,GAAKA,EAWMA,EAAK,CAAC,EAAE,OAASuB,EAAM,OAC5B4d,EACFA,EAAY,KAAK,KAAM5d,EAAOvB,EAAK,CAAC,CAAC,GAErBA,EAAK,CAAC,GAAKwe,IACnB,KAAK,KAAMjd,EAAOvB,EAAK,CAAC,CAAC,OAfnC,OAAM,IAAI,MACR,iBACEuB,EAAM,KACN,MACA6d,GAAkB,CAChB,MAAO7d,EAAM,MACb,IAAKA,EAAM,GACvB,CAAW,EACD,kBACH,EASH,OAAA0d,EAAK,SAAS,IAAMvd,GAAMH,EAAM,GAAG,EAC5B0d,CACR,CAMD,SAASf,GAAS,CAChB,OAAOmB,GAAS,KAAK,MAAM,IAAG,CAAE,CACjC,CAUD,SAASxD,GAAqB,CAC5BsC,EAAQ,8BAA+B,EAAI,CAC5C,CAMD,SAASvC,EAAqBra,EAAO,CACnC,GAAI6c,EAAQ,6BAA6B,EAAG,CAC1C,MAAMkB,EAAW,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EACjDA,EAAS,MAAQ,OAAO,SAAS,KAAK,eAAe/d,CAAK,EAAG,EAAE,EAC/D4c,EAAQ,6BAA6B,CACtC,CACF,CAMD,SAAS1B,GAA4B,CACnC,MAAMjW,EAAO,KAAK,OAAQ,EACpByY,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,KAAOzY,CACb,CAMD,SAASkW,GAA4B,CACnC,MAAMlW,EAAO,KAAK,OAAQ,EACpByY,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,KAAOzY,CACb,CAMD,SAASgW,GAAwB,CAE3B4B,EAAQ,gBAAgB,IAC5B,KAAK,OAAQ,EACbD,EAAQ,iBAAkB,EAAI,EAC/B,CAMD,SAAS5B,GAAmB,CAC1B,MAAM/V,EAAO,KAAK,OAAQ,EACpByY,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,MAAQzY,EAAK,QAAQ,2BAA4B,EAAE,EACxD2X,EAAQ,gBAAgB,CACzB,CAMD,SAASxB,GAAqB,CAC5B,MAAMnW,EAAO,KAAK,OAAQ,EACpByY,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,MAAQzY,EAAK,QAAQ,eAAgB,EAAE,CAC7C,CAMD,SAASsW,EAA4Bvb,EAAO,CAC1C,MAAM2O,EAAQ,KAAK,OAAQ,EACrB+O,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,MAAQ/O,EACb+O,EAAK,WAAa3U,GAChB,KAAK,eAAe/I,CAAK,CAC1B,EAAC,YAAa,CAChB,CAMD,SAASwb,GAA8B,CACrC,MAAMvW,EAAO,KAAK,OAAQ,EACpByY,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,MAAQzY,CACd,CAMD,SAASqW,GAAoC,CAC3C,MAAMrW,EAAO,KAAK,OAAQ,EACpByY,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,IAAMzY,CACZ,CAMD,SAASyV,EAAyB1a,EAAO,CACvC,MAAM0d,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7C,GAAI,CAACA,EAAK,MAAO,CACf,MAAMM,EAAQ,KAAK,eAAehe,CAAK,EAAE,OACzC0d,EAAK,MAAQM,CACd,CACF,CAMD,SAASzB,GAA0B,CACjCK,EAAQ,+BAAgC,EAAI,CAC7C,CAMD,SAASN,EAAgCtc,EAAO,CAC9C,MAAM0d,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,MAAQ,KAAK,eAAe1d,CAAK,EAAE,WAAW,CAAC,IAAM,GAAK,EAAI,CACpE,CAMD,SAASqc,GAAsB,CAC7BO,EAAQ,8BAA8B,CACvC,CAOD,SAAS9C,EAAY9Z,EAAO,CAC1B,MAAM0d,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7C,IAAIva,EAAOua,EAAK,SAASA,EAAK,SAAS,OAAS,CAAC,GAC7C,CAACva,GAAQA,EAAK,OAAS,UAEzBA,EAAOxE,GAAM,EAEbwE,EAAK,SAAW,CACd,MAAOhD,GAAMH,EAAM,KAAK,CACzB,EAED0d,EAAK,SAAS,KAAKva,CAAI,GAEzB,KAAK,MAAM,KAAKA,CAAI,CACrB,CAOD,SAAS0X,EAAW7a,EAAO,CACzB,MAAMmD,EAAO,KAAK,MAAM,IAAK,EAC7BA,EAAK,OAAS,KAAK,eAAenD,CAAK,EACvCmD,EAAK,SAAS,IAAMhD,GAAMH,EAAM,GAAG,CACpC,CAOD,SAAS+b,EAAiB/b,EAAO,CAC/B,MAAMzB,EAAU,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAEhD,GAAIse,EAAQ,aAAa,EAAG,CAC1B,MAAM1Z,EAAO5E,EAAQ,SAASA,EAAQ,SAAS,OAAS,CAAC,EACzD4E,EAAK,SAAS,IAAMhD,GAAMH,EAAM,GAAG,EACnC4c,EAAQ,aAAa,EACrB,MACD,CAEC,CAACC,EAAQ,8BAA8B,GACvClD,EAAO,eAAe,SAASpb,EAAQ,IAAI,IAE3Cub,EAAY,KAAK,KAAM9Z,CAAK,EAC5B6a,EAAW,KAAK,KAAM7a,CAAK,EAE9B,CAOD,SAASyb,GAAkB,CACzBmB,EAAQ,cAAe,EAAI,CAC5B,CAOD,SAASlB,GAAiB,CACxB,MAAMzW,EAAO,KAAK,OAAQ,EACpByY,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,MAAQzY,CACd,CAOD,SAAS0W,GAAiB,CACxB,MAAM1W,EAAO,KAAK,OAAQ,EACpByY,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,MAAQzY,CACd,CAOD,SAASoW,GAAiB,CACxB,MAAMpW,EAAO,KAAK,OAAQ,EACpByY,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,MAAQzY,CACd,CAOD,SAAS+W,GAAa,CACpB,MAAM0B,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAI7C,GAAIb,EAAQ,aAAa,EAAG,CAE1B,MAAMoB,EAAgBpB,EAAQ,eAAe,GAAK,WAClDa,EAAK,MAAQ,YAEbA,EAAK,cAAgBO,EAErB,OAAOP,EAAK,IACZ,OAAOA,EAAK,KAClB,MAEM,OAAOA,EAAK,WAEZ,OAAOA,EAAK,MAEdd,EAAQ,eAAe,CACxB,CAOD,SAAShB,IAAc,CACrB,MAAM8B,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAI7C,GAAIb,EAAQ,aAAa,EAAG,CAE1B,MAAMoB,EAAgBpB,EAAQ,eAAe,GAAK,WAClDa,EAAK,MAAQ,YAEbA,EAAK,cAAgBO,EAErB,OAAOP,EAAK,IACZ,OAAOA,EAAK,KAClB,MAEM,OAAOA,EAAK,WAEZ,OAAOA,EAAK,MAEdd,EAAQ,eAAe,CACxB,CAOD,SAASd,EAAgB9b,EAAO,CAC9B,MAAM+T,EAAS,KAAK,eAAe/T,CAAK,EAClC+d,EAAW,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAGjDA,EAAS,MAAQG,GAAanK,CAAM,EAEpCgK,EAAS,WAAahV,GAAoBgL,CAAM,EAAE,YAAa,CAChE,CAOD,SAAS8H,GAAc,CACrB,MAAMsC,EAAW,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC3C7b,EAAQ,KAAK,OAAQ,EACrBob,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAG7C,GADAd,EAAQ,cAAe,EAAI,EACvBc,EAAK,OAAS,OAAQ,CAGxB,MAAMU,EAAWD,EAAS,SAC1BT,EAAK,SAAWU,CACtB,MACMV,EAAK,IAAMpb,CAEd,CAOD,SAAS4Z,IAAkC,CACzC,MAAMjX,EAAO,KAAK,OAAQ,EACpByY,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,IAAMzY,CACZ,CAOD,SAASkX,GAA4B,CACnC,MAAMlX,EAAO,KAAK,OAAQ,EACpByY,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,MAAQzY,CACd,CAOD,SAASmX,GAAiB,CACxBQ,EAAQ,aAAa,CACtB,CAOD,SAASrC,IAAmB,CAC1BqC,EAAQ,gBAAiB,WAAW,CACrC,CAOD,SAASX,EAAsBjc,EAAO,CACpC,MAAM2O,EAAQ,KAAK,OAAQ,EACrB+O,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAG7CA,EAAK,MAAQ/O,EAEb+O,EAAK,WAAa3U,GAChB,KAAK,eAAe/I,CAAK,CAC1B,EAAC,YAAa,EACf4c,EAAQ,gBAAiB,MAAM,CAChC,CAOD,SAAS9B,GAA+B9a,EAAO,CAC7C4c,EAAQ,yBAA0B5c,EAAM,IAAI,CAC7C,CAMD,SAAS+a,GAA8B/a,EAAO,CAC5C,MAAMiF,EAAO,KAAK,eAAejF,CAAK,EAChCmH,EAAO0V,EAAQ,wBAAwB,EAE7C,IAAIva,EACA6E,GACF7E,EAAQ+b,GACNpZ,EACAkC,IAAS,kCAAoC,GAAK,EACnD,EACDyV,EAAQ,wBAAwB,GAGhCta,EADeG,GAA8BwC,CAAI,EAGnD,MAAM9B,EAAO,KAAK,MAAM,IAAK,EAC7BA,EAAK,OAASb,EACda,EAAK,SAAS,IAAMhD,GAAMH,EAAM,GAAG,CACpC,CAMD,SAAS4a,GAAuB5a,EAAO,CACrC6a,EAAW,KAAK,KAAM7a,CAAK,EAC3B,MAAM0d,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,IAAM,KAAK,eAAe1d,CAAK,CACrC,CAMD,SAAS2a,GAAoB3a,EAAO,CAClC6a,EAAW,KAAK,KAAM7a,CAAK,EAC3B,MAAM0d,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CA,EAAK,IAAM,UAAY,KAAK,eAAe1d,CAAK,CACjD,CAOD,SAASoB,IAAa,CACpB,MAAO,CACL,KAAM,aACN,SAAU,CAAE,CACb,CACF,CAGD,SAAS2Y,IAAW,CAClB,MAAO,CACL,KAAM,OACN,KAAM,KACN,KAAM,KACN,MAAO,EACR,CACF,CAGD,SAASrV,IAAW,CAClB,MAAO,CACL,KAAM,aACN,MAAO,EACR,CACF,CAGD,SAAS+D,IAAa,CACpB,MAAO,CACL,KAAM,aACN,WAAY,GACZ,MAAO,KACP,MAAO,KACP,IAAK,EACN,CACF,CAGD,SAASuR,IAAW,CAClB,MAAO,CACL,KAAM,WACN,SAAU,CAAE,CACb,CACF,CAGD,SAAStI,IAAU,CAEjB,MAAO,CACL,KAAM,UACN,MAAO,OACP,SAAU,CAAE,CACb,CACF,CAGD,SAASuI,IAAY,CACnB,MAAO,CACL,KAAM,OACP,CACF,CAGD,SAASC,IAAO,CACd,MAAO,CACL,KAAM,OACN,MAAO,EACR,CACF,CAGD,SAASC,IAAQ,CACf,MAAO,CACL,KAAM,QACN,MAAO,KACP,IAAK,GACL,IAAK,IACN,CACF,CAGD,SAASN,IAAO,CACd,MAAO,CACL,KAAM,OACN,MAAO,KACP,IAAK,GACL,SAAU,CAAE,CACb,CACF,CAMD,SAAStJ,GAAKvQ,EAAO,CACnB,MAAO,CACL,KAAM,OACN,QAASA,EAAM,OAAS,cACxB,MAAO,KACP,OAAQA,EAAM,QACd,SAAU,CAAE,CACb,CACF,CAMD,SAASoa,GAASpa,EAAO,CACvB,MAAO,CACL,KAAM,WACN,OAAQA,EAAM,QACd,QAAS,KACT,SAAU,CAAE,CACb,CACF,CAGD,SAAS2R,IAAY,CACnB,MAAO,CACL,KAAM,YACN,SAAU,CAAE,CACb,CACF,CAGD,SAAS6I,IAAS,CAChB,MAAO,CACL,KAAM,SACN,SAAU,CAAE,CACb,CACF,CAGD,SAAS7b,IAAO,CACd,MAAO,CACL,KAAM,OACN,MAAO,EACR,CACF,CAGD,SAASyR,IAAgB,CACvB,MAAO,CACL,KAAM,eACP,CACF,CACH,CAUA,SAASjQ,GAAMme,EAAG,CAChB,MAAO,CACL,KAAMA,EAAE,KACR,OAAQA,EAAE,OACV,OAAQA,EAAE,MACX,CACH,CAOA,SAAS9B,GAAU+B,EAAUC,EAAY,CACvC,IAAIhgB,EAAQ,GACZ,KAAO,EAAEA,EAAQggB,EAAW,QAAQ,CAClC,MAAMlc,EAAQkc,EAAWhgB,CAAK,EAC1B,MAAM,QAAQ8D,CAAK,EACrBka,GAAU+B,EAAUjc,CAAK,EAEzBmc,GAAUF,EAAUjc,CAAK,CAE5B,CACH,CAOA,SAASmc,GAAUF,EAAUE,EAAW,CAEtC,IAAIjB,EACJ,IAAKA,KAAOiB,EACV,GAAIjF,GAAI,KAAKiF,EAAWjB,CAAG,GACzB,GAAIA,IAAQ,iBAAkB,CAC5B,MAAMkB,EAAQD,EAAUjB,CAAG,EACvBkB,GACFH,EAASf,CAAG,EAAE,KAAK,GAAGkB,CAAK,CAErC,SAAiBlB,IAAQ,aAAc,CAC/B,MAAMkB,EAAQD,EAAUjB,CAAG,EACvBkB,GACFH,EAASf,CAAG,EAAE,KAAK,GAAGkB,CAAK,CAE9B,SAAUlB,IAAQ,SAAWA,IAAQ,OAAQ,CAC5C,MAAMkB,EAAQD,EAAUjB,CAAG,EACvBkB,GACF,OAAO,OAAOH,EAASf,CAAG,EAAGkB,CAAK,CAErC,EAGP,CAGA,SAASzB,GAAe0B,EAAMD,EAAO,CACnC,MAAIC,EACI,IAAI,MACR,iBACEA,EAAK,KACL,MACAd,GAAkB,CAChB,MAAOc,EAAK,MACZ,IAAKA,EAAK,GACpB,CAAS,EACD,0BACAD,EAAM,KACN,MACAb,GAAkB,CAChB,MAAOa,EAAM,MACb,IAAKA,EAAM,GACrB,CAAS,EACD,WACH,EAEK,IAAI,MACR,oCACEA,EAAM,KACN,MACAb,GAAkB,CAChB,MAAOa,EAAM,MACb,IAAKA,EAAM,GACrB,CAAS,EACD,iBACH,CAEL,CC31Ce,SAASE,GAAYjG,EAAS,CAkB3C,OAAO,OAAO,KAAM,CAAC,OAhBLkG,GAAQ,CAEtB,MAAMC,EAAmC,KAAK,KAAK,UAAU,EAE7D,OAAOrF,GACLoF,EACA,OAAO,OAAO,GAAIC,EAAUnG,EAAS,CAInC,WAAY,KAAK,KAAK,qBAAqB,GAAK,CAAE,EAClD,gBAAiB,KAAK,KAAK,wBAAwB,GAAK,CAAE,CAClE,CAAO,CACF,CACF,CAEkC,CAAC,CACtC","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37]}