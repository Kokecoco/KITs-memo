{"version":3,"file":"index-DJ9TW23k.js","sources":["../../node_modules/mdast-util-to-markdown/lib/configure.js","../../node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","../../node_modules/mdast-util-to-markdown/lib/handle/break.js","../../node_modules/longest-streak/index.js","../../node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","../../node_modules/mdast-util-to-markdown/lib/util/check-fence.js","../../node_modules/mdast-util-to-markdown/lib/handle/code.js","../../node_modules/mdast-util-to-markdown/lib/util/check-quote.js","../../node_modules/mdast-util-to-markdown/lib/handle/definition.js","../../node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","../../node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","../../node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","../../node_modules/mdast-util-to-markdown/lib/handle/heading.js","../../node_modules/mdast-util-to-markdown/lib/handle/html.js","../../node_modules/mdast-util-to-markdown/lib/handle/image.js","../../node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","../../node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","../../node_modules/mdast-util-to-markdown/lib/handle/link.js","../../node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","../../node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","../../node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","../../node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered-other.js","../../node_modules/mdast-util-to-markdown/lib/util/check-rule.js","../../node_modules/mdast-util-to-markdown/lib/handle/list.js","../../node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","../../node_modules/mdast-util-to-markdown/lib/handle/root.js","../../node_modules/mdast-util-to-markdown/lib/util/check-strong.js","../../node_modules/mdast-util-to-markdown/lib/handle/strong.js","../../node_modules/mdast-util-to-markdown/lib/handle/text.js","../../node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js","../../node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","../../node_modules/mdast-util-to-markdown/lib/handle/index.js","../../node_modules/mdast-util-to-markdown/lib/join.js","../../node_modules/mdast-util-to-markdown/lib/unsafe.js","../../node_modules/mdast-util-to-markdown/lib/index.js","../../node_modules/remark-stringify/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('./types.js').Options} Options\n * @typedef {import('./types.js').State} State\n */\n\n/**\n * @param {State} base\n * @param {Options} extension\n * @returns {State}\n */\nexport function configure(base, extension) {\n  let index = -1\n  /** @type {keyof Options} */\n  let key\n\n  // First do subextensions.\n  if (extension.extensions) {\n    while (++index < extension.extensions.length) {\n      configure(base, extension.extensions[index])\n    }\n  }\n\n  for (key in extension) {\n    if (key === 'extensions') {\n      // Empty.\n    } else if (key === 'unsafe' || key === 'join') {\n      /* c8 ignore next 2 */\n      // @ts-expect-error: hush.\n      base[key] = [...(base[key] || []), ...(extension[key] || [])]\n    } else if (key === 'handlers') {\n      base[key] = Object.assign(base[key], extension[key] || {})\n    } else {\n      // @ts-expect-error: hush.\n      base.options[key] = extension[key]\n    }\n  }\n\n  return base\n}\n","/**\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n */\n\n/**\n * @param {Blockquote} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function blockquote(node, _, state, info) {\n  const exit = state.enter('blockquote')\n  const tracker = state.createTracker(info)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n","/**\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @param {Break} _\n * @param {Parent | undefined} _1\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function hardBreak(_, _1, state, info) {\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      state.unsafe[index].character === '\\n' &&\n      patternInScope(state.stack, state.unsafe[index])\n    ) {\n      return /[ \\t]/.test(info.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n","/**\n * Get the count of the longest repeating streak of `substring` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} substring\n *   Substring to look for, typically one character.\n * @returns {number}\n *   Count of most frequent adjacent `substring`s in `value`.\n */\nexport function longestStreak(value, substring) {\n  const source = String(value)\n  let index = source.indexOf(substring)\n  let expected = index\n  let count = 0\n  let max = 0\n\n  if (typeof substring !== 'string') {\n    throw new TypeError('Expected substring')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + substring.length\n    index = source.indexOf(substring, expected)\n  }\n\n  return max\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    !state.options.fences &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['fence'], null | undefined>}\n */\nexport function checkFence(state) {\n  const marker = state.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Map} Map\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['quote'], null | undefined>}\n */\nexport function checkQuote(state) {\n  const marker = state.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\n/**\n * @param {Definition} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function definition(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('definition')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['emphasis'], null | undefined>}\n */\nexport function checkEmphasis(state) {\n  const marker = state.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\n\nemphasis.peek = emphasisPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Emphasis} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parent | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../types.js').State} State\n */\n\nimport {visit, EXIT} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, (node) => {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value =\n      '&#x' +\n      value.charCodeAt(0).toString(16).toUpperCase() +\n      ';' +\n      value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n","/**\n * @typedef {import('mdast').HTML} HTML\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @param {HTML} node\n * @returns {string}\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @returns {string}\n */\nfunction htmlPeek() {\n  return '<'\n}\n","/**\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\nimage.peek = imagePeek\n\n/**\n * @param {Image} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('image')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  value += tracker.move(\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../types.js').State} State\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Exit} Exit\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\n\nlink.peek = linkPeek\n\n/**\n * @param {Link} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = state.createTracker(info)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack\n    state.stack = []\n    exit = state.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    state.stack = stack\n    return value\n  }\n\n  exit = state.enter('link')\n  subexit = state.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @param {Link} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '['\n}\n","/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBulletOther(state) {\n  const bullet = checkBullet(state)\n  const bulletOther = state.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\nimport {checkBulletOrdered} from './check-bullet-ordered.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrderedOther(state) {\n  const bulletOrdered = checkBulletOrdered(state)\n  const bulletOrderedOther = state.options.bulletOrderedOther\n\n  if (!bulletOrderedOther) {\n    return bulletOrdered === '.' ? ')' : '.'\n  }\n\n  if (bulletOrderedOther !== '.' && bulletOrderedOther !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOrderedOther +\n        '` for `options.bulletOrderedOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOrderedOther === bulletOrdered) {\n    throw new Error(\n      'Expected `bulletOrdered` (`' +\n        bulletOrdered +\n        '`) and `bulletOrderedOther` (`' +\n        bulletOrderedOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOrderedOther\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['rule'], null | undefined>}\n */\nexport function checkRule(state) {\n  const marker = state.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').List} List\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkBulletOrderedOther} from '../util/check-bullet-ordered-other.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {List} node\n * @param {Parent | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list')\n  const bulletCurrent = state.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? checkBulletOrderedOther(state)\n    : checkBulletOther(state)\n  const bulletLastUsed = state.bulletLastUsed\n  let useDifferentMarker = false\n\n  if (\n    parent &&\n    // Explicit `other` set.\n    (node.ordered\n      ? state.options.bulletOrderedOther\n      : state.options.bulletOther) &&\n    bulletLastUsed &&\n    bullet === bulletLastUsed\n  ) {\n    useDifferentMarker = true\n  }\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      state.stack[state.stack.length - 1] === 'list' &&\n      state.stack[state.stack.length - 2] === 'listItem' &&\n      state.stack[state.stack.length - 3] === 'list' &&\n      state.stack[state.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 &&\n      state.indexStack[state.indexStack.length - 2] === 0 &&\n      state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  state.bulletCurrent = bullet\n  const value = state.containerFlow(node, info)\n  state.bulletLastUsed = bullet\n  state.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n","/**\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\n/**\n * @param {Paragraph} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function paragraph(node, _, state, info) {\n  const exit = state.enter('paragraph')\n  const subexit = state.enter('phrasing')\n  const value = state.containerPhrasing(node, info)\n  subexit()\n  exit()\n  return value\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Root} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function root(node, _, state, info) {\n  // Note: `html` nodes are ambiguous.\n  const hasPhrasing = node.children.some((d) => phrasing(d))\n  const fn = hasPhrasing ? state.containerPhrasing : state.containerFlow\n  // @ts-expect-error: `root`s are supposed to have one type of content\n  return fn.call(state, node, info)\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['strong'], null | undefined>}\n */\nexport function checkStrong(state) {\n  const marker = state.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkStrong} from '../util/check-strong.js'\n\nstrong.peek = strongPeek\n\n// To do: there are cases where emphasis cannot “form” depending on the\n// previous or next character of sequences.\n// There’s no way around that though, except for injecting zero-width stuff.\n// Do we need to safeguard against that?\n/**\n * @param {Strong} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state)\n  const exit = state.enter('strong')\n  const tracker = state.createTracker(info)\n  let value = tracker.move(marker + marker)\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: marker,\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(marker + marker)\n  exit()\n  return value\n}\n\n/**\n * @param {Strong} _\n * @param {Parent | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*'\n}\n","/**\n * @typedef {import('mdast').Text} Text\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\n/**\n * @param {Text} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function text(node, _, state, info) {\n  return state.safe(node.value, info)\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n","/**\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {ThematicBreak} _\n * @param {Parent | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nexport function thematicBreak(_, _1, state) {\n  const value = (\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(state))\n\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default (CommonMark) handlers.\n */\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n","/**\n * @typedef {import('./types.js').Join} Join\n */\n\nimport {formatCodeAsIndented} from './util/format-code-as-indented.js'\nimport {formatHeadingAsSetext} from './util/format-heading-as-setext.js'\n\n/** @type {Array<Join>} */\nexport const join = [joinDefaults]\n\n/** @type {Join} */\nfunction joinDefaults(left, right, parent, state) {\n  // Indented code after list or another indented code.\n  if (\n    right.type === 'code' &&\n    formatCodeAsIndented(right, state) &&\n    (left.type === 'list' ||\n      (left.type === right.type && formatCodeAsIndented(left, state)))\n  ) {\n    return false\n  }\n\n  // Two lists with the same marker.\n  if (\n    left.type === 'list' &&\n    left.type === right.type &&\n    Boolean(left.ordered) === Boolean(right.ordered) &&\n    !(left.ordered\n      ? state.options.bulletOrderedOther\n      : state.options.bulletOther)\n  ) {\n    return false\n  }\n\n  // Join children of a list or an item.\n  // In which case, `parent` has a `spread` field.\n  if ('spread' in parent && typeof parent.spread === 'boolean') {\n    if (\n      left.type === 'paragraph' &&\n      // Two paragraphs.\n      (left.type === right.type ||\n        right.type === 'definition' ||\n        // Paragraph followed by a setext heading.\n        (right.type === 'heading' && formatHeadingAsSetext(right, state)))\n    ) {\n      return\n    }\n\n    return parent.spread ? 1 : 0\n  }\n}\n","/**\n * @typedef {import('./types.js').Unsafe} Unsafe\n * @typedef {import('./types.js').ConstructName} ConstructName\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain things like attention (emphasis, strong), images, or links.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * @type {Array<ConstructName>}\n */\nconst fullPhrasingSpans = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\n/** @type {Array<Unsafe>} */\nexport const unsafe = [\n  {character: '\\t', after: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {character: '\\t', before: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {\n    character: '\\t',\n    inConstruct: ['codeFencedLangGraveAccent', 'codeFencedLangTilde']\n  },\n  {\n    character: '\\r',\n    inConstruct: [\n      'codeFencedLangGraveAccent',\n      'codeFencedLangTilde',\n      'codeFencedMetaGraveAccent',\n      'codeFencedMetaTilde',\n      'destinationLiteral',\n      'headingAtx'\n    ]\n  },\n  {\n    character: '\\n',\n    inConstruct: [\n      'codeFencedLangGraveAccent',\n      'codeFencedLangTilde',\n      'codeFencedMetaGraveAccent',\n      'codeFencedMetaTilde',\n      'destinationLiteral',\n      'headingAtx'\n    ]\n  },\n  {character: ' ', after: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {character: ' ', before: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {\n    character: ' ',\n    inConstruct: ['codeFencedLangGraveAccent', 'codeFencedLangTilde']\n  },\n  // An exclamation mark can start an image, if it is followed by a link or\n  // a link reference.\n  {\n    character: '!',\n    after: '\\\\[',\n    inConstruct: 'phrasing',\n    notInConstruct: fullPhrasingSpans\n  },\n  // A quote can break out of a title.\n  {character: '\"', inConstruct: 'titleQuote'},\n  // A number sign could start an ATX heading if it starts a line.\n  {atBreak: true, character: '#'},\n  {character: '#', inConstruct: 'headingAtx', after: '(?:[\\r\\n]|$)'},\n  // Dollar sign and percentage are not used in markdown.\n  // An ampersand could start a character reference.\n  {character: '&', after: '[#A-Za-z]', inConstruct: 'phrasing'},\n  // An apostrophe can break out of a title.\n  {character: \"'\", inConstruct: 'titleApostrophe'},\n  // A left paren could break out of a destination raw.\n  {character: '(', inConstruct: 'destinationRaw'},\n  // A left paren followed by `]` could make something into a link or image.\n  {\n    before: '\\\\]',\n    character: '(',\n    inConstruct: 'phrasing',\n    notInConstruct: fullPhrasingSpans\n  },\n  // A right paren could start a list item or break out of a destination\n  // raw.\n  {atBreak: true, before: '\\\\d+', character: ')'},\n  {character: ')', inConstruct: 'destinationRaw'},\n  // An asterisk can start thematic breaks, list items, emphasis, strong.\n  {atBreak: true, character: '*', after: '(?:[ \\t\\r\\n*])'},\n  {character: '*', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  // A plus sign could start a list item.\n  {atBreak: true, character: '+', after: '(?:[ \\t\\r\\n])'},\n  // A dash can start thematic breaks, list items, and setext heading\n  // underlines.\n  {atBreak: true, character: '-', after: '(?:[ \\t\\r\\n-])'},\n  // A dot could start a list item.\n  {atBreak: true, before: '\\\\d+', character: '.', after: '(?:[ \\t\\r\\n]|$)'},\n  // Slash, colon, and semicolon are not used in markdown for constructs.\n  // A less than can start html (flow or text) or an autolink.\n  // HTML could start with an exclamation mark (declaration, cdata, comment),\n  // slash (closing tag), question mark (instruction), or a letter (tag).\n  // An autolink also starts with a letter.\n  // Finally, it could break out of a destination literal.\n  {atBreak: true, character: '<', after: '[!/?A-Za-z]'},\n  {\n    character: '<',\n    after: '[!/?A-Za-z]',\n    inConstruct: 'phrasing',\n    notInConstruct: fullPhrasingSpans\n  },\n  {character: '<', inConstruct: 'destinationLiteral'},\n  // An equals to can start setext heading underlines.\n  {atBreak: true, character: '='},\n  // A greater than can start block quotes and it can break out of a\n  // destination literal.\n  {atBreak: true, character: '>'},\n  {character: '>', inConstruct: 'destinationLiteral'},\n  // Question mark and at sign are not used in markdown for constructs.\n  // A left bracket can start definitions, references, labels,\n  {atBreak: true, character: '['},\n  {character: '[', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  {character: '[', inConstruct: ['label', 'reference']},\n  // A backslash can start an escape (when followed by punctuation) or a\n  // hard break (when followed by an eol).\n  // Note: typical escapes are handled in `safe`!\n  {character: '\\\\', after: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  // A right bracket can exit labels.\n  {character: ']', inConstruct: ['label', 'reference']},\n  // Caret is not used in markdown for constructs.\n  // An underscore can start emphasis, strong, or a thematic break.\n  {atBreak: true, character: '_'},\n  {character: '_', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  // A grave accent can start code (fenced or text), or it can break out of\n  // a grave accent code fence.\n  {atBreak: true, character: '`'},\n  {\n    character: '`',\n    inConstruct: ['codeFencedLangGraveAccent', 'codeFencedMetaGraveAccent']\n  },\n  {character: '`', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  // Left brace, vertical bar, right brace are not used in markdown for\n  // constructs.\n  // A tilde can start code (fenced).\n  {atBreak: true, character: '~'}\n]\n","/**\n * @typedef {import('./types.js').Enter} Enter\n * @typedef {import('./types.js').Info} Info\n * @typedef {import('./types.js').Join} Join\n * @typedef {import('./types.js').FlowContent} FlowContent\n * @typedef {import('./types.js').Node} Node\n * @typedef {import('./types.js').Options} Options\n * @typedef {import('./types.js').Parent} Parent\n * @typedef {import('./types.js').PhrasingContent} PhrasingContent\n * @typedef {import('./types.js').SafeConfig} SafeConfig\n * @typedef {import('./types.js').State} State\n * @typedef {import('./types.js').TrackFields} TrackFields\n */\n\nimport {zwitch} from 'zwitch'\nimport {configure} from './configure.js'\nimport {handle as handlers} from './handle/index.js'\nimport {join} from './join.js'\nimport {unsafe} from './unsafe.js'\nimport {association} from './util/association.js'\nimport {containerPhrasing} from './util/container-phrasing.js'\nimport {containerFlow} from './util/container-flow.js'\nimport {indentLines} from './util/indent-lines.js'\nimport {safe} from './util/safe.js'\nimport {track} from './util/track.js'\n\n/**\n * Turn an mdast syntax tree into markdown.\n *\n * @param {Node} tree\n *   Tree to serialize.\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized markdown representing `tree`.\n */\nexport function toMarkdown(tree, options = {}) {\n  /** @type {State} */\n  const state = {\n    enter,\n    indentLines,\n    associationId: association,\n    containerPhrasing: containerPhrasingBound,\n    containerFlow: containerFlowBound,\n    createTracker: track,\n    safe: safeBound,\n    stack: [],\n    unsafe: [],\n    join: [],\n    // @ts-expect-error: we’ll fill it next.\n    handlers: {},\n    options: {},\n    indexStack: [],\n    // @ts-expect-error: we’ll add `handle` later.\n    handle: undefined\n  }\n\n  configure(state, {unsafe, join, handlers})\n  configure(state, options)\n\n  if (state.options.tightDefinitions) {\n    configure(state, {join: [joinDefinition]})\n  }\n\n  state.handle = zwitch('type', {\n    invalid,\n    unknown,\n    handlers: state.handlers\n  })\n\n  let result = state.handle(tree, undefined, state, {\n    before: '\\n',\n    after: '\\n',\n    now: {line: 1, column: 1},\n    lineShift: 0\n  })\n\n  if (\n    result &&\n    result.charCodeAt(result.length - 1) !== 10 &&\n    result.charCodeAt(result.length - 1) !== 13\n  ) {\n    result += '\\n'\n  }\n\n  return result\n\n  /** @type {Enter} */\n  function enter(name) {\n    state.stack.push(name)\n    return exit\n\n    function exit() {\n      state.stack.pop()\n    }\n  }\n}\n\n/**\n * @param {unknown} value\n * @returns {never}\n */\nfunction invalid(value) {\n  throw new Error('Cannot handle value `' + value + '`, expected node')\n}\n\n/**\n * @param {unknown} node\n * @returns {never}\n */\nfunction unknown(node) {\n  // @ts-expect-error: fine.\n  throw new Error('Cannot handle unknown node `' + node.type + '`')\n}\n\n/** @type {Join} */\nfunction joinDefinition(left, right) {\n  // No blank line between adjacent definitions.\n  if (left.type === 'definition' && left.type === right.type) {\n    return 0\n  }\n}\n\n/**\n * Serialize the children of a parent that contains phrasing children.\n *\n * These children will be joined flush together.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Parent & {children: Array<PhrasingContent>}} parent\n *   Parent of flow nodes.\n * @param {Info} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined together.\n */\nfunction containerPhrasingBound(parent, info) {\n  return containerPhrasing(parent, this, info)\n}\n\n/**\n * Serialize the children of a parent that contains flow children.\n *\n * These children will typically be joined by blank lines.\n * What they are joined by exactly is defined by `Join` functions.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Parent & {children: Array<FlowContent>}} parent\n *   Parent of flow nodes.\n * @param {TrackFields} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined by (blank) lines.\n */\nfunction containerFlowBound(parent, info) {\n  return containerFlow(parent, this, info)\n}\n\n/**\n * Make a string safe for embedding in markdown constructs.\n *\n * In markdown, almost all punctuation characters can, in certain cases,\n * result in something.\n * Whether they do is highly subjective to where they happen and in what\n * they happen.\n *\n * To solve this, `mdast-util-to-markdown` tracks:\n *\n * * Characters before and after something;\n * * What “constructs” we are in.\n *\n * This information is then used by this function to escape or encode\n * special characters.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {string | null | undefined} value\n *   Raw value to make safe.\n * @param {SafeConfig} config\n *   Configuration.\n * @returns {string}\n *   Serialized markdown safe for embedding.\n */\nfunction safeBound(value, config) {\n  return safe(this, value, config)\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownOptions\n * @typedef {Omit<ToMarkdownOptions, 'extensions'>} Options\n */\n\nimport {toMarkdown} from 'mdast-util-to-markdown'\n\n/**\n * @this {import('unified').Processor}\n * @type {import('unified').Plugin<[Options?]|void[], Node, string>}\n */\nexport default function remarkStringify(options) {\n  /** @type {import('unified').CompilerFunction<Node, string>} */\n  const compiler = (tree) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return toMarkdown(\n      tree,\n      Object.assign({}, settings, options, {\n        // Note: this option is not in the readme.\n        // The goal is for it to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions:\n          /** @type {ToMarkdownOptions['extensions']} */ (\n            this.data('toMarkdownExtensions')\n          ) || []\n      })\n    )\n  }\n\n  Object.assign(this, {Compiler: compiler})\n}\n"],"names":["configure","base","extension","index","key","blockquote","node","_","state","info","exit","tracker","value","map","line","blank","hardBreak","_1","patternInScope","longestStreak","substring","source","expected","count","max","formatCodeAsIndented","checkFence","marker","code","raw","suffix","sequence","subexit","checkQuote","definition","quote","checkEmphasis","emphasis","emphasisPeek","formatHeadingAsSetext","literalWithBreak","visit","EXIT","toString","heading","rank","html","htmlPeek","image","imagePeek","imageReference","imageReferencePeek","type","alt","stack","reference","formatLinkAsAutolink","link","linkPeek","linkReference","linkReferencePeek","text","checkBulletOther","bullet","checkBullet","bulletOther","checkBulletOrdered","checkBulletOrderedOther","bulletOrdered","bulletOrderedOther","checkRule","list","parent","bulletCurrent","bulletLastUsed","useDifferentMarker","firstListItem","item","paragraph","root","d","phrasing","checkStrong","strong","strongPeek","checkRuleRepetition","repetition","thematicBreak","handle","inlineCode","listItem","join","joinDefaults","left","right","fullPhrasingSpans","unsafe","toMarkdown","tree","options","enter","indentLines","association","containerPhrasingBound","containerFlowBound","track","safeBound","handlers","joinDefinition","zwitch","invalid","unknown","result","name","containerPhrasing","containerFlow","config","safe","remarkStringify","settings"],"mappings":"8SAUO,SAASA,EAAUC,EAAMC,EAAW,CACzC,IAAIC,EAAQ,GAERC,EAGJ,GAAIF,EAAU,WACZ,KAAO,EAAEC,EAAQD,EAAU,WAAW,QACpCF,EAAUC,EAAMC,EAAU,WAAWC,CAAK,CAAC,EAI/C,IAAKC,KAAOF,EACNE,IAAQ,eAEDA,IAAQ,UAAYA,IAAQ,OAGrCH,EAAKG,CAAG,EAAI,CAAC,GAAIH,EAAKG,CAAG,GAAK,CAAE,EAAG,GAAIF,EAAUE,CAAG,GAAK,CAAE,CAAC,EACnDA,IAAQ,WACjBH,EAAKG,CAAG,EAAI,OAAO,OAAOH,EAAKG,CAAG,EAAGF,EAAUE,CAAG,GAAK,EAAE,EAGzDH,EAAK,QAAQG,CAAG,EAAIF,EAAUE,CAAG,GAIrC,OAAOH,CACT,CCvBO,SAASI,EAAWC,EAAMC,EAAGC,EAAOC,EAAM,CAC/C,MAAMC,EAAOF,EAAM,MAAM,YAAY,EAC/BG,EAAUH,EAAM,cAAcC,CAAI,EACxCE,EAAQ,KAAK,IAAI,EACjBA,EAAQ,MAAM,CAAC,EACf,MAAMC,EAAQJ,EAAM,YAClBA,EAAM,cAAcF,EAAMK,EAAQ,QAAO,CAAE,EAC3CE,CACD,EACD,OAAAH,EAAM,EACCE,CACT,CAGA,SAASC,EAAIC,EAAMP,EAAGQ,EAAO,CAC3B,MAAO,KAAOA,EAAQ,GAAK,KAAOD,CACpC,CCfO,SAASE,EAAUT,EAAGU,EAAIT,EAAOC,EAAM,CAC5C,IAAIN,EAAQ,GAEZ,KAAO,EAAEA,EAAQK,EAAM,OAAO,QAG5B,GACEA,EAAM,OAAOL,CAAK,EAAE,YAAc;AAAA,GAClCe,EAAeV,EAAM,MAAOA,EAAM,OAAOL,CAAK,CAAC,EAE/C,MAAO,QAAQ,KAAKM,EAAK,MAAM,EAAI,GAAK,IAI5C,MAAO;AAAA,CACT,CCrBO,SAASU,EAAcP,EAAOQ,EAAW,CAC9C,MAAMC,EAAS,OAAOT,CAAK,EAC3B,IAAIT,EAAQkB,EAAO,QAAQD,CAAS,EAChCE,EAAWnB,EACXoB,EAAQ,EACRC,EAAM,EAEV,GAAI,OAAOJ,GAAc,SACvB,MAAM,IAAI,UAAU,oBAAoB,EAG1C,KAAOjB,IAAU,IACXA,IAAUmB,EACR,EAAEC,EAAQC,IACZA,EAAMD,GAGRA,EAAQ,EAGVD,EAAWnB,EAAQiB,EAAU,OAC7BjB,EAAQkB,EAAO,QAAQD,EAAWE,CAAQ,EAG5C,OAAOE,CACT,CCzBO,SAASC,EAAqBnB,EAAME,EAAO,CAChD,MAAO,GACL,CAACA,EAAM,QAAQ,QACbF,EAAK,OAEL,CAACA,EAAK,MAEN,WAAW,KAAKA,EAAK,KAAK,GAE1B,CAAC,0CAA0C,KAAKA,EAAK,KAAK,EAEhE,CCZO,SAASoB,EAAWlB,EAAO,CAChC,MAAMmB,EAASnB,EAAM,QAAQ,OAAS,IAEtC,GAAImB,IAAW,KAAOA,IAAW,IAC/B,MAAM,IAAI,MACR,+BACEA,EACA,gDACH,EAGH,OAAOA,CACT,CCFO,SAASC,EAAKtB,EAAMC,EAAGC,EAAOC,EAAM,CACzC,MAAMkB,EAASD,EAAWlB,CAAK,EACzBqB,EAAMvB,EAAK,OAAS,GACpBwB,EAASH,IAAW,IAAM,cAAgB,QAEhD,GAAIF,EAAqBnB,EAAME,CAAK,EAAG,CACrC,MAAME,EAAOF,EAAM,MAAM,cAAc,EACjCI,EAAQJ,EAAM,YAAYqB,EAAKhB,CAAG,EACxC,OAAAH,EAAM,EACCE,CACR,CAED,MAAMD,EAAUH,EAAM,cAAcC,CAAI,EAClCsB,EAAWJ,EAAO,OAAO,KAAK,IAAIR,EAAcU,EAAKF,CAAM,EAAI,EAAG,CAAC,CAAC,EACpEjB,EAAOF,EAAM,MAAM,YAAY,EACrC,IAAII,EAAQD,EAAQ,KAAKoB,CAAQ,EAEjC,GAAIzB,EAAK,KAAM,CACb,MAAM0B,EAAUxB,EAAM,MAAM,iBAAiBsB,CAAM,EAAE,EACrDlB,GAASD,EAAQ,KACfH,EAAM,KAAKF,EAAK,KAAM,CACpB,OAAQM,EACR,MAAO,IACP,OAAQ,CAAC,GAAG,EACZ,GAAGD,EAAQ,QAAS,CAC5B,CAAO,CACF,EACDqB,EAAS,CACV,CAED,GAAI1B,EAAK,MAAQA,EAAK,KAAM,CAC1B,MAAM0B,EAAUxB,EAAM,MAAM,iBAAiBsB,CAAM,EAAE,EACrDlB,GAASD,EAAQ,KAAK,GAAG,EACzBC,GAASD,EAAQ,KACfH,EAAM,KAAKF,EAAK,KAAM,CACpB,OAAQM,EACR,MAAO;AAAA,EACP,OAAQ,CAAC,GAAG,EACZ,GAAGD,EAAQ,QAAS,CAC5B,CAAO,CACF,EACDqB,EAAS,CACV,CAED,OAAApB,GAASD,EAAQ,KAAK;AAAA,CAAI,EAEtBkB,IACFjB,GAASD,EAAQ,KAAKkB,EAAM;AAAA,CAAI,GAGlCjB,GAASD,EAAQ,KAAKoB,CAAQ,EAC9BrB,EAAM,EACCE,CACT,CAGA,SAASC,EAAIC,EAAMP,EAAGQ,EAAO,CAC3B,OAAQA,EAAQ,GAAK,QAAUD,CACjC,CCpEO,SAASmB,EAAWzB,EAAO,CAChC,MAAMmB,EAASnB,EAAM,QAAQ,OAAS,IAEtC,GAAImB,IAAW,KAAOA,IAAW,IAC/B,MAAM,IAAI,MACR,gCACEA,EACA,8CACH,EAGH,OAAOA,CACT,CCLO,SAASO,EAAW5B,EAAMC,EAAGC,EAAOC,EAAM,CAC/C,MAAM0B,EAAQF,EAAWzB,CAAK,EACxBsB,EAASK,IAAU,IAAM,QAAU,aACnCzB,EAAOF,EAAM,MAAM,YAAY,EACrC,IAAIwB,EAAUxB,EAAM,MAAM,OAAO,EACjC,MAAMG,EAAUH,EAAM,cAAcC,CAAI,EACxC,IAAIG,EAAQD,EAAQ,KAAK,GAAG,EAC5B,OAAAC,GAASD,EAAQ,KACfH,EAAM,KAAKA,EAAM,cAAcF,CAAI,EAAG,CACpC,OAAQM,EACR,MAAO,IACP,GAAGD,EAAQ,QAAS,CAC1B,CAAK,CACF,EACDC,GAASD,EAAQ,KAAK,KAAK,EAE3BqB,EAAS,EAIP,CAAC1B,EAAK,KAEN,eAAe,KAAKA,EAAK,GAAG,GAE5B0B,EAAUxB,EAAM,MAAM,oBAAoB,EAC1CI,GAASD,EAAQ,KAAK,GAAG,EACzBC,GAASD,EAAQ,KACfH,EAAM,KAAKF,EAAK,IAAK,CAAC,OAAQM,EAAO,MAAO,IAAK,GAAGD,EAAQ,QAAS,CAAA,CAAC,CACvE,EACDC,GAASD,EAAQ,KAAK,GAAG,IAGzBqB,EAAUxB,EAAM,MAAM,gBAAgB,EACtCI,GAASD,EAAQ,KACfH,EAAM,KAAKF,EAAK,IAAK,CACnB,OAAQM,EACR,MAAON,EAAK,MAAQ,IAAM;AAAA,EAC1B,GAAGK,EAAQ,QAAS,CAC5B,CAAO,CACF,GAGHqB,EAAS,EAEL1B,EAAK,QACP0B,EAAUxB,EAAM,MAAM,QAAQsB,CAAM,EAAE,EACtClB,GAASD,EAAQ,KAAK,IAAMwB,CAAK,EACjCvB,GAASD,EAAQ,KACfH,EAAM,KAAKF,EAAK,MAAO,CACrB,OAAQM,EACR,MAAOuB,EACP,GAAGxB,EAAQ,QAAS,CAC5B,CAAO,CACF,EACDC,GAASD,EAAQ,KAAKwB,CAAK,EAC3BH,EAAS,GAGXtB,EAAM,EAECE,CACT,CCpEO,SAASwB,EAAc5B,EAAO,CACnC,MAAMmB,EAASnB,EAAM,QAAQ,UAAY,IAEzC,GAAImB,IAAW,KAAOA,IAAW,IAC/B,MAAM,IAAI,MACR,mCACEA,EACA,gDACH,EAGH,OAAOA,CACT,CCZAU,EAAS,KAAOC,EAaT,SAASD,EAAS/B,EAAMC,EAAGC,EAAOC,EAAM,CAC7C,MAAMkB,EAASS,EAAc5B,CAAK,EAC5BE,EAAOF,EAAM,MAAM,UAAU,EAC7BG,EAAUH,EAAM,cAAcC,CAAI,EACxC,IAAIG,EAAQD,EAAQ,KAAKgB,CAAM,EAC/B,OAAAf,GAASD,EAAQ,KACfH,EAAM,kBAAkBF,EAAM,CAC5B,OAAQM,EACR,MAAOe,EACP,GAAGhB,EAAQ,QAAS,CAC1B,CAAK,CACF,EACDC,GAASD,EAAQ,KAAKgB,CAAM,EAC5BjB,EAAM,EACCE,CACT,CAQA,SAAS0B,EAAa/B,EAAGU,EAAIT,EAAO,CAClC,OAAOA,EAAM,QAAQ,UAAY,GACnC,CClCO,SAAS+B,EAAsBjC,EAAME,EAAO,CACjD,IAAIgC,EAAmB,GAIvB,OAAAC,EAAMnC,EAAOA,GAAS,CACpB,GACG,UAAWA,GAAQ,WAAW,KAAKA,EAAK,KAAK,GAC9CA,EAAK,OAAS,QAEd,OAAAkC,EAAmB,GACZE,CAEb,CAAG,EAEM,IACJ,CAACpC,EAAK,OAASA,EAAK,MAAQ,IAC3BqC,EAASrC,CAAI,IACZE,EAAM,QAAQ,QAAUgC,GAE/B,CCjBO,SAASI,GAAQtC,EAAMC,EAAGC,EAAOC,EAAM,CAC5C,MAAMoC,EAAO,KAAK,IAAI,KAAK,IAAI,EAAGvC,EAAK,OAAS,CAAC,EAAG,CAAC,EAC/CK,EAAUH,EAAM,cAAcC,CAAI,EAExC,GAAI8B,EAAsBjC,EAAME,CAAK,EAAG,CACtC,MAAME,EAAOF,EAAM,MAAM,eAAe,EAClCwB,EAAUxB,EAAM,MAAM,UAAU,EAChCI,EAAQJ,EAAM,kBAAkBF,EAAM,CAC1C,GAAGK,EAAQ,QAAS,EACpB,OAAQ;AAAA,EACR,MAAO;AAAA,CACb,CAAK,EACD,OAAAqB,EAAS,EACTtB,EAAM,EAGJE,EACA;AAAA,GACCiC,IAAS,EAAI,IAAM,KAAK,OAEvBjC,EAAM,QAGH,KAAK,IAAIA,EAAM,YAAY,IAAI,EAAGA,EAAM,YAAY;AAAA,CAAI,CAAC,EAAI,EACjE,CAEJ,CAED,MAAMmB,EAAW,IAAI,OAAOc,CAAI,EAC1BnC,EAAOF,EAAM,MAAM,YAAY,EAC/BwB,EAAUxB,EAAM,MAAM,UAAU,EAMtCG,EAAQ,KAAKoB,EAAW,GAAG,EAE3B,IAAInB,EAAQJ,EAAM,kBAAkBF,EAAM,CACxC,OAAQ,KACR,MAAO;AAAA,EACP,GAAGK,EAAQ,QAAS,CACxB,CAAG,EAED,MAAI,SAAS,KAAKC,CAAK,IAErBA,EACE,MACAA,EAAM,WAAW,CAAC,EAAE,SAAS,EAAE,EAAE,YAAa,EAC9C,IACAA,EAAM,MAAM,CAAC,GAGjBA,EAAQA,EAAQmB,EAAW,IAAMnB,EAAQmB,EAErCvB,EAAM,QAAQ,WAChBI,GAAS,IAAMmB,GAGjBC,EAAS,EACTtB,EAAM,EAECE,CACT,CC3EAkC,EAAK,KAAOC,GAML,SAASD,EAAKxC,EAAM,CACzB,OAAOA,EAAK,OAAS,EACvB,CAKA,SAASyC,IAAW,CAClB,MAAO,GACT,CCVAC,EAAM,KAAOC,GASN,SAASD,EAAM1C,EAAMC,EAAGC,EAAOC,EAAM,CAC1C,MAAM0B,EAAQF,EAAWzB,CAAK,EACxBsB,EAASK,IAAU,IAAM,QAAU,aACnCzB,EAAOF,EAAM,MAAM,OAAO,EAChC,IAAIwB,EAAUxB,EAAM,MAAM,OAAO,EACjC,MAAMG,EAAUH,EAAM,cAAcC,CAAI,EACxC,IAAIG,EAAQD,EAAQ,KAAK,IAAI,EAC7B,OAAAC,GAASD,EAAQ,KACfH,EAAM,KAAKF,EAAK,IAAK,CAAC,OAAQM,EAAO,MAAO,IAAK,GAAGD,EAAQ,QAAS,CAAA,CAAC,CACvE,EACDC,GAASD,EAAQ,KAAK,IAAI,EAE1BqB,EAAS,EAIN,CAAC1B,EAAK,KAAOA,EAAK,OAEnB,eAAe,KAAKA,EAAK,GAAG,GAE5B0B,EAAUxB,EAAM,MAAM,oBAAoB,EAC1CI,GAASD,EAAQ,KAAK,GAAG,EACzBC,GAASD,EAAQ,KACfH,EAAM,KAAKF,EAAK,IAAK,CAAC,OAAQM,EAAO,MAAO,IAAK,GAAGD,EAAQ,QAAS,CAAA,CAAC,CACvE,EACDC,GAASD,EAAQ,KAAK,GAAG,IAGzBqB,EAAUxB,EAAM,MAAM,gBAAgB,EACtCI,GAASD,EAAQ,KACfH,EAAM,KAAKF,EAAK,IAAK,CACnB,OAAQM,EACR,MAAON,EAAK,MAAQ,IAAM,IAC1B,GAAGK,EAAQ,QAAS,CAC5B,CAAO,CACF,GAGHqB,EAAS,EAEL1B,EAAK,QACP0B,EAAUxB,EAAM,MAAM,QAAQsB,CAAM,EAAE,EACtClB,GAASD,EAAQ,KAAK,IAAMwB,CAAK,EACjCvB,GAASD,EAAQ,KACfH,EAAM,KAAKF,EAAK,MAAO,CACrB,OAAQM,EACR,MAAOuB,EACP,GAAGxB,EAAQ,QAAS,CAC5B,CAAO,CACF,EACDC,GAASD,EAAQ,KAAKwB,CAAK,EAC3BH,EAAS,GAGXpB,GAASD,EAAQ,KAAK,GAAG,EACzBD,EAAM,EAECE,CACT,CAKA,SAASqC,IAAY,CACnB,MAAO,GACT,CC5EAC,EAAe,KAAOC,GASf,SAASD,EAAe5C,EAAMC,EAAGC,EAAOC,EAAM,CACnD,MAAM2C,EAAO9C,EAAK,cACZI,EAAOF,EAAM,MAAM,gBAAgB,EACzC,IAAIwB,EAAUxB,EAAM,MAAM,OAAO,EACjC,MAAMG,EAAUH,EAAM,cAAcC,CAAI,EACxC,IAAIG,EAAQD,EAAQ,KAAK,IAAI,EAC7B,MAAM0C,EAAM7C,EAAM,KAAKF,EAAK,IAAK,CAC/B,OAAQM,EACR,MAAO,IACP,GAAGD,EAAQ,QAAS,CACxB,CAAG,EACDC,GAASD,EAAQ,KAAK0C,EAAM,IAAI,EAEhCrB,EAAS,EAET,MAAMsB,EAAQ9C,EAAM,MACpBA,EAAM,MAAQ,CAAE,EAChBwB,EAAUxB,EAAM,MAAM,WAAW,EAKjC,MAAM+C,EAAY/C,EAAM,KAAKA,EAAM,cAAcF,CAAI,EAAG,CACtD,OAAQM,EACR,MAAO,IACP,GAAGD,EAAQ,QAAS,CACxB,CAAG,EACD,OAAAqB,EAAS,EACTxB,EAAM,MAAQ8C,EACd5C,EAAM,EAEF0C,IAAS,QAAU,CAACC,GAAOA,IAAQE,EACrC3C,GAASD,EAAQ,KAAK4C,EAAY,GAAG,EAC5BH,IAAS,WAElBxC,EAAQA,EAAM,MAAM,EAAG,EAAE,EAEzBA,GAASD,EAAQ,KAAK,GAAG,EAGpBC,CACT,CAKA,SAASuC,IAAqB,CAC5B,MAAO,GACT,CCpDO,SAASK,EAAqBlD,EAAME,EAAO,CAChD,MAAMqB,EAAMc,EAASrC,CAAI,EAEzB,MAAO,GACL,CAACE,EAAM,QAAQ,cAEbF,EAAK,KAEL,CAACA,EAAK,OAENA,EAAK,UACLA,EAAK,SAAS,SAAW,GACzBA,EAAK,SAAS,CAAC,EAAE,OAAS,SAEzBuB,IAAQvB,EAAK,KAAO,UAAYuB,IAAQvB,EAAK,MAE9C,oBAAoB,KAAKA,EAAK,GAAG,GAGjC,CAAC,iBAAiB,KAAKA,EAAK,GAAG,EAErC,CCtBAmD,EAAK,KAAOC,GASL,SAASD,EAAKnD,EAAMC,EAAGC,EAAOC,EAAM,CACzC,MAAM0B,EAAQF,EAAWzB,CAAK,EACxBsB,EAASK,IAAU,IAAM,QAAU,aACnCxB,EAAUH,EAAM,cAAcC,CAAI,EAExC,IAAIC,EAEAsB,EAEJ,GAAIwB,EAAqBlD,EAAME,CAAK,EAAG,CAErC,MAAM8C,EAAQ9C,EAAM,MACpBA,EAAM,MAAQ,CAAE,EAChBE,EAAOF,EAAM,MAAM,UAAU,EAC7B,IAAII,EAAQD,EAAQ,KAAK,GAAG,EAC5B,OAAAC,GAASD,EAAQ,KACfH,EAAM,kBAAkBF,EAAM,CAC5B,OAAQM,EACR,MAAO,IACP,GAAGD,EAAQ,QAAS,CAC5B,CAAO,CACF,EACDC,GAASD,EAAQ,KAAK,GAAG,EACzBD,EAAM,EACNF,EAAM,MAAQ8C,EACP1C,CACR,CAEDF,EAAOF,EAAM,MAAM,MAAM,EACzBwB,EAAUxB,EAAM,MAAM,OAAO,EAC7B,IAAII,EAAQD,EAAQ,KAAK,GAAG,EAC5B,OAAAC,GAASD,EAAQ,KACfH,EAAM,kBAAkBF,EAAM,CAC5B,OAAQM,EACR,MAAO,KACP,GAAGD,EAAQ,QAAS,CAC1B,CAAK,CACF,EACDC,GAASD,EAAQ,KAAK,IAAI,EAC1BqB,EAAS,EAIN,CAAC1B,EAAK,KAAOA,EAAK,OAEnB,eAAe,KAAKA,EAAK,GAAG,GAE5B0B,EAAUxB,EAAM,MAAM,oBAAoB,EAC1CI,GAASD,EAAQ,KAAK,GAAG,EACzBC,GAASD,EAAQ,KACfH,EAAM,KAAKF,EAAK,IAAK,CAAC,OAAQM,EAAO,MAAO,IAAK,GAAGD,EAAQ,QAAS,CAAA,CAAC,CACvE,EACDC,GAASD,EAAQ,KAAK,GAAG,IAGzBqB,EAAUxB,EAAM,MAAM,gBAAgB,EACtCI,GAASD,EAAQ,KACfH,EAAM,KAAKF,EAAK,IAAK,CACnB,OAAQM,EACR,MAAON,EAAK,MAAQ,IAAM,IAC1B,GAAGK,EAAQ,QAAS,CAC5B,CAAO,CACF,GAGHqB,EAAS,EAEL1B,EAAK,QACP0B,EAAUxB,EAAM,MAAM,QAAQsB,CAAM,EAAE,EACtClB,GAASD,EAAQ,KAAK,IAAMwB,CAAK,EACjCvB,GAASD,EAAQ,KACfH,EAAM,KAAKF,EAAK,MAAO,CACrB,OAAQM,EACR,MAAOuB,EACP,GAAGxB,EAAQ,QAAS,CAC5B,CAAO,CACF,EACDC,GAASD,EAAQ,KAAKwB,CAAK,EAC3BH,EAAS,GAGXpB,GAASD,EAAQ,KAAK,GAAG,EAEzBD,EAAM,EACCE,CACT,CAQA,SAAS8C,GAASpD,EAAMC,EAAGC,EAAO,CAChC,OAAOgD,EAAqBlD,EAAME,CAAK,EAAI,IAAM,GACnD,CC5GAmD,EAAc,KAAOC,GASd,SAASD,EAAcrD,EAAMC,EAAGC,EAAOC,EAAM,CAClD,MAAM2C,EAAO9C,EAAK,cACZI,EAAOF,EAAM,MAAM,eAAe,EACxC,IAAIwB,EAAUxB,EAAM,MAAM,OAAO,EACjC,MAAMG,EAAUH,EAAM,cAAcC,CAAI,EACxC,IAAIG,EAAQD,EAAQ,KAAK,GAAG,EAC5B,MAAMkD,EAAOrD,EAAM,kBAAkBF,EAAM,CACzC,OAAQM,EACR,MAAO,IACP,GAAGD,EAAQ,QAAS,CACxB,CAAG,EACDC,GAASD,EAAQ,KAAKkD,EAAO,IAAI,EAEjC7B,EAAS,EAET,MAAMsB,EAAQ9C,EAAM,MACpBA,EAAM,MAAQ,CAAE,EAChBwB,EAAUxB,EAAM,MAAM,WAAW,EAKjC,MAAM+C,EAAY/C,EAAM,KAAKA,EAAM,cAAcF,CAAI,EAAG,CACtD,OAAQM,EACR,MAAO,IACP,GAAGD,EAAQ,QAAS,CACxB,CAAG,EACD,OAAAqB,EAAS,EACTxB,EAAM,MAAQ8C,EACd5C,EAAM,EAEF0C,IAAS,QAAU,CAACS,GAAQA,IAASN,EACvC3C,GAASD,EAAQ,KAAK4C,EAAY,GAAG,EAC5BH,IAAS,WAElBxC,EAAQA,EAAM,MAAM,EAAG,EAAE,EAEzBA,GAASD,EAAQ,KAAK,GAAG,EAGpBC,CACT,CAKA,SAASgD,IAAoB,CAC3B,MAAO,GACT,CCrDO,SAASE,GAAiBtD,EAAO,CACtC,MAAMuD,EAASC,EAAYxD,CAAK,EAC1ByD,EAAczD,EAAM,QAAQ,YAElC,GAAI,CAACyD,EACH,OAAOF,IAAW,IAAM,IAAM,IAGhC,GAAIE,IAAgB,KAAOA,IAAgB,KAAOA,IAAgB,IAChE,MAAM,IAAI,MACR,gCACEA,EACA,wDACH,EAGH,GAAIA,IAAgBF,EAClB,MAAM,IAAI,MACR,uBACEA,EACA,0BACAE,EACA,oBACH,EAGH,OAAOA,CACT,CC7BO,SAASC,EAAmB1D,EAAO,CACxC,MAAMmB,EAASnB,EAAM,QAAQ,eAAiB,IAE9C,GAAImB,IAAW,KAAOA,IAAW,IAC/B,MAAM,IAAI,MACR,gCACEA,EACA,oDACH,EAGH,OAAOA,CACT,CCVO,SAASwC,GAAwB3D,EAAO,CAC7C,MAAM4D,EAAgBF,EAAmB1D,CAAK,EACxC6D,EAAqB7D,EAAM,QAAQ,mBAEzC,GAAI,CAAC6D,EACH,OAAOD,IAAkB,IAAM,IAAM,IAGvC,GAAIC,IAAuB,KAAOA,IAAuB,IACvD,MAAM,IAAI,MACR,gCACEA,EACA,+DACH,EAGH,GAAIA,IAAuBD,EACzB,MAAM,IAAI,MACR,8BACEA,EACA,iCACAC,EACA,oBACH,EAGH,OAAOA,CACT,CC7BO,SAASC,EAAU9D,EAAO,CAC/B,MAAMmB,EAASnB,EAAM,QAAQ,MAAQ,IAErC,GAAImB,IAAW,KAAOA,IAAW,KAAOA,IAAW,IACjD,MAAM,IAAI,MACR,gCACEA,EACA,iDACH,EAGH,OAAOA,CACT,CCDO,SAAS4C,GAAKjE,EAAMkE,EAAQhE,EAAOC,EAAM,CAC9C,MAAMC,EAAOF,EAAM,MAAM,MAAM,EACzBiE,EAAgBjE,EAAM,cAE5B,IAAIuD,EAASzD,EAAK,QAAU4D,EAAmB1D,CAAK,EAAIwD,EAAYxD,CAAK,EAEzE,MAAMyD,EAAc3D,EAAK,QACrB6D,GAAwB3D,CAAK,EAC7BsD,GAAiBtD,CAAK,EACpBkE,EAAiBlE,EAAM,eAC7B,IAAImE,EAAqB,GAczB,GAXEH,IAEClE,EAAK,QACFE,EAAM,QAAQ,mBACdA,EAAM,QAAQ,cAClBkE,GACAX,IAAWW,IAEXC,EAAqB,IAGnB,CAACrE,EAAK,QAAS,CACjB,MAAMsE,EAAgBtE,EAAK,SAAWA,EAAK,SAAS,CAAC,EAAI,OAqCzD,IAzBGyD,IAAW,KAAOA,IAAW,MAE9Ba,IACC,CAACA,EAAc,UAAY,CAACA,EAAc,SAAS,CAAC,IAErDpE,EAAM,MAAMA,EAAM,MAAM,OAAS,CAAC,IAAM,QACxCA,EAAM,MAAMA,EAAM,MAAM,OAAS,CAAC,IAAM,YACxCA,EAAM,MAAMA,EAAM,MAAM,OAAS,CAAC,IAAM,QACxCA,EAAM,MAAMA,EAAM,MAAM,OAAS,CAAC,IAAM,YAExCA,EAAM,WAAWA,EAAM,WAAW,OAAS,CAAC,IAAM,GAClDA,EAAM,WAAWA,EAAM,WAAW,OAAS,CAAC,IAAM,GAClDA,EAAM,WAAWA,EAAM,WAAW,OAAS,CAAC,IAAM,IAElDmE,EAAqB,IAWnBL,EAAU9D,CAAK,IAAMuD,GAAUa,EAAe,CAChD,IAAIzE,EAAQ,GAEZ,KAAO,EAAEA,EAAQG,EAAK,SAAS,QAAQ,CACrC,MAAMuE,EAAOvE,EAAK,SAASH,CAAK,EAEhC,GACE0E,GACAA,EAAK,OAAS,YACdA,EAAK,UACLA,EAAK,SAAS,CAAC,GACfA,EAAK,SAAS,CAAC,EAAE,OAAS,gBAC1B,CACAF,EAAqB,GACrB,KACD,CACF,CACF,CACF,CAEGA,IACFZ,EAASE,GAGXzD,EAAM,cAAgBuD,EACtB,MAAMnD,EAAQJ,EAAM,cAAcF,EAAMG,CAAI,EAC5C,OAAAD,EAAM,eAAiBuD,EACvBvD,EAAM,cAAgBiE,EACtB/D,EAAM,EACCE,CACT,CClGO,SAASkE,GAAUxE,EAAMC,EAAGC,EAAOC,EAAM,CAC9C,MAAMC,EAAOF,EAAM,MAAM,WAAW,EAC9BwB,EAAUxB,EAAM,MAAM,UAAU,EAChCI,EAAQJ,EAAM,kBAAkBF,EAAMG,CAAI,EAChD,OAAAuB,EAAS,EACTtB,EAAM,EACCE,CACT,CCLO,SAASmE,GAAKzE,EAAMC,EAAGC,EAAOC,EAAM,CAKzC,OAHoBH,EAAK,SAAS,KAAM0E,GAAMC,EAASD,CAAC,CAAC,EAChCxE,EAAM,kBAAoBA,EAAM,eAE/C,KAAKA,EAAOF,EAAMG,CAAI,CAClC,CCbO,SAASyE,GAAY1E,EAAO,CACjC,MAAMmB,EAASnB,EAAM,QAAQ,QAAU,IAEvC,GAAImB,IAAW,KAAOA,IAAW,IAC/B,MAAM,IAAI,MACR,iCACEA,EACA,8CACH,EAGH,OAAOA,CACT,CCZAwD,EAAO,KAAOC,GAaP,SAASD,EAAO7E,EAAMC,EAAGC,EAAOC,EAAM,CAC3C,MAAMkB,EAASuD,GAAY1E,CAAK,EAC1BE,EAAOF,EAAM,MAAM,QAAQ,EAC3BG,EAAUH,EAAM,cAAcC,CAAI,EACxC,IAAIG,EAAQD,EAAQ,KAAKgB,EAASA,CAAM,EACxC,OAAAf,GAASD,EAAQ,KACfH,EAAM,kBAAkBF,EAAM,CAC5B,OAAQM,EACR,MAAOe,EACP,GAAGhB,EAAQ,QAAS,CAC1B,CAAK,CACF,EACDC,GAASD,EAAQ,KAAKgB,EAASA,CAAM,EACrCjB,EAAM,EACCE,CACT,CAQA,SAASwE,GAAW7E,EAAGU,EAAIT,EAAO,CAChC,OAAOA,EAAM,QAAQ,QAAU,GACjC,CCjCO,SAASqD,GAAKvD,EAAMC,EAAGC,EAAOC,EAAM,CACzC,OAAOD,EAAM,KAAKF,EAAK,MAAOG,CAAI,CACpC,CCPO,SAAS4E,GAAoB7E,EAAO,CACzC,MAAM8E,EAAa9E,EAAM,QAAQ,gBAAkB,EAEnD,GAAI8E,EAAa,EACf,MAAM,IAAI,MACR,2CACEA,EACA,sDACH,EAGH,OAAOA,CACT,CCNO,SAASC,GAAchF,EAAGU,EAAIT,EAAO,CAC1C,MAAMI,GACJ0D,EAAU9D,CAAK,GAAKA,EAAM,QAAQ,WAAa,IAAM,KACrD,OAAO6E,GAAoB7E,CAAK,CAAC,EAEnC,OAAOA,EAAM,QAAQ,WAAaI,EAAM,MAAM,EAAG,EAAE,EAAIA,CACzD,CCEO,MAAM4E,GAAS,CACpB,WAAAnF,EACA,MAAOW,EACP,KAAAY,EACA,WAAAM,EACA,SAAAG,EACA,UAAArB,EACA,QAAA4B,GACA,KAAAE,EACA,MAAAE,EACA,eAAAE,EACA,WAAAuC,EACA,KAAAhC,EACA,cAAAE,EACA,KAAAY,GACA,SAAAmB,EACA,UAAAZ,GACA,KAAAC,GACA,OAAAI,EACA,KAAAtB,GACA,cAAA0B,EACF,ECpCaI,GAAO,CAACC,EAAY,EAGjC,SAASA,GAAaC,EAAMC,EAAOtB,EAAQhE,EAAO,CAYhD,GATEsF,EAAM,OAAS,QACfrE,EAAqBqE,EAAOtF,CAAK,IAChCqF,EAAK,OAAS,QACZA,EAAK,OAASC,EAAM,MAAQrE,EAAqBoE,EAAMrF,CAAK,IAO/DqF,EAAK,OAAS,QACdA,EAAK,OAASC,EAAM,MACpB,EAAQD,EAAK,SAAa,EAAQC,EAAM,SACxC,EAAED,EAAK,QACHrF,EAAM,QAAQ,mBACdA,EAAM,QAAQ,aAElB,MAAO,GAKT,GAAI,WAAYgE,GAAU,OAAOA,EAAO,QAAW,UACjD,OACEqB,EAAK,OAAS,cAEbA,EAAK,OAASC,EAAM,MACnBA,EAAM,OAAS,cAEdA,EAAM,OAAS,WAAavD,EAAsBuD,EAAOtF,CAAK,GAEjE,OAGKgE,EAAO,OAAS,EAAI,CAE/B,CCrCA,MAAMuB,EAAoB,CACxB,WACA,qBACA,iBACA,YACA,aACA,iBACF,EAGaC,GAAS,CACpB,CAAC,UAAW,IAAM,MAAO,WAAY,YAAa,UAAU,EAC5D,CAAC,UAAW,IAAM,OAAQ,WAAY,YAAa,UAAU,EAC7D,CACE,UAAW,IACX,YAAa,CAAC,4BAA6B,qBAAqB,CACjE,EACD,CACE,UAAW,KACX,YAAa,CACX,4BACA,sBACA,4BACA,sBACA,qBACA,YACD,CACF,EACD,CACE,UAAW;AAAA,EACX,YAAa,CACX,4BACA,sBACA,4BACA,sBACA,qBACA,YACD,CACF,EACD,CAAC,UAAW,IAAK,MAAO,WAAY,YAAa,UAAU,EAC3D,CAAC,UAAW,IAAK,OAAQ,WAAY,YAAa,UAAU,EAC5D,CACE,UAAW,IACX,YAAa,CAAC,4BAA6B,qBAAqB,CACjE,EAGD,CACE,UAAW,IACX,MAAO,MACP,YAAa,WACb,eAAgBD,CACjB,EAED,CAAC,UAAW,IAAK,YAAa,YAAY,EAE1C,CAAC,QAAS,GAAM,UAAW,GAAG,EAC9B,CAAC,UAAW,IAAK,YAAa,aAAc,MAAO;AAAA,KAAc,EAGjE,CAAC,UAAW,IAAK,MAAO,YAAa,YAAa,UAAU,EAE5D,CAAC,UAAW,IAAK,YAAa,iBAAiB,EAE/C,CAAC,UAAW,IAAK,YAAa,gBAAgB,EAE9C,CACE,OAAQ,MACR,UAAW,IACX,YAAa,WACb,eAAgBA,CACjB,EAGD,CAAC,QAAS,GAAM,OAAQ,OAAQ,UAAW,GAAG,EAC9C,CAAC,UAAW,IAAK,YAAa,gBAAgB,EAE9C,CAAC,QAAS,GAAM,UAAW,IAAK,MAAO;AAAA,IAAgB,EACvD,CAAC,UAAW,IAAK,YAAa,WAAY,eAAgBA,CAAiB,EAE3E,CAAC,QAAS,GAAM,UAAW,IAAK,MAAO;AAAA,GAAe,EAGtD,CAAC,QAAS,GAAM,UAAW,IAAK,MAAO;AAAA,IAAgB,EAEvD,CAAC,QAAS,GAAM,OAAQ,OAAQ,UAAW,IAAK,MAAO;AAAA,KAAiB,EAOxE,CAAC,QAAS,GAAM,UAAW,IAAK,MAAO,aAAa,EACpD,CACE,UAAW,IACX,MAAO,cACP,YAAa,WACb,eAAgBA,CACjB,EACD,CAAC,UAAW,IAAK,YAAa,oBAAoB,EAElD,CAAC,QAAS,GAAM,UAAW,GAAG,EAG9B,CAAC,QAAS,GAAM,UAAW,GAAG,EAC9B,CAAC,UAAW,IAAK,YAAa,oBAAoB,EAGlD,CAAC,QAAS,GAAM,UAAW,GAAG,EAC9B,CAAC,UAAW,IAAK,YAAa,WAAY,eAAgBA,CAAiB,EAC3E,CAAC,UAAW,IAAK,YAAa,CAAC,QAAS,WAAW,CAAC,EAIpD,CAAC,UAAW,KAAM,MAAO,WAAY,YAAa,UAAU,EAE5D,CAAC,UAAW,IAAK,YAAa,CAAC,QAAS,WAAW,CAAC,EAGpD,CAAC,QAAS,GAAM,UAAW,GAAG,EAC9B,CAAC,UAAW,IAAK,YAAa,WAAY,eAAgBA,CAAiB,EAG3E,CAAC,QAAS,GAAM,UAAW,GAAG,EAC9B,CACE,UAAW,IACX,YAAa,CAAC,4BAA6B,2BAA2B,CACvE,EACD,CAAC,UAAW,IAAK,YAAa,WAAY,eAAgBA,CAAiB,EAI3E,CAAC,QAAS,GAAM,UAAW,GAAG,CAChC,EC9GO,SAASE,GAAWC,EAAMC,EAAU,GAAI,CAE7C,MAAM3F,EAAQ,CACZ,MAAA4F,EACA,YAAAC,EACA,cAAeC,EACf,kBAAmBC,GACnB,cAAeC,GACf,cAAeC,EACf,KAAMC,GACN,MAAO,CAAE,EACT,OAAQ,CAAE,EACV,KAAM,CAAE,EAER,SAAU,CAAE,EACZ,QAAS,CAAE,EACX,WAAY,CAAE,EAEd,OAAQ,MACT,EAED1G,EAAUQ,EAAO,CAAC,OAAAwF,GAAQ,KAAAL,GAAI,SAAEgB,EAAQ,CAAC,EACzC3G,EAAUQ,EAAO2F,CAAO,EAEpB3F,EAAM,QAAQ,kBAChBR,EAAUQ,EAAO,CAAC,KAAM,CAACoG,EAAc,CAAC,CAAC,EAG3CpG,EAAM,OAASqG,EAAO,OAAQ,CAC5B,QAAAC,GACA,QAAAC,GACA,SAAUvG,EAAM,QACpB,CAAG,EAED,IAAIwG,EAASxG,EAAM,OAAO0F,EAAM,OAAW1F,EAAO,CAChD,OAAQ;AAAA,EACR,MAAO;AAAA,EACP,IAAK,CAAC,KAAM,EAAG,OAAQ,CAAC,EACxB,UAAW,CACf,CAAG,EAED,OACEwG,GACAA,EAAO,WAAWA,EAAO,OAAS,CAAC,IAAM,IACzCA,EAAO,WAAWA,EAAO,OAAS,CAAC,IAAM,KAEzCA,GAAU;AAAA,GAGLA,EAGP,SAASZ,EAAMa,EAAM,CACnB,OAAAzG,EAAM,MAAM,KAAKyG,CAAI,EACdvG,EAEP,SAASA,GAAO,CACdF,EAAM,MAAM,IAAK,CAClB,CACF,CACH,CAMA,SAASsG,GAAQlG,EAAO,CACtB,MAAM,IAAI,MAAM,wBAA0BA,EAAQ,kBAAkB,CACtE,CAMA,SAASmG,GAAQzG,EAAM,CAErB,MAAM,IAAI,MAAM,+BAAiCA,EAAK,KAAO,GAAG,CAClE,CAGA,SAASsG,GAAef,EAAMC,EAAO,CAEnC,GAAID,EAAK,OAAS,cAAgBA,EAAK,OAASC,EAAM,KACpD,MAAO,EAEX,CAgBA,SAASS,GAAuB/B,EAAQ/D,EAAM,CAC5C,OAAOyG,EAAkB1C,EAAQ,KAAM/D,CAAI,CAC7C,CAiBA,SAAS+F,GAAmBhC,EAAQ/D,EAAM,CACxC,OAAO0G,EAAc3C,EAAQ,KAAM/D,CAAI,CACzC,CA2BA,SAASiG,GAAU9F,EAAOwG,EAAQ,CAChC,OAAOC,EAAK,KAAMzG,EAAOwG,CAAM,CACjC,CC/Ke,SAASE,GAAgBnB,EAAS,CAoB/C,OAAO,OAAO,KAAM,CAAC,SAlBHD,GAAS,CAEzB,MAAMqB,EAAmC,KAAK,KAAK,UAAU,EAE7D,OAAOtB,GACLC,EACA,OAAO,OAAO,GAAIqB,EAAUpB,EAAS,CAInC,WAEI,KAAK,KAAK,sBAAsB,GAC7B,CAAE,CACjB,CAAO,CACF,CACF,CAEsC,CAAC,CAC1C","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]}